---

# This script contains commands to manage "Docker SQL workflow":
#
# - Running registry rebuild (when modules have been moved to new directory)
# - Running database updates

- name: Exising container name is...
  debug: msg={{ existing_container_name }}
  when: existing_container_name is defined

# Vagrant build.
- name: Delete old container
  shell: docker rm -f {{ mysql_db }}
  when: existing_container_name is undefined and (pp_environment == "default" and ((ansible_env.USER is not defined or ansible_env.USER != "{{ ci_server_username }}") and (ansible_env.SUDO_USER is not defined or ansible_env.SUDO_USER != "{{ ci_server_username }}")))
  ignore_errors: true

- name: Enable insecure registry for docker
  lineinfile: dest='/etc/docker/daemon.json' line='{ "insecure-registries":["{{ docker_registry }}"] }' create=yes
  when: docker_registry is defined and existing_container_name is undefined and (pp_environment == "default" and ((ansible_env.USER is not defined or ansible_env.USER != "{{ ci_server_username }}") and (ansible_env.SUDO_USER is not defined or ansible_env.SUDO_USER != "{{ ci_server_username }}")))
  sudo: yes

- name: Restart docker with new settings
  shell: service docker restart
  when: docker_registry is defined and existing_container_name is undefined and (pp_environment == "default" and ((ansible_env.USER is not defined or ansible_env.USER != "{{ ci_server_username }}") and (ansible_env.SUDO_USER is not defined or ansible_env.SUDO_USER != "{{ ci_server_username }}")))
  sudo: yes

- name: Delete "demo" container
  shell: docker rm -f {{ mysql_db }}
  when: existing_container_name is defined and existing_container_name == "demo"
  ignore_errors: true

- name: Delete "demo_ct" container
  shell: docker rm -f {{ mysql_db }}
  when: existing_container_name is defined and existing_container_name == "demo_ct"
  ignore_errors: true

- name: Delete "demo_climate" container
  shell: docker rm -f {{ mysql_db }}
  when: existing_container_name is defined and existing_container_name == "demo_climate"
  ignore_errors: true

- name: Update source image
  shell: docker pull {{ docker_prod_image }}

- name: Run docker network
  shell: docker network create --subnet=172.18.0.0/16 buildnet
  ignore_errors: true

# Run docker container.
- name: Obtain unique container for a build
  shell: docker run --net buildnet --ip {{ docker_sql_host }} --name {{ mysql_db }} -di {{ docker_prod_image }}
  when: existing_container_name is undefined

- name: Run docker container for "demo"
  shell: docker run --net buildnet --ip {{ docker_demo_sql_host }} --name {{ mysql_db }} -di {{ docker_prod_image }}
  when: existing_container_name is defined and existing_container_name == "demo"

- name: Run docker container for "demo_ct"
  shell: docker run --net buildnet --ip {{ docker_demo_sql_host }} --name {{ mysql_db }} -di {{ docker_prod_image }}
  when: existing_container_name is defined and existing_container_name == "demo_ct"

- name: Run docker container for "demo_climate"
  shell: docker run --net buildnet --ip {{ docker_demo_sql_host }} --name {{ mysql_db }} -di {{ docker_prod_image }}
  when: existing_container_name is defined and existing_container_name == "demo_climate"

- name: Run mysql within docker container
  shell: docker exec {{ mysql_db }} service mysql start
  when: existing_container_name is undefined

- name: Run mysql within docker container (existing container)
  shell: docker exec {{ existing_container_name }} service mysql start
  when: existing_container_name is defined

# Run registry rebuild.
- name: Check if registry_rebuild is installed
  shell: "{{ php_env_vars }} drush | grep -c registry_rebuild"
  register: registry_rebuild_installed
  ignore_errors: true

- name: Downloading registry_rebuild
  sudo: yes
  shell: |
    {{ php_env_vars }} drush -y dl registry_rebuild
    # drush cc drush has to happen outside of the docroot or it may fail if sites needs a registry_rebuild run first
    cd $HOME
    {{ php_env_vars }} drush cc drush
  when: rebuild_registry and registry_rebuild_installed.stdout == "0"

- name: Rebuilding drupal registry
  sudo: yes
  shell: "{{ php_env_vars }} drush -y rr -l {{ site_url }} || true"
  when: rebuild_registry

# Update database.
- name: Updating database
  sudo: yes
  shell: "{{ php_env_vars }} drush -y updb -l {{ site_url }}"
