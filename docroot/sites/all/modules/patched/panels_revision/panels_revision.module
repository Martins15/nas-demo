<?php

/**
 * @file
 * Module file for Panels Revision.
 */

/**
 * Implements hook_menu().
 */
function panels_revision_menu() {
  $items = array();

  $items['admin/structure/panels-revision-content/%panels_revision'] = array(
    'title' => 'Logs panels',
    'page callback' => 'display_panels_review',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/panels_revision.form.inc',
  );

  $items['admin/structure/panels-revision-content/%panels_revision/revert'] = array(
    'title' => 'Revert panel',
    'page callback' => 'panel_revert_revision',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/panels_revision.form.inc',
  );

  return $items;
}

/**
 * Implements hook_panels_display_save().
 */
function panels_revision_panels_display_save($display) {

  global $user;

  $fields = array(
    'user' => $user->uid,
    'did' => $display->did,
    'time' => time(),
    'configuration' => $display,
  );

  // Save in logs, change by variant.
  drupal_write_record('panels_revision', $fields);
}

/**
 * Implements hook_panels_pane_update().
 */
function panels_revision_panels_pane_update($pane) {
  // Select 2 last items from panels_revision. 2 because current configuration
  // was already inserted in DB at this moment. Use second last item from db
  // which was current before, to check if we have $pane->pid in his
  // configuration, so we can decide if pane was deleted and we need to add it
  // in current revert.
  $result = db_select('panels_revision', 'pr')
    ->fields('pr', array('configuration'))
    ->condition('did', $pane->did)
    ->orderBy('id', 'DESC')
    ->range(0, 2)
    ->execute()
    ->fetchAll();
  if (count($result) != 2) {
    return;
  }
  $configuration = unserialize($result[0]->configuration);
  $insert = TRUE;
  foreach ($configuration->panels as $panel) {
    if (in_array($pane->pid, $panel)) {
      $insert = FALSE;
      break;
    }
  }
  if ($insert) {
    drupal_write_record('panels_pane', $pane);
  }
}

/**
 * Implements hook_page_manager_operations_alter().
 */
function panels_revision_page_manager_operations_alter(&$result, &$page) {
  if (isset($page->handlers)) {
    foreach ($page->handlers as $key => $value) {
      ctools_include('panels_revision.form', 'panels_revision');
      if ($value->handler == 'panel_context') {
        $result['handlers']['children'][$key]['children']['panels_revision']['title'] = 'Panels Logs';
        $result['handlers']['children'][$key]['children']['panels_revision']['description'] = 'Manager logs panels';
        $result['handlers']['children'][$key]['children']['panels_revision']['form'] = 'panels_revision_form';
        $result['handlers']['children'][$key]['children']['panels_revision']['ajax'] = FALSE;

      }
    }
  }
}

/**
 * Load callback for panels display revisions.
 */
function panels_revision_load($id) {
  $db_select = db_select('panels_revision', 'logs')
    ->condition('id', $id)
    ->fields('logs')
    ->execute()
    ->fetchAssoc();

  if ($db_select) {
    $db_select['configuration'] = unserialize($db_select['configuration']);
    return $db_select;
  }
  else {
    return FALSE;
  }
}

