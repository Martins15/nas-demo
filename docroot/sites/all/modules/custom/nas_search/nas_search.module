<?php

/**
 * @file
 * Contains additional alters.
 */

/**
 * Implements hook_theme().
 */
function nas_search_theme() {
  $themes = array(
    'nas_search_page_search_form' => array(
      'render element' => 'form',
      'template' => 'nas_search_page_search_form',
      'path' => drupal_get_path('module', 'nas_search') . '/templates',
    ),
    'nas_search_facet_block' => array(
      'variables' => array(
        'subject' => NULL,
        'items' => array(),
      ),
      'template' => 'nas_search_facet_block',
      'path' => drupal_get_path('module', 'nas_search') . '/templates',
    ),
  );

  return $themes;
}

/**
 * Search form builder.
 */
function nas_search_page_search_form($form, $form_state) {
  $form['#method'] = 'GET';

  $form['search'] = array(
    '#type' => 'textfield',
    '#name' => 'search',
    '#theme' => 'searchfield',
    '#attributes' => array(
      'placeholder' => t('Search for a bird ...'),
      'class' => array('radius'),
    ),
    '#default_value' => !empty($_GET['search']) ? $_GET['search'] : '',
  );

  $form['submit'] = array(
    '#type' => 'button',
    '#value' => '<span class="hide-for-medium hide-for-large hide-for-xlarge">
      <i class="icon-magnifier"></i>
  </span>
  <span class="hide-for-tiny hide-for-small">' . t('Search') . '</span>',
    '#id' => 'edit-submit-search-form',
    '#attributes' => array(
      'class' => array('top-search-form-submit', 'button', 'pea-green'),
    ),
  );

  $form['#attached']['js'][] = drupal_get_path('module', 'nas_search') . '/js/search-counter.js';

  return $form;
}

/**
 * Implements hook_entity_info_alter().
 */
function page_manager_search_entity_info_alter(&$entity_info) {
  $entity_info['page_manager_search']['controller class'] = 'PageManagerSearchEntityControllerWithoutContent';
}

  /**
 * Implements hook_entity_property_info_alter().
 */
function nas_search_entity_property_info_alter(&$info) {
  $properties = &$info['node']['bundles']['article']['properties'];
  $properties['year'] = array(
    'label' => t("Article year"),
    'description' => t("Article year."),
    'type' => 'integer',
    'getter callback' => 'nas_search_get_article_year',
    'calculated' => TRUE,
  );
  $properties['month'] = array(
    'label' => t("Article month"),
    'description' => t("Article month."),
    'type' => 'integer',
    'getter callback' => 'nas_search_get_article_month',
    'calculated' => TRUE,
  );
  $properties['section'] = array(
    'label' => t('Article Section'),
    'type' => 'taxonomy_term',
    'description' => t('Article Menu section/custom section'),
    'getter callback' => 'nas_search_get_article_section',
    'calculated' => TRUE,
  );
  $info['node']['properties']['type_for_search'] = array(
    'label' => t('Type (for search)'),
    'type' => 'string',
    'description' => t('Content type for search'),
    'getter callback' => '_nas_search_node_get_type_for_search',
    'calculated' => TRUE,
  );
  $info['node']['properties']['node_date'] = array(
    'label' => t('Node date'),
    'type' => 'date',
    'description' => t('Node date'),
    'getter callback' => '_nas_search_node_get_node_date',
    'calculated' => TRUE,
  );
  $info['node']['properties']['event_months'] = array(
    'label' => t('Event months'),
    'type' => 'list<integer>',
    'description' => t('Event months'),
    'getter callback' => '_nas_search_node_get_event_months',
    'calculated' => TRUE,
  );
  $info['node']['properties']['event_state'] = array(
    'label' => t('Event state'),
    'type' => 'string',
    'description' => t('Event state'),
    'getter callback' => '_nas_search_node_get_event_state',
    'calculated' => TRUE,
  );
  $info['node']['properties']['bird_name_autocomplete'] = array(
    'label' => t('Bird name for autocomplete'),
    'type' => 'text',
    'description' => t('Bird name for autocomplete'),
    'getter callback' => '_nas_search_node_get_bird_name',
    'calculated' => TRUE,
  );
  // PM pages properties
  $info['page_manager_search']['properties']['has_image'] = array(
    'label' => t('Has Hero image'),
    'type' => 'boolean',
    'description' => t('Indicates if page has hero image'),
    'getter callback' => '_nas_search_pm_has_hero_image',
    'calculated' => TRUE,
  );
  $info['page_manager_search']['properties']['image'] = array(
    'label' => t('Hero image'),
    'type' => 'file',
    'description' => t('Hero image'),
    'getter callback' => '_nas_search_pm_hero_image',
    'calculated' => TRUE,
  );
  $info['page_manager_search']['properties']['hero_image_title'] = array(
    'label' => t('Hero image title'),
    'type' => 'text',
    'description' => t('Hero image title'),
    'getter callback' => '_nas_search_pm_hero_image_title',
    'calculated' => TRUE,
  );
  $info['page_manager_search']['properties']['admin_description'] = array(
    'label' => t('Description'),
    'type' => 'text',
    'description' => t('Admin description'),
    'getter callback' => '_nas_search_pm_admin_description',
    'calculated' => TRUE,
  );
  $info['page_manager_search']['properties']['path'] = array(
    'label' => t('Path'),
    'type' => 'uri',
    'description' => t('Page path'),
    'getter callback' => '_nas_search_pm_path',
    'calculated' => TRUE,
  );
  $info['page_manager_search']['properties']['status'] = array(
    'label' => t('Status'),
    'type' => 'boolean',
    'description' => t('Page status'),
    'getter callback' => '_nas_search_pm_status',
    'calculated' => TRUE,
  );
  $info['page_manager_search']['properties']['language'] = array(
    'label' => t('Language'),
    'type' => 'string',
    'description' => t('Page language'),
    'getter callback' => '_nas_search_pm_language',
    'calculated' => TRUE,
  );
}

/**
 * Node's Type (for search) property getter callback.
 */
function _nas_search_node_get_type_for_search($entity, array $options, $name, $entity_type) {
  if ($entity->type == 'article') {
    if (!empty($entity->field_magazine_issue[LANGUAGE_NONE][0]['target_id'])) {
      return 'Magazine Article';
    }
    return 'News';
  }

  $map = array(
    'project' => 'Projects',
    'strategy' => 'Strategies',
    'static_page' => 'Pages',
    'boa' => 'Birds of America',
    'flyway' => 'Flyways',
  );
  if (isset($map[$entity->type])) {
    return $map[$entity->type];
  }

  // Fallback for CT not listed in mapping.
  $node_type = node_type_get_type($entity);
  return $node_type->name;
}

/**
 * Bird name property getter callback.
 */
function _nas_search_node_get_bird_name($entity, array $options, $name, $entity_type) {
  return $entity->type == 'bird' ? $entity->title : '';
}

/**
 * Article year entity property getter callback.
 */
function nas_search_get_article_year($entity, array $options, $name, $entity_type) {
  if (empty($entity->field_article_date[LANGUAGE_NONE][0]['value'])) {
    return;
  }
  return (int) substr($entity->field_article_date[LANGUAGE_NONE][0]['value'], 0, 4);
}

/**
 * Article month entity property getter callback.
 */
function nas_search_get_article_month($entity, array $options, $name, $entity_type) {
  if (empty($entity->field_article_date[LANGUAGE_NONE][0]['value'])) {
    return;
  }
  return (int) substr($entity->field_article_date[LANGUAGE_NONE][0]['value'], 5, 2);
}

/**
 * Article section entity property getter callback.
 */
function nas_search_get_article_section($entity, array $options, $name, $entity_type) {
  $custom_section_item = field_get_items('node', $entity, 'field_custom_section');
  if (!empty($custom_section_item)) {
    $term = taxonomy_term_load($custom_section_item[0]['tid']);
    return $term;
  }

  $menu_section_item = field_get_items('node', $entity, 'field_menu_section');
  if (!empty($menu_section_item)) {
    // Default is the first term.
    $term = taxonomy_term_load($menu_section_item[0]['tid']);

    $term_tids = array();
    foreach ($menu_section_item as $item) {
      $term_tids[] = $item['tid'];
    }
    $terms = taxonomy_term_load_multiple($term_tids);
    $term_name_keyed = array();
    foreach ($terms as $term) {
      $term_name_keyed[$term->name] = $term;
    }
    $term_names = array_keys($term_name_keyed);

    $trail = menu_get_active_trail();
    $trail = array_reverse($trail);
    foreach ($trail as $menu_item) {
      if (in_array($menu_item['title'], $term_names)) {
        $term = $term_name_keyed[$menu_item['title']];
        break;
      }
    }
    return $term;
  }
  return NULL;
}

/**
 * Implements hook_block_view_alter().
 */
function nas_search_block_view_alter(&$data, $block) {
  if ($block->module == 'facetapi' && $data) {
    $facetid = $data['content']['#settings']->facet;
    switch ($facetid) {
      case 'year':
        $data['subject'] = t('Filter by Date');
        break;

      case 'month':
        $data['subject'] = '';
        break;

      case 'section':
        $data['subject'] = t('Filter by Section');
        break;

      case 'type_for_search':
        $data['subject'] = t('Filter by Type');
        break;
    }
    foreach ($data['content'][$facetid]['#items'] as &$item) {
      $item['class'][] = 'primary-sub-nav-item';
    }
    $data['content'][$facetid]['#theme'] = 'nas_search_facet_block';
    $data['content'][$facetid]['#subject'] = $data['subject'];
  }
}

/**
 * Implements hook_facet_items_alter().
 */
function nas_search_facet_items_alter(&$build, &$settings) {
  if ($settings->facet == 'month') {
    foreach ($build as $key => $item) {
      $build[$key]['#markup'] = t(date('F', mktime(NULL, NULL, NULL, $item['#indexed_value'])), array(), array('context' => 'Long month name'));
    }
  }
  if ($settings->facet == 'type_for_search') {
    foreach ($build as &$item) {
      $item['#markup'] = t($item['#markup'], [], ['context' => 'Facet item']);
    }
  }
}

/**
 * Property callback. Returns node date.
 */
function _nas_search_node_get_node_date($entity, $options, $name, $entity_type) {
  if (!empty($entity->field_article_date[LANGUAGE_NONE][0]['value'])) {
    return strtotime($entity->field_article_date[LANGUAGE_NONE][0]['value']);
  }
  if (!empty($entity->field_event_date[LANGUAGE_NONE][0]['value'])) {
    return strtotime($entity->field_event_date[LANGUAGE_NONE][0]['value']);
  }

  return $entity->created;
}

/**
 * Property callback. Returns event's end date or NULL.
 */
function _nas_search_node_get_event_months($entity, $options, $name, $entity_type) {
  if (!empty($entity->field_event_date[LANGUAGE_NONE][0]['value'])) {
    $months = array();
    if (!empty($entity->field_event_date[LANGUAGE_NONE][0]['value'])) {
      $first_month = (int) date('Ym', strtotime($entity->field_event_date[LANGUAGE_NONE][0]['value']));
      $last_month = (int) date('Ym', strtotime($entity->field_event_date[LANGUAGE_NONE][0]['value2']));
      for ($month = $first_month; $month <= $last_month; $month++) {
        $months[] = $month;
      }
    }
    else {
      $months[] = (int) date('Ym', strtotime($entity->field_event_date[LANGUAGE_NONE][0]['value']));
    }
    return $months;
  }
}

/**
 * Property callback. Returns event's end date or NULL.
 */
function _nas_search_node_get_event_state($entity, $options, $name, $entity_type) {
  if (!empty($entity->field_event_location[LANGUAGE_NONE][0]['province'])) {
    return $entity->field_event_location[LANGUAGE_NONE][0]['province'];
  }
}

/**
 * Helper function returning list of species formatted for usage with Typeahead.
 *
 * Results are cached via drupal cache mechanism for one hour.
 *
 * @return array
 *  An array of objects containing:
 *  - title: Individual species title.
 *  - nid: Species nid.
 *  - alias: Alias to species page.
 *  - bfs: Tid of species' bird family.
 *  - rgs: An array of species bird region field's values.
 */
function _nas_search_get_tt_species() {
  if ($cache = cache_get('nas_search_tt_species')) {
    $species = $cache->data;
  }
  else {
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_bird_family', 'bf', 'bf.entity_id = n.nid AND bf.entity_type = :entity_type AND bf.deleted = :deleted', array(
      ':entity_type' => 'node',
      ':deleted' => '0',
    ));
    $query->leftJoin('field_data_field_bird_region', 'br', 'br.entity_id = n.nid AND br.entity_type = :entity_type AND br.deleted = :deleted', array(
      ':entity_type' => 'node',
      ':deleted' => '0',
    ));
    $query->leftJoin('url_alias', 'ua', 'ua.source = CONCAT(:prefix, n.nid)', array(':prefix' => 'node/'));
    $query->fields('n', array('title', 'nid'));
    $query->addField('ua', 'alias');
    $query->addField('bf', 'field_bird_family_tid', 'bfs');
    $query->addExpression('GROUP_CONCAT(DISTINCT field_bird_region_tid)', 'rgs');
    $query->condition('n.type', 'bird');
    $query->condition('n.status', NODE_PUBLISHED);
    $query->groupBy('n.nid');
    $query->orderBy('n.title');
    $species = $query->execute()->fetchAll();

    foreach ($species as &$item) {
      $item->bfs = (int) $item->bfs;
      $item->rgs = explode(',', $item->rgs);
      if (!$item->alias) {
        $item->alias = 'node/' . $item->nid;
      }
      unset($item->nid);
    }

    cache_set('nas_search_tt_species', $species, 'cache', time() + 3600);
  }

  return $species;
}

/**
 * Helper function returning list of families formatted for usage with Typeahead.
 *
 * Results are cached via drupal cache mechanism for one hour.
 *
 * @return array
 *  An array of objects containing:
 *  - name: Bird family name.
 *  - tid: Bird family's tid.
 *  - rgs: An array of regions tid where species of the family appears.
 */
function _nas_search_get_tt_families() {
  if ($cache = cache_get('nas_search_tt_families')) {
    $families = $cache->data;
  }
  else {
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_bird_family', 'bf', 'bf.entity_id = n.nid AND bf.entity_type = :entity_type AND bf.deleted = :deleted', array(
      ':entity_type' => 'node',
      ':deleted' => '0',
    ));
    $query->leftJoin('taxonomy_term_data', 'bftd', 'bftd.tid = bf.field_bird_family_tid');
    $query->leftJoin('field_data_field_bird_region', 'br', 'br.entity_id = n.nid AND br.entity_type = :entity_type AND br.deleted = :deleted', array(
      ':entity_type' => 'node',
      ':deleted' => '0',
    ));
    $query->fields('bftd', array('tid', 'name'));
    $query->addExpression('GROUP_CONCAT(DISTINCT field_bird_region_tid)', 'rgs');
    $query->condition('n.type', 'bird');
    $query->condition('n.status', NODE_PUBLISHED);
    $query->groupBy('bftd.tid');
    $families = $query->execute()->fetchAll();

    foreach ($families as &$family) {
      $family->rgs = explode(',', $family->rgs);
    }
    cache_set('nas_search_tt_families', $families, 'cache', time() + 3600);
  }

  return $families;
}


/**
 * Helper function returning list of BOAs formatted for usage with Typeahead.
 *
 * Results are cached via drupal cache mechanism for one hour.
 *
 * @return array
 *  An array of objects containing:
 *  - title: Individual BAO species title.
 *  - new_title: Individual corresponding species title.
 *  - alias: Alias to species page.
 *  - combined_title: title + new_title (if exists).
 */
function _nas_search_get_tt_boas() {
  if ($cache = cache_get('nas_search_tt_boas')) {
    $species = $cache->data;
  }
  else {
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_boa_bird', 'bb', 'bb.entity_id = n.nid AND bb.entity_type = :entity_type AND bb.deleted = :deleted', array(
      ':entity_type' => 'node',
      ':deleted' => '0',
    ));
    $query->leftJoin('node', 'nbb', 'nbb.nid = bb.field_boa_bird_target_id');
    $query->leftJoin('url_alias', 'ua', 'ua.source = CONCAT(:prefix, n.nid)', array(':prefix' => 'node/'));
    $query->fields('n', array('title', 'nid'));
    $query->addField('ua', 'alias');
    $query->addField('nbb', 'title', 'new_title');
    $query->condition('n.type', 'boa');
    $query->condition('n.status', NODE_PUBLISHED);
    $query->orderBy('n.title');
    $species = $query->execute()->fetchAll();

    foreach ($species as &$item) {
      if (!$item->alias) {
        $item->alias = 'node/' . $item->nid;
      }
      $item->combined_title = $item->title;
      if ($item->new_title) {
        $item->combined_title .= ' ' . $item->new_title;
      }
      unset($item->nid);
    }

    cache_set('nas_search_tt_boas', $species, 'cache', time() + 3600);
  }

  return $species;
}

/**
 * Page Manager page hero image entity property getter callback.
 */
function _nas_search_pm_has_hero_image($entity, array $options, $name, $entity_type) {
  if (!_nas_search_pm_is_static_page($entity)) {
    return FALSE;
  }

  if ($hero_image_config = _nas_search_pm_get_hero_image_pane_configuration($entity)) {
    if ($hero_image_config['image']) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Page Manager page hero image entity property getter callback.
 */
function _nas_search_pm_hero_image($entity, array $options, $name, $entity_type) {
  if (!_nas_search_pm_is_static_page($entity)) {
    return FALSE;
  }

  if ($hero_image_config = _nas_search_pm_get_hero_image_pane_configuration($entity)) {
    if ($hero_image_config['image']) {
      return file_load($hero_image_config['image']);
    }
  }
  return FALSE;
}

/**
 * Page Manager page hero title entity property getter callback.
 */
function _nas_search_pm_hero_image_title($entity, array $options, $name, $entity_type) {
  if (!_nas_search_pm_is_static_page($entity)) {
    return FALSE;
  }

  if ($hero_image_config = _nas_search_pm_get_hero_image_pane_configuration($entity)) {
    return $hero_image_config['title'];
  }
  return FALSE;
}

/**
 * Page Manager page admin description entity property getter callback.
 */
function _nas_search_pm_admin_description($entity, array $options, $name, $entity_type) {
  if (!$subtask = _nas_search_page_manager_search_get_pages_by_dec($entity->pid)) {
    return FALSE;
  }
  return $subtask->admin_description;
}

/**
 * Helper function; Calculates if page path has no placeholders.
 *
 * @param object $entity
 *   Somehow loaded page_manager_search entity.
 *
 * @return bool
 *   Returns TRUE if page path has no '%' or '!'.
 */
function _nas_search_pm_is_static_page($entity) {
  return strpos($entity->path, '%') === FALSE && strpos($entity->path, '!') === FALSE;
}

/**
 * Page Manager page path entity property getter callback.
 */
function _nas_search_pm_path($entity, array $options, $name, $entity_type) {
  if (!$subtask = _nas_search_page_manager_search_get_pages_by_dec($entity->pid)) {
    return FALSE;
  }
  return $subtask->path;
}

/**
 * Page Manager page status entity property getter callback.
 */
function _nas_search_pm_status($entity, array $options, $name, $entity_type) {
  if (!$subtask = _nas_search_page_manager_search_get_pages_by_dec($entity->pid)) {
    return FALSE;
  }
  return empty($subtask->disabled);
}

/**
 * Page Manager page language entity property getter callback.
 */
function _nas_search_pm_language($entity, array $options, $name, $entity_type) {
  if (!$subtask = _nas_search_page_manager_search_get_pages_by_dec($entity->pid)) {
    return FALSE;
  }
  return $subtask->language;
}

/**
 * Helper function; Extracts hero image pane config for page if exists.
 *
 * @param object $entity
 *   Somehow loaded page_manager_search entity.
 *
 * @return mixed
 *   Hero image pane configuration array or FALSE.
 */
function _nas_search_pm_get_hero_image_pane_configuration($entity) {
  $config = FALSE;
  $subtask = _nas_search_page_manager_search_get_pages_by_dec($entity->pid);
  $task = page_manager_get_task('page');
  $handlers = page_manager_load_task_handlers($task, $subtask->name);
  $handler = reset($handlers);
  if (empty($handler->conf['display']) && !empty($handler->conf['did'])) {
    $handler->conf['display'] = panels_load_display($handler->conf['did']);
  }
  if (!empty($handler->conf['display']->content)) {
    foreach ($handler->conf['display']->content as $pane) {
      if ($pane->type == 'hero_image_section') {
        $config = $pane->configuration;
      }
    }
  }
  return $config;
}

/**
 * Implements hook_search_api_solr_query_alter();
 */
function nas_search_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  $search_ids_mapping = array(
    'search_api_views:search_results:other_results' => 'ss_search_api_language',
    'search_api_views:search_results:birds' => 'ss_search_api_language',
    'search_api_views:search_results_pm:site_sections' => 'ss_language',
  );
  $search_id = $query->getOption('search id');
  if (isset($search_ids_mapping[$search_id])) {
    global $language;
    $languages = array($language->language);
    $default_language = language_default();
    if ($language->language == $default_language->language) {
      $languages[] = LANGUAGE_NONE;
    }
    $call_args['params']['fq'][] = _nas_search_format_solr_filter($search_ids_mapping[$search_id], $languages);
  }
  // Alter solr query to search on language specific fields.
  _nas_search_multilingual_search_api_solr_query_alter($call_args, $query);
}

/**
 * Helper function; formats Apache SOLR filter string.
 *
 * @param string $fieldname
 *  Name of field to filter on.
 * @param array $values
 *  Array of values.
 *
 * @return string
 *  Formatted Apache SOLR filter string.
 */
function _nas_search_format_solr_filter($fieldname, array $values) {
  if (empty($values)) {
    return '';
  }
  elseif (count($values) == 1) {
    return $fieldname . ':"' . reset($values) . '"';
  }
  else {
    $parts = array();
    foreach ($values as $value) {
      $parts[] = '(' . _nas_search_format_solr_filter($fieldname, array($value)) . ')';
    }
    return '(' . implode(' OR ', $parts) . ')';
  }
}

/**
 * Implements hook_ctools_plugin_post_alter().
 */
function nas_search_ctools_plugin_post_alter(&$plugin, &$info) {
  if ($info['type'] == 'tasks' && $info['module'] == 'page_manager') {
    $plugin['save'] = 'nas_search_page_manager_page_save';
    $plugin['delete'] = 'nas_search_page_manager_page_delete';
  }
}

/**
 * Custom save callback for page manager pages CTools plugin.
 */
function nas_search_page_manager_page_save($page, $update) {
  if (empty($page->pid)) {
    _nas_search_page_manager_page_inserted($page);
  }
  else {
    _nas_search_page_manager_page_updated($page);
  }
}

/**
 * Custom delete callback for page manager pages CTools plugin.
 */
function nas_search_page_manager_page_delete($page) {
  $clone = clone $page;
  $clone->pid = page_manager_search_machine_name_to_dec($page->name, 9);
  module_invoke_all('entity_delete', $clone, 'page_manager_search');
}

/**
 * Implements hook_form_alter().
 */
function nas_search_form_alter(&$form, &$form_state, $form_id) {
  $forms = array('page_manager_disable_form', 'page_manager_enable_form');
  if (in_array($form_id, $forms)) {
    $form['#submit'][] = 'nas_search_page_manager_form_submit';
  }
}

/**
 * Custom submit callback.
 */
function nas_search_page_manager_form_submit(&$form, &$form_state) {
  _nas_search_page_manager_page_updated($form_state['page']->subtask['subtask']);
}

/**
 * Helper function invokes hook_entity_update.
 */
function _nas_search_page_manager_page_updated($page) {
  $clone = clone $page;
  $clone->pid = page_manager_search_machine_name_to_dec($page->name, 9);
  module_invoke_all('entity_update', $clone, 'page_manager_search');
}

/**
 * Helper function invokes hook_entity_insert.
 */
function _nas_search_page_manager_page_inserted($page) {
  // All "in code" pages should already be in the Search API index.
  if (isset($page->in_code_only) && $page->in_code_only) {
    _nas_search_page_manager_page_updated($page);
    return;
  }

  $clone = clone $page;
  $clone->pid = page_manager_search_machine_name_to_dec($page->name, 9);
  module_invoke_all('entity_insert', $clone, 'page_manager_search');
}

/**
 * Helper functon; Get Page manager page(s) by decimal conversion of MD5 hash.
 */
function _nas_search_page_manager_search_get_pages_by_dec($dec = NULL, $length = 9) {
  $items = &drupal_static('__FUNCTION__');

  // Build list of SIDs.
  if (empty($items)) {
    ctools_include('export');
    $pages = ctools_export_crud_load_all('page_manager_pages', TRUE);
    foreach ($pages as $subtask_id => $subtask) {
      $sid = page_manager_search_machine_name_to_dec($subtask_id, $length);
      $items[$sid] = $subtask;
    }
  }

  return !is_null($dec) && isset($items[$dec]) ? $items[$dec] : $items;
}

/**
 * Implements hook_search_api_solr_documents_alter().
 *
 * Stores the values of all text fields in relevant language-based solr dynamic
 * fields instead of the default ones.
 *
 * For example, when indexing "body:value" field, solr would normally store its
 * value in "tm_body:value" field. With this hook (assuming that document is not
 * in default language and that currently being processed content language is
 * "fr") it will be stored in "tm_fr_body:value" instead, with nothing saved to
 * default "tm_body:value" field.
 */
function nas_search_search_api_solr_documents_alter(&$documents, $index, $items) {
  // Site-specific exception for the index.
  $index_language_mapping = array(
    'page_manager_pages' => 'ss_language',
  );
  // Get the current index language field.
  $index_language_field = 'ss_search_api_language';
  if (!empty($index_language_mapping[$index->machine_name])) {
    $index_language_field = $index_language_mapping[$index->machine_name];
  }
  foreach ($documents as $document) {
    // Get the current document language.
    $document_language_field = $document->getField($index_language_field);
    $document_language = $document_language_field['value'];

    foreach ($document->getFieldNames() as $solr_field_name) {
      if (strpos($solr_field_name, '_') !== FALSE) {
        // For translatable fields, store the value in relevant multilingual
        // solr field instead of the default one.
        if (_nas_search_solr_field_is_translatable($solr_field_name, $document_language)) {
          list($solr_prefix, $field_name) = explode('_', $solr_field_name, 2);
          $multilingual_solr_field_name = implode('_', array($solr_prefix, $document_language, $field_name));
          $old_solr_field = $document->getField($solr_field_name);
          $document->setField($multilingual_solr_field_name, $old_solr_field['value'], $old_solr_field['boost']);
          $document->setField($solr_field_name, '', $old_solr_field['boost']);
        }
      }
    }
  }
}

/**
 * Helper function; part of hook_search_api_solr_query_alter() implementation.
 *
 * When a search is executed, this hook implementation makes sure that all
 * required multilingual fields are added to the query to be searched (in the
 * "qf" parameter).
 */
function _nas_search_multilingual_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  global $language;
  $langcode = $language->language;

  $qf_multilang = array();
  foreach ($call_args['params']['qf'] as $query_field) {
    // First extract the basic field name.
    $boost = '';
    if (strpos($query_field, '^') !== FALSE) {
      list($query_field, $boost) = explode('^', $query_field);
    }
    // Make sure the field is translatable, otherwise we don't want to add
    // anything.
    if (_nas_search_solr_field_is_translatable($query_field, $langcode)) {
      list($field_type_prefix, $field_name) = explode('_', $query_field, 2);
      // Build multilingual field name variation to be added to the query.
      $new_field_name = implode('_', array(
        $field_type_prefix,
        $langcode,
        $field_name,
      ));
      if (!empty($boost)) {
        $new_field_name .= '^' . $boost;
      }
      // Temporarily store those new names in the separate array so we don't
      // get caught in the never-ending loop.
      $qf_multilang[] = $new_field_name;
    }
  }
  // Finally add all new multilingual variants to the main query parameters.
  $call_args['params']['qf'] = array_merge($call_args['params']['qf'], $qf_multilang);
}

/**
 * Helper function; decides if solr field is translatable or not.
 *
 * @param string $solr_field_name
 *  Solr document field name (with type prefix).
 * @param string $document_langcode
 *  Solr document langcode.
 *
 * @return bool
 *   TRUE if field is translatable, FALSE otherwise.
 */
function _nas_search_solr_field_is_translatable($solr_field_name, $document_langcode = LANGUAGE_NONE) {
  $default_language = language_default();
  // Fields of documents in default language or fields of language neutral
  // documents are not translatable.
  if ($document_langcode == $default_language->language || $document_langcode == LANGUAGE_NONE) {
    return FALSE;
  }
  list($solr_prefix, $field_name) = explode('_', $solr_field_name, 2);
  // Only text fields may be translatable.
  return in_array($solr_prefix, array('ts', 'tm'));
}
