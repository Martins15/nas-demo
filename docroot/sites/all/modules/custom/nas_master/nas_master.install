<?php

/**
 * @file
 * For hook_update_X functions.
 */

function nas_master_install() {
  $files = array('footer-logo.png', 'canon-logo.png');
  foreach ($files as $file) {
    $source = DRUPAL_ROOT . '/sites/all/themes/custom/nas/img/' . $file;
    $destination = 'public://' . $file;
    file_unmanaged_copy($source, $destination, FILE_EXISTS_REPLACE);
  }
  $boa_hero_fid = nas_import_get_default_image('boa-hero.jpg');
  variable_set('boa_index_hero', $boa_hero_fid);

  $boa_bio_fid = nas_import_get_default_image('boa-john-audubon.jpg');
  variable_set('boa_index_bio', $boa_bio_fid);
  features_revert_module('nas_boa_index_feature');

  // Create BOA structure.
  nas_master_update_7028();
}

/**
 * Enable nas_slideshow_feature feature.
 */
function nas_master_update_7002() {
  module_enable(array('nas_slideshow_feature'));
}

/**
 * Revert nas_flyways_feature & nas_frontpage_feature features.
 */
function nas_master_update_7005() {
  features_revert_module('nas_flyways_feature');
  features_revert_module('nas_frontpage_feature');
}

/**
 * Changes db for activate nas_past_magazine_issues feature.
 */
function nas_master_update_7008() {
  // Revert nas_magazine_issue_feature.
  features_revert(array('nas_magazine_issue_feature' => array('field_instance')));

  // Enable nas_past_magazine_issues module.
  if (!module_exists('nas_past_magazine_issues')) {
    $modules = array('nas_past_magazine_issues');
    module_enable($modules);
  }
}

/**
 * Revert Article CT feature.
 * Revert NAS Flyways Landing feature.
 */
function nas_master_update_7009() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_flyways_landing_feature');
}

/**
 * Enable Conservation Strategy and Conservation Project features.
 */
function nas_master_update_7013() {
  module_enable(array('nas_conservation_strategy_feature', 'nas_conservation_project_feature'));
}

/**
 * Revert NAS Site Template feature.
 */
function nas_master_update_7014() {
  features_revert_module('nas_site_template_feature');
}

/**
 * Activate BOA CT feature with dependensie.
 */
function nas_master_update_7015() {

  module_enable(array('book'));

  // Delete default book content type.
  node_type_delete('book');
  variable_del('node_preview_book');

  if (!module_exists('nas_boa_feature')) {
    module_enable(array('nas_boa_feature'));
    features_revert_module('nas_boa_feature');
  }
}

/**
 * Revert NAS Views feature.
 * Insert Flyway Conservation Projects pane in panelized overriden flyway nodes.
 */
function nas_master_update_7016() {
  features_revert_module('nas_views_feature');

  $nids = db_query("SELECT nid FROM {node} WHERE type = :type", array(':type' => 'flyway'))->fetchAllKeyed(0, 0);
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    $did = $node->panelizer['page_manager']->did;
    // In hook_update_N we use db_insert() instead of drupal_write_record().
    db_insert('panels_pane')
      ->fields(array(
        'did' => $did,
        'panel' => 'bottom',
        'type' => 'nas_panes_flyway_cons_projects',
        'subtype' => 'nas_panes_flyway_cons_projects',
        'shown' => 1,
        'access' => serialize(array()),
        'configuration' => serialize(array()),
        'cache' => serialize(array()),
        'style' => serialize(array('settings' => NULL)),
        'css' => serialize(array()),
        'extras' => serialize(array()),
        'position' => 2,
        'locks' => serialize(array()),
      ))
      ->execute();
  }
}

/**
 * Revert BOA CT feature.
 */
function nas_master_update_7017() {
  features_revert_module('nas_boa_feature');
}

/**
 * Revert NAS Image Styles feature.
 * Revert Conservation Project feature.
 */
function nas_master_update_7018() {
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_conservation_project_feature');
}

/**
 * Revert features for Slideshow migration.
 */
function nas_master_update_7019() {
  $features = array(
    'nas_bird_type_feature',
    'nas_image_styles_feature',
    'nas_slideshow_feature',
    'nas_import_feeds_feature',
  );
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Slideshow migration.
 */
function nas_master_update_7020(&$sandbox) {
  $chunk = 10;
  if (!isset($sandbox['progress'])) {
    // Add nids to sandbox.
    $result = drupal_http_request(EXPORT_NODE_LIST_NIDS_URL . 'media_gallery');
    $sandbox['gallery_nids'] = drupal_json_decode($result->data);

    // Limit nodes for dev environment.
    if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
      $sandbox['gallery_nids'] = array_slice($sandbox['gallery_nids'], 0, 20);
    }

    $sandbox['max'] = count($sandbox['gallery_nids']);
    $sandbox['progress'] = 0;
  }

  if (!empty($sandbox['max'])) {
    // Get part of ids.
    $nids = array_slice($sandbox['gallery_nids'], $sandbox['progress'], $chunk);
    pp_import_nodes_batch($nids, 'media_gallery_import');
    $sandbox['progress'] += count($nids);
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count media galleries has been successfully imported.', array('@count' => $sandbox['progress']));

    return t('The migration was successful.');
  }
}

/**
 * Revert features for Slideshow.
 */
function nas_master_update_7021() {
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_slideshow_feature');
}

/**
 * Revert Conservation Project feature.
 */
function nas_master_update_7023() {
  features_revert_module('nas_conservation_project_feature');
}

/**
 * Revert nas_image_styles_feature feature.
 */
function nas_master_update_7024() {
  features_revert_module('nas_image_styles_feature');
}

/**
 * Revert features for "Related Features" block.
 */
function nas_master_update_7025() {
  features_revert_module('nas_view_modes_feature');
  features_revert_module('nas_article_feature');
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_slideshow_feature');
}

/**
 * Enable Static page feature.
 */
function nas_master_update_7026() {
  module_enable(array('nas_static_page_feature'));
}

/**
 * Revert features for Magazine Issue page blocks.
 */
function nas_master_update_7027() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_views_feature');
  features_revert_module('nas_magazine_issue_feature');
}

/**
 * Create BOA nodes.
 */
function nas_master_update_7028() {
  module_disable(array('book'));
  variable_del('book_allowed_types');
  variable_del('book_child_type');

  $menu = array(
    'menu_name' => 'boa',
    'title' => t('Birds of America'),
    'description' => t('Menu holds structure of Birds of America book'),
  );
  menu_save($menu);

  $structure_file = file_get_contents(drupal_get_path('module', 'nas_master') . '/resources/boa_structure.txt');
  $weight = 0;
  $family_mlid = NULL;
  $genus_mlid= NULL;
  foreach (explode("\n", $structure_file) as $structure_file_row) {
    $weight++;
    list($title, $link) = explode(':', $structure_file_row);
    $type = _nas_master_update_7027_get_type($link);

    $node = (object) array(
      'type' => $type,
      'title' => $title,
      'created' => REQUEST_TIME,
      'uid' => 2,
      'author' => 'editor',
      'language' => LANGUAGE_NONE,
    );
    node_object_prepare($node);
    node_save($node);

    switch ($type) {
      case 'boaf':
        // Create top level menu item.
        $menu_link = array(
          'link_title' => $node->title,
          'link_path' => 'node/' . $node->nid,
          'module' => 'nas_master',
          'menu_name' => 'boa',
          'weight' => $weight,
        );
        $family_mlid = menu_link_save($menu_link);
        break;

      case 'boag':
        // Create menu item under family.
        $menu_link = array(
          'link_title' => $node->title,
          'link_path' => 'node/' . $node->nid,
          'module' => 'nas_master',
          'menu_name' => 'boa',
          'weight' => $weight,
          'plid' => $family_mlid,
        );
        $genus_mlid = menu_link_save($menu_link);
        break;

      case 'boa':
        // Create menu item under genus.
        $menu_link = array(
          'link_title' => $node->title,
          'link_path' => 'node/' . $node->nid,
          'module' => 'nas_master',
          'menu_name' => 'boa',
          'weight' => $weight,
          'plid' => $genus_mlid,
        );
        menu_link_save($menu_link);
        break;
    }

    unset($node);
  }

}

function _nas_master_update_7027_get_type($link) {
  if (preg_match('/F[0-9]*$/', $link)) {
    return 'boaf';
  }
  if (preg_match('/F[0-9]*_G[0-9]*$/', $link)) {
    return 'boag';
  }
  return 'boa';
}

/**
 * Delete instance of field_related_bird from Conservation Project CT.
 * Revert features for Conservation projects "Birds native to this area" pane.
 */
function nas_master_update_7029() {
  if ($instance = field_info_instance('node', 'field_related_bird', 'project')) {
    field_delete_instance($instance);
  }
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_views_feature');
}

/**
 * Revert nas_image_styles_feature feature.
 */
function nas_master_update_7030() {
  features_revert_module('nas_image_styles_feature');
}

/**
 * Revert nas_bird_type_feature feature to update image file entity view mode
 * settings.
 */
function nas_master_update_7031() {
  features_revert_module('nas_bird_type_feature');
}

/**
 * Revert features for Conservation project Related news block.
 */
function nas_master_update_7032() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_views');
}

/**
 * Revert features for Conservation project's 'Explore More Conservation
 * Projects' block.
 */
function nas_master_update_7033() {
  features_revert_module('nas_views');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_editor_role');
}

/**
 * Add new wysiwyg inline element Bottom line.
 */
function nas_master_update_7034() {
  field_delete_field('field_project_bottomline');
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_conservation_project_feature');
}

/**
 * Upload image for Conservation landing page. Enable nas_conservation_landing_feature feature.
 */
function nas_master_update_7036() {
  pp_create_conservation_hero_image();
  module_enable(array('nas_conservation_landing_feature'));
}

/**
 * Revert nas_static_page_feature feature.
 */
function nas_master_update_7037() {
  features_revert_module('nas_static_page_feature');
}

/**
 * Revert nas_conservation_project_feature feature.
 * Revert nas_bird_type_feature feature.
 */
function nas_master_update_7038() {
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_bird_type_feature');
}

/**
 * Revert nas_conservation_landing_feature feature.
 */
function nas_master_update_7039() {
  features_revert_module('nas_conservation_landing_feature');
}

/**
 * Revert nas_boa_family_feature feature.
 */
function nas_master_update_7040() {
  features_revert_module('nas_boa_family_feature');
}

/**
 * Revert nas_image_styles_feature feature.
 *
 * Revert nas_conservation_strategy_feature feature.
 */
function nas_master_update_7041() {
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_conservation_strategy_feature');
}

/**
 * Add State field on BOA.
 */
function nas_master_update_7042() {
  features_revert_module('nas_boa_feature');
}

/**
 * Revert nas_image_styles_feature feature.
 */
function nas_master_update_7043() {
  features_revert_module('nas_image_styles_feature');

}

/**
 * Revert nas_conservation_landing_feature feature.
 */
function nas_master_update_7044() {
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_conservation_landing_feature');
}

/**
 * Revert editor permissions.
 * Revert nas_boa_family_feature feature.
 * Enable memcache.
 */
function nas_master_update_7045() {
  features_revert_module('nas_editor_role');
  module_enable(array('memcache'));
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_boa_feature');
  $boa_hero_fid = nas_import_get_default_image('boa-hero.jpg');
  variable_set('boa_index_hero', $boa_hero_fid);
  $boa_bio_fid = nas_import_get_default_image('boa-john-audubon.jpg');
  variable_set('boa_index_bio', $boa_bio_fid);
  module_enable(array('nas_boa_index_feature'));
  features_revert_module('nas_site_template_feature');
}

/**
 * Conservation strategy page.
 */
function nas_master_update_7046() {
  features_revert_module('nas_beans_feature');
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_conservation_strategy_feature');
  module_enable(array('node_edit_protection'));
  features_revert(array('nas_conservation_project_feature' => array('field_instance')));
}

/**
 * Fullscreen Article changes.
 * [ANW-324] Flyway related birds: bird feature and views feature reverted.
 * [ANW-327] Contact Node CT: allowed text formats limited for Bio field.
 */
function nas_master_update_7047() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_views_feature');
  features_revert(array('nas_contact_type_feature' => array('field_instance')));
}

/**
 * Revert BOA Index page feature.
 */
function nas_master_update_7048() {
  features_revert_module('nas_boa_index_feature');
}

/**
 * Revert Views feature.
 */
function nas_master_update_7049() {
  features_revert_module('nas_views_feature');
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_static_page_feature');
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_boa_feature');
  features_revert(array('nas_article_feature' => array('field_instance', 'strongarm')));
  features_revert(array('nas_bird_type_feature' => array('field_instance')));
  features_revert(array('nas_conservation_project_feature' => array('field_instance', 'strongarm')));
  features_revert(array('nas_conservation_strategy_feature' => array('field_instance')));
  features_revert(array('nas_contact_type_feature' => array('field_instance')));
  features_revert(array('nas_flyway_feature' => array('field_instance')));
  features_revert(array('nas_welcome_to_audubon' => array('field_instance')));
  features_revert(array('nas_fpp_feature' => array('field_base', 'field_instance')));
  features_revert_module('nas_site_template_feature');
  features_revert(array('nas_magazine_issue_feature' => array('panelizer_defaults')));
}

/**
 * Conservation strategy.
 */
function nas_master_update_7050() {
  features_revert(array('nas_article_feature' => array('field_instance', 'strongarm')));
  features_revert_module('nas_conservation_strategy_feature');
  module_enable(array('nas_conservation'));
  pp_create_frontpage_conservation_section_image();
  features_revert(array('nas_frontpage_feature' => array('page_manager_pages')));
  features_revert_module('nas_beans_feature');
  features_revert_module('nas_view_modes_feature');
}

/**
 * Revert features components.
 */
function nas_master_update_7051() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_view_modes_feature');
  // Change weight of nas_alters module.
  db_update('system')
  ->fields(array('weight' => 100))
  ->condition('name', 'nas_alters')
  ->execute();
}

/**
 * Create instance of Welcome to Audubon bean.
 * Revert features components.
 * Delete unused fields.
 */
function nas_master_update_7052() {
  features_revert_module('nas_welcome_to_audubon');
  features_revert_module('nas_editor_role');
  $bean_values = array(
    'is_new' => TRUE,
    'description' => '',
    'title' => '',
    'label' => 'Welcome to Audubon',
    'type' => 'welcome_to_audubon',
    'delta' => 'welcome-to-audubon',
    'view_mode' => 'default',
    'uid' => 1,
  );
  $bean = new Bean($bean_values);
  $bean->save();
  $bean->field_learn_more_welcome_first[LANGUAGE_NONE][0] = array(
    'url' => '',
    'title' => 'Learn more »',
  );
  $bean->field_summary_welcome_first[LANGUAGE_NONE][0] = array(
    'value' => "<p><em><strong>Our Mission:</strong> To conserve and restore natural ecosystems, focusing on birds, other wildlife, and their habitats for the benefit of humanity and the earth's biological diversity.</em></p>",
    'format' => 'full_html',
    'summary' => '',
  );
  $bean->field_welcome_image[LANGUAGE_NONE][0] = array(
    'value' => 'sites/all/themes/custom/nas/img/welcome-illustration-teal.jpg',
  );
  $bean->save();

  features_revert(array('nas_article_feature' => array('panelizer_defaults')));
  field_delete_field('field_image_welcome_first');
  field_delete_field('field_in_the_news_welcome_first');
  field_delete_field('field_most_popular_welcome_first');
  field_delete_field('field_image_welcome_first');
  field_delete_field('field_social_link_facebook');
  field_delete_field('field_social_link_pinterest');
  field_delete_field('field_social_link_twitter');
  field_delete_field('field_social_link_youtube');
  features_revert(array('nas_static_page_feature' => array('panelizer_defaults')));
  features_revert_module('nas_views_feature');
  features_revert_module('nas_frontpage_feature');
  features_revert_module('nas_author_page');
  features_revert_module('nas_contact_type_feature');
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_news_page_feature');
}

/**
 * Revert features and enable modules.
 */
function nas_master_update_7053() {
  features_revert_module('nas_image_styles_feature');
  features_revert(array('nas_bird_type_feature' => array('wysiwyg')));
  module_enable(
    array(
      'nas_about_feature',
      'addressfield',
      'geofield',
      'geocoder',
      'geophp',
      'nas_location_feature',
    )
  );
  features_revert_module('nas_import_feeds_feature');
}

/**
 * Chapters migration.
 */
function nas_master_update_7057(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'chapter', 'chapters_import', t('Chapters'));
}

/**
 * Audubon locations migration.
 */
function nas_master_update_7058(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'audubon_location', 'audubon_location_import', t('Audubon locations'));
}

/**
 * Run migrate operation from hook_update_N.
 *
 * @param array $sandbox
 *   Batch sandbox.
 *
 * @param int $chunk
 *   Count of nodes for one batch operation.
 *
 * @param string $d6_content_type
 *   Name of the content type in Drupal 6.
 *
 * @param string $feeds_importer
 *   Machine name of the feeds importer.
 *
 * @param string $human_name
 *   Human readable name of the content type.
 *
 * @param bool $only_new
 *   Flag to import only new content.
 */
function _nas_master_migrate_operation_from_update(&$sandbox, $chunk, $d6_content_type, $feeds_importer, $human_name, $only_new = FALSE) {
  if (!isset($sandbox['progress'])) {
    // Add nids to sandbox.
    switch ($d6_content_type) {
      case 'user':
        $result = drupal_http_request(EXPORT_USERS_LIST_UIDS_URL);
        $sandbox['nids'] = drupal_json_decode($result->data);
        break;

      case 'profile':
        $result = drupal_http_request(EXPORT_NODE_TYPE_CONTACT_LIST_NIDS_URL . $d6_content_type);
        $sandbox['nids'] = drupal_json_decode($result->data);
        break;

      default:
        $result = drupal_http_request(EXPORT_NODE_LIST_NIDS_URL . $d6_content_type);
        $sandbox['nids'] = drupal_json_decode($result->data);
        break;
    }

    // Import only new items.
    if ($only_new) {
      $imported_nids = array();
      $feeds_items = db_select('feeds_item', 'f')
        ->fields('f', array('guid'))
        ->condition('f.id', $feeds_importer)
        ->execute();
      foreach ($feeds_items as $feeds_item) {
        $imported_nids[] = $feeds_item->guid;
      }

      $sandbox['nids'] = array_diff($sandbox['nids'], $imported_nids);
    }

    // Limit nodes for dev environment.
    if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
      $sandbox['nids'] = array_slice($sandbox['nids'], 0, 20);
    }

    $sandbox['max'] = count($sandbox['nids']);
    $sandbox['progress'] = 0;
  }

  if (!empty($sandbox['max'])) {
    // Get part of ids.
    $nids = array_slice($sandbox['nids'], $sandbox['progress'], $chunk);
    if ($d6_content_type == 'user') {
      pp_import_users_batch($nids, $feeds_importer);
    }
    else {
      pp_import_nodes_batch($nids, $feeds_importer);
    }
    $sandbox['progress'] += count($nids);
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];
  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count @name has been successfully imported.', array('@count' => $sandbox['progress'], '@name' => $human_name));
  }
}

/**
 * Enable getoutside feature.
 */
function nas_master_update_7059() {
  features_revert_module('nas_image_styles_feature');
  features_revert(array('nas_about_feature' => array('page_manager_pages')));
  features_revert(array('nas_conservation_landing_feature' => array('page_manager_pages')));
  module_enable(array('nas_getoutside_feature'));
  features_revert(array('nas_birds_landing_feature' => array('page_manager_pages')));
  features_revert(array('nas_location_feature' => array('views_default')));
  features_revert(array('nas_conservation_project_feature' => array('panelizer_defaults')));
  features_revert(array('nas_news_page_feature' => array('page_manager_pages')));
}

/**
 * Add Nodequeue module, Engagement cards.
 */
function nas_master_update_7060() {
  module_enable(array('nodequeue', 'auto_nodequeue', 'nas_engagement_cards_feature'));
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_article_feature');
  features_revert(array('nas_author_page' => array('panelizer')));
  features_revert(array('nas_contact_type_feature' => array('panelizer')));
  features_revert(array('nas_flyways_feature' => array('panelizer')));
  features_revert(array('nas_slideshow_feature' => array('field_instance', 'panelizer', 'views_default')));
  features_revert(array('nas_conservation_project_feature' => array('panelizer')));
  features_revert_module('nas_conservation_strategy_feature');
  features_revert_module('nas_frontpage_feature');
  features_revert_module('nas_news_page_feature');
  features_revert_module('nas_flyways_landing_feature');
  features_revert_module('nas_engagement_cards_feature');
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_boa_feature');
  // Enable autonodequeue.
  db_insert('nodequeue_auto')
    ->fields(array('qid' => 1, 'auto_add' => 1))
    ->execute();
}

/**
 * Revert features related to ANW-397.
 * Update overridden flyways nodes panelizer settings.
 */
function nas_master_update_7061() {
  features_revert_module('nas_views_feature');
  features_revert_module('nas_static_page_feature');
  features_revert(array('nas_birds_guide_feature' => array('page_manager_pages')));

  $nids = db_query("SELECT nid FROM {node} WHERE type = :type", array(':type' => 'flyway'))->fetchAllKeyed(0, 0);
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    $did = $node->panelizer['page_manager']->did;
    db_delete('panels_pane')
      ->condition('did', $did)
      ->condition('panel', 'bottom')
      ->condition('type', 'nas_panes_flyway_in_the_news')
      ->execute();
    // In hook_update_N we use db_insert() instead of drupal_write_record().
    db_insert('panels_pane')
      ->fields(array(
        'did' => $did,
        'panel' => 'bottom',
        'type' => 'editorial_card_3x',
        'subtype' => 'editorial_card_3x',
        'shown' => 1,
        'access' => serialize(array()),
        'configuration' => serialize(array(
          'context' => 'panelizer',
          'override_title' => 1,
          'override_title_text' => '%node:title In the News',
          'preset' => 'flyway_in_the_news',
          'more_link_text' => 'More News »',
          'more_link_url' => 'news',
        )),
        'cache' => serialize(array()),
        'style' => serialize(array('settings' => NULL)),
        'css' => serialize(array()),
        'extras' => serialize(array()),
        'position' => 2,
        'locks' => serialize(array()),
      ))
      ->execute();
  }
  features_revert_module('nas_contact_type_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7062() {
  features_revert_module('nas_image_styles_feature');
  features_revert(array('nas_contact_type_feature' => array('panelizer_defaults')));
}

/**
 * Revert features.
 */
function nas_master_update_7063() {
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_views_feature');
  features_revert_module('nas_site_template_feature');
  features_revert_module('nas_frontpage_feature');
  features_revert_module('nas_boa_feature');
  module_disable(array('nas_pages_feature'));
  features_revert_module('nas_article_feature');
  features_revert_module('nas_author_page');
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_boa_feature');
  features_revert_module('nas_boa_genus_feature');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_conservation_strategy_feature');
  features_revert_module('nas_contact_type_feature');
  features_revert_module('nas_engagement_cards_feature');
  features_revert_module('nas_flyways_feature');
  features_revert_module('nas_fpp_feature');
  features_revert_module('nas_location_feature');
  features_revert_module('nas_magazine_issue_feature');
  features_revert_module('nas_slideshow_feature');
  features_revert_module('nas_static_page_feature');
  field_delete_field('field_first_name');
}

/**
 * Revert features. Enable modules. Update aliases.
 */
function nas_master_update_7064() {
  features_revert_module('nas_image_styles_feature');
  features_revert(array('nas_contact_type_feature' => array('panelizer_defaults')));
  features_revert(array('nas_author_page' => array('panelizer_defaults')));
  features_revert(array('nas_article_feature' => array('panelizer_defaults')));
  module_enable(array('redirect', 'nas_token', 'nas_url_aliases_feature'));
  features_revert_module('nas_url_aliases_feature');
  features_revert(array('nas_contact_type_feature' => array('field_group')));

  db_update('page_manager_pages')
    ->condition('name', 'birds_landing')
    ->fields(array('path' => 'birds'))
    ->execute();

  db_update('page_manager_pages')
    ->condition('name', 'bird_guide')
    ->fields(array('path' => 'birds/bird-guide'))
    ->execute();

  db_update('page_manager_pages')
    ->condition('name', 'flyways_landing')
    ->fields(array('path' => 'birds/flyways'))
    ->execute();

  if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
    module_load_include('inc', 'pathauto', 'pathauto');
    $node = node_load(1689);
    pathauto_create_alias('node', 'bulkupdate', 'node/' . $node->nid, array('node' => $node), $node->type, LANGUAGE_NONE);
  }
}

/**
 * Revert features.
 */
function nas_master_update_7065() {
  features_revert(array('nas_news_page_feature' => array('page_manager_pages')));
  features_revert_module('nas_static_page_feature');
  features_revert_module('nas_import_feeds_feature');
  module_enable(array('nas_search', 'nas_search_feature'));
  features_revert_module('nas_article_feature');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_conservation_strategy_feature');
  features_revert_module('nas_boa_feature');
  features_revert_module('nas_flyways_feature');
  features_revert_module('nas_solr_feature');
}

/**
 * Update aliases.
 */
function nas_master_update_7066(&$sandbox) {
  _nas_master_bulk_update_aliases($sandbox, 10);
}

/**
 * Update aliases from hook_update_N.
 *
 * @param array $sandbox
 *   Batch sandbox.
 *
 * @param int $chunk
 *   Count of nodes for one batch operation.
 */
function _nas_master_bulk_update_aliases(&$sandbox, $chunk) {
  module_load_include('inc', 'pathauto', 'pathauto');
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $count = db_select('node', 'n')
      ->countQuery()
      ->execute()
      ->fetchField();
    $sandbox['max'] = $count;
  }

  // Limit nodes for dev environment.
  if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
    $sandbox['max'] = 50;
  }

  if (!empty($sandbox['max'])) {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->range($sandbox['current'], $chunk);

    // Use only news for dev environment.
    if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
      $query->condition('n.type', 'article');
    }

    $result = $query->execute();
    foreach ($result as $node) {
      $node = node_load($node->nid);
      pathauto_create_alias('node', 'bulkupdate', 'node/' . $node->nid, array('node' => $node), $node->type, LANGUAGE_NONE);
      $sandbox['current']++;
    }

    $sandbox['progress'] += $chunk;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count aliases has been successfully updated.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Import static pages.
 */
function nas_master_update_7067(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'page', 'static_pages_import', t('Static pages import'));
}

/**
 * Revert search page feature.
 */
function nas_master_update_7070() {
  module_enable(array('search_api_facetapi', 'facetapi_bonus'));
  features_revert_module('nas_search_feature');
  features_revert_module('nas_solr_feature');
  _block_rehash('nas');
}

/**
 * Revert article feature.
 */
function nas_master_update_7071() {
  features_revert_module('nas_article_feature');
  // Temporary remove feeds process limit.
  $feeds_process_limit = variable_get('feeds_process_limit', FEEDS_PROCESS_LIMIT);
  variable_set('feeds_process_limit', 10000);
  $source = feeds_source('static_pages_import');
  $source->importer->processor->clear($source);
  watchdog('nas_master', 'Migrated content (static pages) has been successfully removed.');
  variable_set('feeds_process_limit', $feeds_process_limit);
}

/**
 * Migrate users.
 */
function nas_master_update_7072(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'user', 'users_import', t('Users import'), TRUE);
}

/**
 * Migrate Authors.
 */
function nas_master_update_7073(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'author', 'authors_import', t('Authors import'), TRUE);
}

/**
 * Migrate news.
 */
function nas_master_update_7074(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'news', 'news_import', t('News import'), TRUE);
}

/**
 * Migrate Magazine Articles.
 */
function nas_master_update_7075(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'magazine_article', 'news_import', t('Magazine article import'), TRUE);
}

/**
 * Migrate Contacts.
 */
function nas_master_update_7076(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'profile', 'contacts_import', t('Contacts import'), TRUE);
}

/**
 * Migrate Media Gallery.
 */
function nas_master_update_7077(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'media_gallery', 'media_gallery_import', t('Media Gallery import'), TRUE);
}

/**
 * Migrate Static Pages.
 */
function nas_master_update_7080(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'page', 'static_pages_import', t('Static pages import'), TRUE);
}

/**
 * Migrate magazine_issue.
 */
function nas_master_update_7081(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'magazine_issue', 'magazine_issues_import', t('Magazine issue import'), TRUE);
}

/**
 * Migrate birds.
 */
function nas_master_update_7082(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'bird', 'birds_import', t('Bird import'), TRUE);
}

/**
 * Migrate locations.
 */
function nas_master_update_7083(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'audubon_location', 'audubon_location_import', t('Locations import'), TRUE);
}

/**
 * Migrate chapters.
 */
function nas_master_update_7084(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'chapter', 'chapters_import', t('Chapters'), TRUE);
}

/**
 * Remove default image for articles.
 */
function nas_master_update_7085(&$sandbox) {
  $chunk = 10;
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $count = db_select('field_data_field_hero_image', 'f')
      ->condition('f.bundle', 'article')
      ->condition('f.field_hero_image_fid', 3936)
      ->countQuery()
      ->execute()
      ->fetchField();
    $sandbox['max'] = $count;
  }

  // Limit nodes for dev environment.
  if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
    $sandbox['max'] = 50;
  }

  if (!empty($sandbox['max'])) {
    $query = db_select('field_data_field_hero_image', 'f');
    $query->fields('f', array('entity_id'));
    $query->condition('f.bundle', 'article');
    $query->condition('f.field_hero_image_fid', 3936);
    $query->range(0, $chunk);

    $result = $query->execute();
    foreach ($result as $item) {
      $node = node_load($item->entity_id);
      $node->field_hero_image = array();
      node_save($node);
      $sandbox['current']++;
    }

    $sandbox['progress'] += $chunk;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count default images has been successfully removed.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Migrate data from legacy field to subtitle.
 */
function nas_master_update_7086(&$sandbox) {
  $chunk = 10;
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $count = db_select('field_data_field_article_legacy', 'f')
      ->condition('f.bundle', 'article')
      ->countQuery()
      ->execute()
      ->fetchField();
    $sandbox['max'] = $count;
  }

  // Limit nodes for dev environment.
  if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
    $sandbox['max'] = 50;
  }

  if (!empty($sandbox['max'])) {
    $query = db_select('field_data_field_article_legacy', 'f');
    $query->fields('f', array('entity_id'));
    $query->condition('f.bundle', 'article');
    $query->range(0, $chunk);

    $result = $query->execute();
    foreach ($result as $item) {
      $node = node_load($item->entity_id);
      if (!empty($node->field_article_legacy[LANGUAGE_NONE][0]['value'])) {
        $legacy = substr($node->field_article_legacy[LANGUAGE_NONE][0]['value'], 0, 255);
        $node->field_subtitle[LANGUAGE_NONE][0] = array('value' => strip_tags($legacy));
        $node->field_article_legacy = array();
        node_save($node);
      }
      $sandbox['current']++;
    }

    $sandbox['progress'] += $chunk;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count legacy fields has been successfully migrated to subtitle.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Revert features.
 */
function nas_master_update_7078() {
  features_revert_module('nas_birds_family_feature');
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_boa_index_feature');
  features_revert_module('nas_getoutside_feature');
  features_revert_module('nas_magazine_issue_feature');
  features_revert_module('nas_static_page_feature');
  field_delete_field('field_first_name');
  features_revert_module('nas_contact_type_feature');
  features_revert_module('nas_conservation_landing_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7079() {
  features_revert(array('nas_article_feature' => array('panelizer_defaults')));
  module_enable(array('nas_audubon_near_you_feature', 'nas_bird_friendly_feature'));
  features_revert_module('nas_bird_friendly_feature');
}

/**
 * Update disqus comments to articles.
 */
function nas_master_update_7087(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $chunk = 10;
    $sandbox['progress'] = 0;
    // Get all article nids with status 1.
    $disqus_nids = db_select('disqus', 'd')
      ->condition('status', TRUE)
      ->fields('d', array('nid'))
      ->distinct()
      ->execute()
      ->fetchCol();

    db_truncate('disqus')->execute();

    $query = db_select('node', 'n');
    $query->condition('n.type', 'article');
    if (!empty($disqus_nids)) {
      $query->condition('n.nid', $disqus_nids, 'NOT IN');
    }
    $query->fields('n', array('nid'));

    $sandbox['nids'] = $query->execute()->fetchCol();

    $sandbox['max'] = count($sandbox['nids']);
  }

  if (!empty($sandbox['max'])) {
    $nids = array_slice($sandbox['nids'], $sandbox['progress'], $chunk);
    foreach ($nids as $nid) {
      $data = array(
        'nid' => $nid,
        'status' => FALSE,
      );
      drupal_write_record('disqus', $data);
    }
    $sandbox['progress'] += count($nids);
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] == 1) {
    watchdog('nas_master', '@count disqus records has been successfully updated.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Enable feature.
 */
function nas_master_update_7088() {
  module_enable(array('nas_help_page_feature'));
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_search_feature');
  features_revert_module('nas_solr_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7089() {
  module_enable(array('nas_revision_feature'));
  features_revert_module('nas_article_feature');
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_boa_feature');
  features_revert_module('nas_boa_genus_feature');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_conservation_strategy_feature');
  features_revert_module('nas_contact_type_feature');
  features_revert_module('nas_editor_role');
  features_revert_module('nas_engagement_cards_feature');
  features_revert_module('nas_flyways_feature');
  features_revert_module('nas_location_feature');
  features_revert_module('nas_magazine_issue_feature');
  features_revert_module('nas_slideshow_feature');
  features_revert_module('nas_static_page_feature');
  features_revert_module('nas_revision_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7090() {
  features_revert_module('nas_engagement_cards_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7092() {
  features_revert_module('nas_audubon_near_you_feature');
  features_revert_module('nas_location_feature');
  features_revert_module('nas_views_feature');
  module_enable(array('bigmenu'));
}
