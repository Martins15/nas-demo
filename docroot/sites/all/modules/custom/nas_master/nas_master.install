<?php

/**
 * @file
 * For hook_update_X functions.
 */

/**
 * Implements hook_install().
 */
function nas_master_install() {
  $files = array('footer-logo.png', 'canon-logo.png');
  foreach ($files as $file) {
    $source = DRUPAL_ROOT . '/sites/all/themes/custom/nas/img/' . $file;
    $destination = 'public://' . $file;
    file_unmanaged_copy($source, $destination, FILE_EXISTS_REPLACE);
  }
  $boa_hero_fid = nas_import_get_default_image('boa-hero.jpg');
  variable_set('boa_index_hero', $boa_hero_fid);

  $boa_bio_fid = nas_import_get_default_image('boa-john-audubon.jpg');
  variable_set('boa_index_bio', $boa_bio_fid);
  features_revert_module('nas_boa_index_feature');

  // Create BOA structure.
  nas_master_update_7028();
}

/**
 * Implements hook_update_dependencies().
 */
function nas_master_update_dependencies() {
  $dependencies['nas_master'][7286] = array(
    'lazyloader' => 7201,
  );

  return $dependencies;
}

/**
 * Enable nas_slideshow_feature feature.
 */
function nas_master_update_7002() {
  module_enable(array('nas_slideshow_feature'));
}

/**
 * Revert nas_flyways_feature & nas_frontpage_feature features.
 */
function nas_master_update_7005() {
  features_revert_module('nas_flyways_feature');
  features_revert_module('nas_frontpage_feature');
}

/**
 * Changes db for activate nas_past_magazine_issues feature.
 */
function nas_master_update_7008() {
  // Revert nas_magazine_issue_feature.
  features_revert(array('nas_magazine_issue_feature' => array('field_instance')));

  // Enable nas_past_magazine_issues module.
  if (!module_exists('nas_past_magazine_issues')) {
    $modules = array('nas_past_magazine_issues');
    module_enable($modules);
  }
}

/**
 * Revert Article CT feature.
 *
 * Revert NAS Flyways Landing feature.
 */
function nas_master_update_7009() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_flyways_landing_feature');
}

/**
 * Enable Conservation Strategy and Conservation Project features.
 */
function nas_master_update_7013() {
  module_enable(array(
    'nas_conservation_strategy_feature',
    'nas_conservation_project_feature'
  ));
}

/**
 * Revert NAS Site Template feature.
 */
function nas_master_update_7014() {
  features_revert_module('nas_site_template_feature');
}

/**
 * Activate BOA CT feature with dependensie.
 */
function nas_master_update_7015() {

  module_enable(array('book'));

  // Delete default book content type.
  node_type_delete('book');
  variable_del('node_preview_book');

  if (!module_exists('nas_boa_feature')) {
    module_enable(array('nas_boa_feature'));
    features_revert_module('nas_boa_feature');
  }
}

/**
 * Revert NAS Views feature.
 *
 * Insert Flyway Conservation Projects pane in panelized overriden flyway nodes.
 */
function nas_master_update_7016() {
  features_revert_module('nas_views_feature');

  $nids = db_query("SELECT nid FROM {node} WHERE type = :type", array(':type' => 'flyway'))->fetchAllKeyed(0, 0);
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    $did = $node->panelizer['page_manager']->did;
    // In hook_update_N we use db_insert() instead of drupal_write_record().
    db_insert('panels_pane')
      ->fields(array(
        'did' => $did,
        'panel' => 'bottom',
        'type' => 'nas_panes_flyway_cons_projects',
        'subtype' => 'nas_panes_flyway_cons_projects',
        'shown' => 1,
        'access' => serialize(array()),
        'configuration' => serialize(array()),
        'cache' => serialize(array()),
        'style' => serialize(array('settings' => NULL)),
        'css' => serialize(array()),
        'extras' => serialize(array()),
        'position' => 2,
        'locks' => serialize(array()),
      ))
      ->execute();
  }
}

/**
 * Revert BOA CT feature.
 */
function nas_master_update_7017() {
  features_revert_module('nas_boa_feature');
}

/**
 * Revert NAS Image Styles feature.
 *
 * Revert Conservation Project feature.
 */
function nas_master_update_7018() {
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_conservation_project_feature');
}

/**
 * Revert features for Slideshow migration.
 */
function nas_master_update_7019() {
  $features = array(
    'nas_bird_type_feature',
    'nas_image_styles_feature',
    'nas_slideshow_feature',
    'nas_import_feeds_feature',
  );
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Slideshow migration.
 */
function nas_master_update_7020(&$sandbox) {
  $chunk = 10;
  if (!isset($sandbox['progress'])) {
    // Add nids to sandbox.
    $result = drupal_http_request(EXPORT_NODE_LIST_NIDS_URL . 'media_gallery');
    $sandbox['gallery_nids'] = drupal_json_decode($result->data);

    // Limit nodes for dev environment.
    if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
      $sandbox['gallery_nids'] = array_slice($sandbox['gallery_nids'], 0, 20);
    }

    $sandbox['max'] = count($sandbox['gallery_nids']);
    $sandbox['progress'] = 0;
  }

  if (!empty($sandbox['max'])) {
    // Get part of ids.
    $nids = array_slice($sandbox['gallery_nids'], $sandbox['progress'], $chunk);
    pp_import_nodes_batch($nids, 'media_gallery_import');
    $sandbox['progress'] += count($nids);
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count media galleries has been successfully imported.', array('@count' => $sandbox['progress']));

    return t('The migration was successful.');
  }
}

/**
 * Revert features for Slideshow.
 */
function nas_master_update_7021() {
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_slideshow_feature');
}

/**
 * Revert Conservation Project feature.
 */
function nas_master_update_7023() {
  features_revert_module('nas_conservation_project_feature');
}

/**
 * Revert nas_image_styles_feature feature.
 */
function nas_master_update_7024() {
  features_revert_module('nas_image_styles_feature');
}

/**
 * Revert features for "Related Features" block.
 */
function nas_master_update_7025() {
  features_revert_module('nas_view_modes_feature');
  features_revert_module('nas_article_feature');
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_slideshow_feature');
}

/**
 * Enable Static page feature.
 */
function nas_master_update_7026() {
  module_enable(array('nas_static_page_feature'));
}

/**
 * Revert features for Magazine Issue page blocks.
 */
function nas_master_update_7027() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_views_feature');
  features_revert_module('nas_magazine_issue_feature');
}

/**
 * Create BOA nodes.
 */
function nas_master_update_7028() {
  module_disable(array('book'));
  variable_del('book_allowed_types');
  variable_del('book_child_type');

  $menu = array(
    'menu_name' => 'boa',
    'title' => t('Birds of America'),
    'description' => t('Menu holds structure of Birds of America book'),
  );
  menu_save($menu);

  $structure_file = file_get_contents(drupal_get_path('module', 'nas_master') . '/resources/boa_structure.txt');
  $weight = 0;
  $family_mlid = NULL;
  $genus_mlid = NULL;
  foreach (explode("\n", $structure_file) as $structure_file_row) {
    $weight++;
    list($title, $link) = explode(':', $structure_file_row);
    $type = _nas_master_update_7027_get_type($link);

    $node = (object) array(
      'type' => $type,
      'title' => $title,
      'created' => REQUEST_TIME,
      'uid' => 2,
      'author' => 'editor',
      'language' => LANGUAGE_NONE,
    );
    node_object_prepare($node);
    node_save($node);

    switch ($type) {
      case 'boaf':
        // Create top level menu item.
        $menu_link = array(
          'link_title' => $node->title,
          'link_path' => 'node/' . $node->nid,
          'module' => 'nas_master',
          'menu_name' => 'boa',
          'weight' => $weight,
        );
        $family_mlid = menu_link_save($menu_link);
        break;

      case 'boag':
        // Create menu item under family.
        $menu_link = array(
          'link_title' => $node->title,
          'link_path' => 'node/' . $node->nid,
          'module' => 'nas_master',
          'menu_name' => 'boa',
          'weight' => $weight,
          'plid' => $family_mlid,
        );
        $genus_mlid = menu_link_save($menu_link);
        break;

      case 'boa':
        // Create menu item under genus.
        $menu_link = array(
          'link_title' => $node->title,
          'link_path' => 'node/' . $node->nid,
          'module' => 'nas_master',
          'menu_name' => 'boa',
          'weight' => $weight,
          'plid' => $genus_mlid,
        );
        menu_link_save($menu_link);
        break;
    }

    unset($node);
  }

}

/**
 * Helper function.
 */
function _nas_master_update_7027_get_type($link) {
  if (preg_match('/F[0-9]*$/', $link)) {
    return 'boaf';
  }
  if (preg_match('/F[0-9]*_G[0-9]*$/', $link)) {
    return 'boag';
  }
  return 'boa';
}

/**
 * Delete instance of field_related_bird from Conservation Project CT.
 *
 * Revert features for Conservation projects "Birds native to this area" pane.
 */
function nas_master_update_7029() {
  if ($instance = field_info_instance('node', 'field_related_bird', 'project')) {
    field_delete_instance($instance);
  }
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_views_feature');
}

/**
 * Revert nas_image_styles_feature feature.
 */
function nas_master_update_7030() {
  features_revert_module('nas_image_styles_feature');
}

/**
 * Revert nas_bird_type_feature feature.
 *
 * Revert nas_bird_type_feature feature to update image file entity view mode
 * settings.
 */
function nas_master_update_7031() {
  features_revert_module('nas_bird_type_feature');
}

/**
 * Revert features for Conservation project Related news block.
 */
function nas_master_update_7032() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_views');
}

/**
 * Revert features.
 *
 * Revert features for Conservation project's 'Explore More Conservation
 * Projects' block.
 */
function nas_master_update_7033() {
  features_revert_module('nas_views');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_editor_role');
}

/**
 * Add new wysiwyg inline element Bottom line.
 */
function nas_master_update_7034() {
  field_delete_field('field_project_bottomline');
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_conservation_project_feature');
}

/**
 * Upload image for Conservation landing page. Enable nas_conservation_landing_feature feature.
 */
function nas_master_update_7036() {
  pp_create_conservation_hero_image();
  module_enable(array('nas_conservation_landing_feature'));
}

/**
 * Revert nas_static_page_feature feature.
 */
function nas_master_update_7037() {
  features_revert_module('nas_static_page_feature');
}

/**
 * Revert nas_conservation_project_feature, nas_bird_type_feature features.
 */
function nas_master_update_7038() {
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_bird_type_feature');
}

/**
 * Revert nas_conservation_landing_feature feature.
 */
function nas_master_update_7039() {
  features_revert_module('nas_conservation_landing_feature');
}

/**
 * Revert nas_boa_family_feature feature.
 */
function nas_master_update_7040() {
  features_revert_module('nas_boa_family_feature');
}

/**
 * Revert nas_image_styles_feature feature.
 *
 * Revert nas_conservation_strategy_feature feature.
 */
function nas_master_update_7041() {
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_conservation_strategy_feature');
}

/**
 * Add State field on BOA.
 */
function nas_master_update_7042() {
  features_revert_module('nas_boa_feature');
}

/**
 * Revert nas_image_styles_feature feature.
 */
function nas_master_update_7043() {
  features_revert_module('nas_image_styles_feature');

}

/**
 * Revert nas_conservation_landing_feature feature.
 */
function nas_master_update_7044() {
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_conservation_landing_feature');
}

/**
 * Revert editor permissions.
 *
 * Revert nas_boa_family_feature feature.
 * Enable memcache.
 */
function nas_master_update_7045() {
  features_revert_module('nas_editor_role');
  module_enable(array('memcache'));
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_boa_feature');
  $boa_hero_fid = nas_import_get_default_image('boa-hero.jpg');
  variable_set('boa_index_hero', $boa_hero_fid);
  $boa_bio_fid = nas_import_get_default_image('boa-john-audubon.jpg');
  variable_set('boa_index_bio', $boa_bio_fid);
  module_enable(array('nas_boa_index_feature'));
  features_revert_module('nas_site_template_feature');
}

/**
 * Conservation strategy page.
 */
function nas_master_update_7046() {
  features_revert_module('nas_beans_feature');
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_conservation_strategy_feature');
  module_enable(array('node_edit_protection'));
  features_revert(array('nas_conservation_project_feature' => array('field_instance')));
}

/**
 * Fullscreen Article changes.
 *
 * [ANW-324] Flyway related birds: bird feature and views feature reverted.
 * [ANW-327] Contact Node CT: allowed text formats limited for Bio field.
 */
function nas_master_update_7047() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_views_feature');
  features_revert(array('nas_contact_type_feature' => array('field_instance')));
}

/**
 * Revert BOA Index page feature.
 */
function nas_master_update_7048() {
  features_revert_module('nas_boa_index_feature');
}

/**
 * Revert Views feature.
 */
function nas_master_update_7049() {
  features_revert_module('nas_views_feature');
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_static_page_feature');
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_boa_feature');
  features_revert(array(
    'nas_article_feature' => array(
      'field_instance',
      'strongarm'
    )
  ));
  features_revert(array('nas_bird_type_feature' => array('field_instance')));
  features_revert(array(
    'nas_conservation_project_feature' => array(
      'field_instance',
      'strongarm'
    )
  ));
  features_revert(array('nas_conservation_strategy_feature' => array('field_instance')));
  features_revert(array('nas_contact_type_feature' => array('field_instance')));
  features_revert(array('nas_flyway_feature' => array('field_instance')));
  features_revert(array('nas_welcome_to_audubon' => array('field_instance')));
  features_revert(array(
    'nas_fpp_feature' => array(
      'field_base',
      'field_instance'
    )
  ));
  features_revert_module('nas_site_template_feature');
  features_revert(array('nas_magazine_issue_feature' => array('panelizer_defaults')));
}

/**
 * Conservation strategy.
 */
function nas_master_update_7050() {
  features_revert(array(
    'nas_article_feature' => array(
      'field_instance',
      'strongarm'
    )
  ));
  features_revert_module('nas_conservation_strategy_feature');
  module_enable(array('nas_conservation'));
  pp_create_frontpage_conservation_section_image();
  features_revert(array('nas_frontpage_feature' => array('page_manager_pages')));
  features_revert_module('nas_beans_feature');
  features_revert_module('nas_view_modes_feature');
}

/**
 * Revert features components.
 */
function nas_master_update_7051() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_view_modes_feature');
  // Change weight of nas_alters module.
  db_update('system')
    ->fields(array('weight' => 100))
    ->condition('name', 'nas_alters')
    ->execute();
}

/**
 * Create instance of Welcome to Audubon bean.
 *
 * Revert features components, delete unused fields.
 */
function nas_master_update_7052() {
  features_revert_module('nas_welcome_to_audubon');
  features_revert_module('nas_editor_role');
  $bean_values = array(
    'is_new' => TRUE,
    'description' => '',
    'title' => '',
    'label' => 'Welcome to Audubon',
    'type' => 'welcome_to_audubon',
    'delta' => 'welcome-to-audubon',
    'view_mode' => 'default',
    'uid' => 1,
  );
  $bean = new Bean($bean_values);
  $bean->save();
  $bean->field_learn_more_welcome_first[LANGUAGE_NONE][0] = array(
    'url' => '',
    'title' => 'Learn more »',
  );
  $bean->field_summary_welcome_first[LANGUAGE_NONE][0] = array(
    'value' => "<p><em><strong>Our Mission:</strong> To conserve and restore natural ecosystems, focusing on birds, other wildlife, and their habitats for the benefit of humanity and the earth's biological diversity.</em></p>",
    'format' => 'full_html',
    'summary' => '',
  );
  $bean->field_welcome_image[LANGUAGE_NONE][0] = array(
    'value' => 'sites/all/themes/custom/nas/img/welcome-illustration-teal.jpg',
  );
  $bean->save();

  features_revert(array('nas_article_feature' => array('panelizer_defaults')));
  field_delete_field('field_image_welcome_first');
  field_delete_field('field_in_the_news_welcome_first');
  field_delete_field('field_most_popular_welcome_first');
  field_delete_field('field_image_welcome_first');
  field_delete_field('field_social_link_facebook');
  field_delete_field('field_social_link_pinterest');
  field_delete_field('field_social_link_twitter');
  field_delete_field('field_social_link_youtube');
  features_revert(array('nas_static_page_feature' => array('panelizer_defaults')));
  features_revert_module('nas_views_feature');
  features_revert_module('nas_frontpage_feature');
  features_revert_module('nas_author_page');
  features_revert_module('nas_contact_type_feature');
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_news_page_feature');
}

/**
 * Revert features and enable modules.
 */
function nas_master_update_7053() {
  features_revert_module('nas_image_styles_feature');
  features_revert(array('nas_bird_type_feature' => array('wysiwyg')));
  module_enable(
    array(
      'nas_about_feature',
      'addressfield',
      'geofield',
      'geocoder',
      'geophp',
      'nas_location_feature',
    )
  );
  features_revert_module('nas_import_feeds_feature');
}

/**
 * Chapters migration.
 */
function nas_master_update_7057(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'chapter', 'chapters_import', t('Chapters'));
}

/**
 * Audubon locations migration.
 */
function nas_master_update_7058(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'audubon_location', 'audubon_location_import', t('Audubon locations'));
}

/**
 * Run migrate operation from hook_update_N.
 *
 * @param array $sandbox
 *   Batch sandbox.
 * @param int $chunk
 *   Count of nodes for one batch operation.
 * @param string $d6_content_type
 *   Name of the content type in Drupal 6.
 * @param string $feeds_importer
 *   Machine name of the feeds importer.
 * @param string $human_name
 *   Human readable name of the content type.
 * @param bool $only_new
 *   Flag to import only new content.
 */
function _nas_master_migrate_operation_from_update(array &$sandbox, $chunk, $d6_content_type, $feeds_importer, $human_name, $only_new = FALSE) {
  if (!isset($sandbox['progress'])) {
    // Add nids to sandbox.
    switch ($d6_content_type) {
      case 'user':
        $result = drupal_http_request(EXPORT_USERS_LIST_UIDS_URL);
        $sandbox['nids'] = drupal_json_decode($result->data);
        break;

      case 'profile':
        $result = drupal_http_request(EXPORT_NODE_TYPE_CONTACT_LIST_NIDS_URL . $d6_content_type);
        $sandbox['nids'] = drupal_json_decode($result->data);
        break;

      default:
        $result = drupal_http_request(EXPORT_NODE_LIST_NIDS_URL . $d6_content_type);
        $sandbox['nids'] = drupal_json_decode($result->data);
        break;
    }

    // Import only new items.
    if ($only_new) {
      $imported_nids = array();
      $feeds_items = db_select('feeds_item', 'f')
        ->fields('f', array('guid'))
        ->condition('f.id', $feeds_importer)
        ->execute();
      foreach ($feeds_items as $feeds_item) {
        $imported_nids[] = $feeds_item->guid;
      }

      $sandbox['nids'] = array_diff($sandbox['nids'], $imported_nids);
    }

    // Limit nodes for dev environment.
    if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
      $sandbox['nids'] = array_slice($sandbox['nids'], 0, 20);
    }

    $sandbox['max'] = count($sandbox['nids']);
    $sandbox['progress'] = 0;
  }

  if (!empty($sandbox['max'])) {
    // Get part of ids.
    $nids = array_slice($sandbox['nids'], $sandbox['progress'], $chunk);
    if ($d6_content_type == 'user') {
      pp_import_users_batch($nids, $feeds_importer);
    }
    else {
      pp_import_nodes_batch($nids, $feeds_importer);
    }
    $sandbox['progress'] += count($nids);
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];
  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count @name has been successfully imported.', array(
      '@count' => $sandbox['progress'],
      '@name' => $human_name
    ));
  }
}

/**
 * Enable getoutside feature.
 */
function nas_master_update_7059() {
  features_revert_module('nas_image_styles_feature');
  features_revert(array('nas_about_feature' => array('page_manager_pages')));
  features_revert(array('nas_conservation_landing_feature' => array('page_manager_pages')));
  module_enable(array('nas_getoutside_feature'));
  features_revert(array('nas_birds_landing_feature' => array('page_manager_pages')));
  features_revert(array('nas_location_feature' => array('views_default')));
  features_revert(array('nas_conservation_project_feature' => array('panelizer_defaults')));
  features_revert(array('nas_news_page_feature' => array('page_manager_pages')));
}

/**
 * Add Nodequeue module, Engagement cards.
 */
function nas_master_update_7060() {
  module_enable(array(
    'nodequeue',
    'auto_nodequeue',
    'nas_engagement_cards_feature'
  ));
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_article_feature');
  features_revert(array('nas_author_page' => array('panelizer')));
  features_revert(array('nas_contact_type_feature' => array('panelizer')));
  features_revert(array('nas_flyways_feature' => array('panelizer')));
  features_revert(array(
    'nas_slideshow_feature' => array(
      'field_instance',
      'panelizer',
      'views_default'
    )
  ));
  features_revert(array('nas_conservation_project_feature' => array('panelizer')));
  features_revert_module('nas_conservation_strategy_feature');
  features_revert_module('nas_frontpage_feature');
  features_revert_module('nas_news_page_feature');
  features_revert_module('nas_flyways_landing_feature');
  features_revert_module('nas_engagement_cards_feature');
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_boa_feature');
  // Enable autonodequeue.
  db_insert('nodequeue_auto')
    ->fields(array('qid' => 1, 'auto_add' => 1))
    ->execute();
}

/**
 * Revert features related to ANW-397.
 *
 * Update overridden flyways nodes panelizer settings.
 */
function nas_master_update_7061() {
  features_revert_module('nas_views_feature');
  features_revert_module('nas_static_page_feature');
  features_revert(array('nas_birds_guide_feature' => array('page_manager_pages')));

  $nids = db_query("SELECT nid FROM {node} WHERE type = :type", array(':type' => 'flyway'))->fetchAllKeyed(0, 0);
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    $did = $node->panelizer['page_manager']->did;
    db_delete('panels_pane')
      ->condition('did', $did)
      ->condition('panel', 'bottom')
      ->condition('type', 'nas_panes_flyway_in_the_news')
      ->execute();
    // In hook_update_N we use db_insert() instead of drupal_write_record().
    db_insert('panels_pane')
      ->fields(array(
        'did' => $did,
        'panel' => 'bottom',
        'type' => 'editorial_card_3x',
        'subtype' => 'editorial_card_3x',
        'shown' => 1,
        'access' => serialize(array()),
        'configuration' => serialize(array(
          'context' => 'panelizer',
          'override_title' => 1,
          'override_title_text' => '%node:title In the News',
          'preset' => 'flyway_in_the_news',
          'more_link_text' => 'More News »',
          'more_link_url' => 'news',
        )),
        'cache' => serialize(array()),
        'style' => serialize(array('settings' => NULL)),
        'css' => serialize(array()),
        'extras' => serialize(array()),
        'position' => 2,
        'locks' => serialize(array()),
      ))
      ->execute();
  }
  features_revert_module('nas_contact_type_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7062() {
  features_revert_module('nas_image_styles_feature');
  features_revert(array('nas_contact_type_feature' => array('panelizer_defaults')));
}

/**
 * Revert features.
 */
function nas_master_update_7063() {
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_views_feature');
  features_revert_module('nas_site_template_feature');
  features_revert_module('nas_frontpage_feature');
  features_revert_module('nas_boa_feature');
  module_disable(array('nas_pages_feature'));
  features_revert_module('nas_article_feature');
  features_revert_module('nas_author_page');
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_boa_feature');
  features_revert_module('nas_boa_genus_feature');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_conservation_strategy_feature');
  features_revert_module('nas_contact_type_feature');
  features_revert_module('nas_engagement_cards_feature');
  features_revert_module('nas_flyways_feature');
  features_revert_module('nas_fpp_feature');
  features_revert_module('nas_location_feature');
  features_revert_module('nas_magazine_issue_feature');
  features_revert_module('nas_slideshow_feature');
  features_revert_module('nas_static_page_feature');
  field_delete_field('field_first_name');
}

/**
 * Revert features. Enable modules. Update aliases.
 */
function nas_master_update_7064() {
  features_revert_module('nas_image_styles_feature');
  features_revert(array('nas_contact_type_feature' => array('panelizer_defaults')));
  features_revert(array('nas_author_page' => array('panelizer_defaults')));
  features_revert(array('nas_article_feature' => array('panelizer_defaults')));
  module_enable(array('redirect', 'nas_token', 'nas_url_aliases_feature'));
  features_revert_module('nas_url_aliases_feature');
  features_revert(array('nas_contact_type_feature' => array('field_group')));

  db_update('page_manager_pages')
    ->condition('name', 'birds_landing')
    ->fields(array('path' => 'birds'))
    ->execute();

  db_update('page_manager_pages')
    ->condition('name', 'bird_guide')
    ->fields(array('path' => 'birds/bird-guide'))
    ->execute();

  db_update('page_manager_pages')
    ->condition('name', 'flyways_landing')
    ->fields(array('path' => 'birds/flyways'))
    ->execute();

  if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
    module_load_include('inc', 'pathauto', 'pathauto');
    $node = node_load(1689);
    pathauto_create_alias('node', 'bulkupdate', 'node/' . $node->nid, array('node' => $node), $node->type, LANGUAGE_NONE);
  }
}

/**
 * Revert features.
 */
function nas_master_update_7065() {
  features_revert(array('nas_news_page_feature' => array('page_manager_pages')));
  features_revert_module('nas_static_page_feature');
  features_revert_module('nas_import_feeds_feature');
  module_enable(array('nas_search', 'nas_search_feature'));
  features_revert_module('nas_article_feature');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_conservation_strategy_feature');
  features_revert_module('nas_boa_feature');
  features_revert_module('nas_flyways_feature');
  features_revert_module('nas_solr_feature');
}

/**
 * Update aliases.
 */
function nas_master_update_7066(&$sandbox) {
  _nas_master_bulk_update_aliases($sandbox, 10);
}

/**
 * Update aliases from hook_update_N.
 *
 * @param array $sandbox
 *   Batch sandbox.
 * @param int $chunk
 *   Count of nodes for one batch operation.
 */
function _nas_master_bulk_update_aliases(array &$sandbox, $chunk) {
  module_load_include('inc', 'pathauto', 'pathauto');
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $count = db_select('node', 'n')
      ->countQuery()
      ->execute()
      ->fetchField();
    $sandbox['max'] = $count;
  }

  // Limit nodes for dev environment.
  if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
    $sandbox['max'] = 50;
  }

  if (!empty($sandbox['max'])) {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->range($sandbox['current'], $chunk);

    // Use only news for dev environment.
    if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
      $query->condition('n.type', 'article');
    }

    $result = $query->execute();
    foreach ($result as $node) {
      $node = node_load($node->nid);
      pathauto_create_alias('node', 'bulkupdate', 'node/' . $node->nid, array('node' => $node), $node->type, LANGUAGE_NONE);
      $sandbox['current']++;
    }

    $sandbox['progress'] += $chunk;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count aliases has been successfully updated.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Import static pages.
 */
function nas_master_update_7067(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'page', 'static_pages_import', t('Static pages import'));
}

/**
 * Revert search page feature.
 */
function nas_master_update_7070() {
  module_enable(array('search_api_facetapi', 'facetapi_bonus'));
  features_revert_module('nas_search_feature');
  features_revert_module('nas_solr_feature');
  _block_rehash('nas');
}

/**
 * Revert article feature.
 */
function nas_master_update_7071() {
  features_revert_module('nas_article_feature');
  // Temporary remove feeds process limit.
  $feeds_process_limit = variable_get('feeds_process_limit', FEEDS_PROCESS_LIMIT);
  variable_set('feeds_process_limit', 10000);
  $source = feeds_source('static_pages_import');
  $source->importer->processor->clear($source);
  watchdog('nas_master', 'Migrated content (static pages) has been successfully removed.');
  variable_set('feeds_process_limit', $feeds_process_limit);
}

/**
 * Migrate users.
 */
function nas_master_update_7072(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'user', 'users_import', t('Users import'), TRUE);
}

/**
 * Migrate Authors.
 */
function nas_master_update_7073(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'author', 'authors_import', t('Authors import'), TRUE);
}

/**
 * Migrate news.
 */
function nas_master_update_7074(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'news', 'news_import', t('News import'), TRUE);
}

/**
 * Migrate Magazine Articles.
 */
function nas_master_update_7075(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'magazine_article', 'news_import', t('Magazine article import'), TRUE);
}

/**
 * Migrate Contacts.
 */
function nas_master_update_7076(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'profile', 'contacts_import', t('Contacts import'), TRUE);
}

/**
 * Migrate Media Gallery.
 */
function nas_master_update_7077(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'media_gallery', 'media_gallery_import', t('Media Gallery import'), TRUE);
}

/**
 * Migrate Static Pages.
 */
function nas_master_update_7080(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'page', 'static_pages_import', t('Static pages import'), TRUE);
}

/**
 * Migrate magazine_issue.
 */
function nas_master_update_7081(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'magazine_issue', 'magazine_issues_import', t('Magazine issue import'), TRUE);
}

/**
 * Migrate birds.
 */
function nas_master_update_7082(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'bird', 'birds_import', t('Bird import'), TRUE);
}

/**
 * Migrate locations.
 */
function nas_master_update_7083(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'audubon_location', 'audubon_location_import', t('Locations import'), TRUE);
}

/**
 * Migrate chapters.
 */
function nas_master_update_7084(&$sandbox) {
  _nas_master_migrate_operation_from_update($sandbox, 10, 'chapter', 'chapters_import', t('Chapters'), TRUE);
}

/**
 * Remove default image for articles.
 */
function nas_master_update_7085(&$sandbox) {
  $chunk = 10;
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $count = db_select('field_data_field_hero_image', 'f')
      ->condition('f.bundle', 'article')
      ->condition('f.field_hero_image_fid', 3936)
      ->countQuery()
      ->execute()
      ->fetchField();
    $sandbox['max'] = $count;
  }

  // Limit nodes for dev environment.
  if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
    $sandbox['max'] = 50;
  }

  if (!empty($sandbox['max'])) {
    $query = db_select('field_data_field_hero_image', 'f');
    $query->fields('f', array('entity_id'));
    $query->condition('f.bundle', 'article');
    $query->condition('f.field_hero_image_fid', 3936);
    $query->range(0, $chunk);

    $result = $query->execute();
    foreach ($result as $item) {
      $node = node_load($item->entity_id);
      $node->field_hero_image = array();
      node_save($node);
      $sandbox['current']++;
    }

    $sandbox['progress'] += $chunk;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count default images has been successfully removed.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Migrate data from legacy field to subtitle.
 */
function nas_master_update_7086(&$sandbox) {
  $chunk = 10;
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $count = db_select('field_data_field_article_legacy', 'f')
      ->condition('f.bundle', 'article')
      ->countQuery()
      ->execute()
      ->fetchField();
    $sandbox['max'] = $count;
  }

  // Limit nodes for dev environment.
  if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
    $sandbox['max'] = 50;
  }

  if (!empty($sandbox['max'])) {
    $query = db_select('field_data_field_article_legacy', 'f');
    $query->fields('f', array('entity_id'));
    $query->condition('f.bundle', 'article');
    $query->range(0, $chunk);

    $result = $query->execute();
    foreach ($result as $item) {
      $node = node_load($item->entity_id);
      if (!empty($node->field_article_legacy[LANGUAGE_NONE][0]['value'])) {
        $legacy = substr($node->field_article_legacy[LANGUAGE_NONE][0]['value'], 0, 255);
        $node->field_subtitle[LANGUAGE_NONE][0] = array('value' => strip_tags($legacy));
        $node->field_article_legacy = array();
        node_save($node);
      }
      $sandbox['current']++;
    }

    $sandbox['progress'] += $chunk;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count legacy fields has been successfully migrated to subtitle.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Revert features.
 */
function nas_master_update_7078() {
  features_revert_module('nas_birds_family_feature');
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_boa_index_feature');
  features_revert_module('nas_getoutside_feature');
  features_revert_module('nas_magazine_issue_feature');
  features_revert_module('nas_static_page_feature');
  field_delete_field('field_first_name');
  features_revert_module('nas_contact_type_feature');
  features_revert_module('nas_conservation_landing_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7079() {
  features_revert(array('nas_article_feature' => array('panelizer_defaults')));
  module_enable(array(
    'nas_audubon_near_you_feature',
    'nas_bird_friendly_feature'
  ));
  features_revert_module('nas_bird_friendly_feature');
}

/**
 * Update disqus comments to articles.
 */
function nas_master_update_7087(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $chunk = 10;
    $sandbox['progress'] = 0;
    // Get all article nids with status 1.
    $disqus_nids = db_select('disqus', 'd')
      ->condition('status', TRUE)
      ->fields('d', array('nid'))
      ->distinct()
      ->execute()
      ->fetchCol();

    db_truncate('disqus')->execute();

    $query = db_select('node', 'n');
    $query->condition('n.type', 'article');
    if (!empty($disqus_nids)) {
      $query->condition('n.nid', $disqus_nids, 'NOT IN');
    }
    $query->fields('n', array('nid'));

    $sandbox['nids'] = $query->execute()->fetchCol();

    $sandbox['max'] = count($sandbox['nids']);
  }

  if (!empty($sandbox['max'])) {
    $nids = array_slice($sandbox['nids'], $sandbox['progress'], $chunk);
    foreach ($nids as $nid) {
      $data = array(
        'nid' => $nid,
        'status' => FALSE,
      );
      drupal_write_record('disqus', $data);
    }
    $sandbox['progress'] += count($nids);
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] == 1) {
    watchdog('nas_master', '@count disqus records has been successfully updated.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Enable feature.
 */
function nas_master_update_7088() {
  module_enable(array('nas_help_page_feature'));
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_search_feature');
  features_revert_module('nas_solr_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7089() {
  module_enable(array('nas_revision_feature'));
  features_revert_module('nas_article_feature');
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_boa_feature');
  features_revert_module('nas_boa_genus_feature');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_conservation_strategy_feature');
  features_revert_module('nas_contact_type_feature');
  features_revert_module('nas_editor_role');
  features_revert_module('nas_engagement_cards_feature');
  features_revert_module('nas_flyways_feature');
  features_revert_module('nas_location_feature');
  features_revert_module('nas_magazine_issue_feature');
  features_revert_module('nas_slideshow_feature');
  features_revert_module('nas_static_page_feature');
  features_revert_module('nas_revision_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7090() {
  features_revert_module('nas_engagement_cards_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7091() {
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_views_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7092() {
  features_revert_module('nas_audubon_near_you_feature');
  features_revert_module('nas_location_feature');
  features_revert_module('nas_views_feature');
  features_revert_module('nas_beans_feature');
  features_revert(array('nas_bird_type_feature' => array('filter')));
  features_revert_module('nas_image_styles_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7094() {
  module_enable(array('nas_content_administration_page_feature'));
  features_revert_module('nas_content_administration_page_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7095() {
  module_disable(array('nas_revision_feature'));
  features_revert_module('nas_content_administration_page_feature');
  features_revert_module('nas_views_feature');
}

/**
 * Enable module. Revert features.
 */
function nas_master_update_7097() {
  module_enable(array('bigmenu'));
  features_revert_module('nas_editor_role');
}

/**
 * Revert features.
 */
function nas_master_update_7096() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_views_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7098() {
  features_revert(array('nas_search_feature' => array('views_view')));
}

/**
 * Revert features.
 */
function nas_master_update_7099() {
  features_revert_module('nas_beans_feature');
  features_revert(array('nas_bird_type_feature' => array('filter')));
  features_revert_module('nas_image_styles_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7100() {
  features_revert_module('nas_conservation_project_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7101() {
  features_revert_module('nas_article_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7103() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_boa_family_feature');
  features_revert_module('nas_boa_feature');
  features_revert_module('nas_boa_genus_feature');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_conservation_strategy_feature');
  features_revert_module('nas_contact_type_feature');
  features_revert_module('nas_disqus');
  features_revert_module('nas_engagement_cards_feature');
  features_revert_module('nas_flyways_feature');
  features_revert_module('nas_location_feature');
  features_revert_module('nas_magazine_issue_feature');
  features_revert_module('nas_slideshow_feature');
  features_revert_module('nas_static_page_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7104() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_slideshow_feature');
  features_revert_module('nas_static_page_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7105() {
  features_revert_module('nas_image_styles_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7106() {
  features_revert_module('nas_beans_feature');
  features_revert_module('nas_boa_feature');
  features_revert_module('nas_boa_index_feature');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_conservation_strategy_feature');
  features_revert_module('nas_engagement_cards_feature');
  features_revert_module('nas_static_page_feature');
  features_revert_module('nas_view_modes_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7107() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_views_feature');
  features_revert_module('nas_site_template_feature');
  features_revert_module('nas_bird_type_feature');
  module_enable(array('nas_text_format_feature'));
  features_revert_module('nas_text_format_feature');
  features_revert_module('nas_editor_role');
  features_revert_module('nas_news_page_feature');
  features_revert_module('nas_image_styles_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7109() {
  features_revert_module('nas_bird_type_feature');
  features_revert_module('nas_views_feature');
  module_enable(array('imagemagick', 'imagemagick_advanced'));
  features_revert_module('nas_overrides_feature');
  features_revert(array('nas_import_feeds_feature' => array('feeds_importer_default')));
  features_revert(array('nas_article_feature' => array('feeds_importer_default')));
  features_revert(array('nas_magazine_issue_feature' => array('feeds_importer_default')));
}

/**
 * Revert features.
 */
function nas_master_update_7110() {
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_article_feature');
  features_revert_module('nas_beans_feature');
  features_revert_module('nas_boa_feature');
  features_revert_module('nas_boa_index_feature');
  features_revert_module('nas_conservation_project_feature');
  features_revert_module('nas_conservation_strategy_feature');
  features_revert_module('nas_engagement_cards_feature');
  features_revert_module('nas_static_page_feature');
  features_revert_module('nas_view_modes_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7111() {
  features_revert_module('nas_views_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7112() {
  module_enable(array(
    'metatag',
    'metatag_opengraph',
    'imagecache_token',
    'nas_editorial_cards'
  ));
  module_enable(array('nas_metatags_feature'));
  features_revert_module('nas_news_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7113() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_image_styles_feature');
  features_revert_module('nas_view_modes_feature');
}

/**
 * Set URL alias for Static Pages.
 */
function nas_master_update_7114() {
  features_revert_module('nas_url_aliases_feature');
}

/**
 * Enable modules. Revert features.
 */
function nas_master_update_7115() {
  $modules = array(
    'webform',
    'seckit',
    'securepages',
    'autologout',
  );
  module_enable($modules);
  features_revert_module('nas_overrides_feature');
  features_revert(array('nas_bird_type_feature' => array('panelizer_defaults')));
  features_revert_module('nas_birds_priority_feature');
}

/**
 * Change field_bird_conserv_status field from text to text_long.
 */
function nas_master_update_7116() {
  // Manual database changes.
  db_update('field_config')
    ->fields(array('type' => 'text_long'))
    ->condition('field_name', 'field_bird_conserv_status')
    ->execute();
  db_change_field('field_data_field_bird_conserv_status', 'field_bird_conserv_status_value', 'field_bird_conserv_status_value', array(
    'type' => 'text',
    'size' => 'big',
  ));
  db_change_field('field_revision_field_bird_conserv_status', 'field_bird_conserv_status_value', 'field_bird_conserv_status_value', array(
    'type' => 'text',
    'size' => 'big',
  ));
  // Clear caches.
  field_cache_clear(TRUE);
  // Apply the new field instance configuration.
  features_revert(array(
    'nas_bird_type_feature' => array('field', 'field_instance'),
  ));
}

/**
 * Revert features.
 */
function nas_master_update_7117() {
  features_revert_module('nas_fpp_feature');
}

/**
 * Reimport bird photos and related birds.
 */
function nas_master_update_7118(&$sandbox) {
  $chunk = 10;
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $result = drupal_http_request(EXPORT_NODE_LIST_NIDS_URL . 'bird');
    $nids = drupal_json_decode($result->data);
    $sandbox['max'] = count($nids);
    if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
      // Limit nodes for dev environment.
      $sandbox['max'] = max($sandbox['max'], 20);
    }
    else {
      // Change variable for non dev environment.
      variable_set('nas_cached_files_folder', variable_get('file_temporary_path'));
    }
    $sandbox['nids'] = $nids;
  }

  if (!empty($sandbox['max'])) {
    // Get part of ids.
    $nids = array_slice($sandbox['nids'], $sandbox['progress'], $chunk);
    $sandbox['progress'] += count($nids);
    nas_update_bird_photos_and_related($nids, 'birds_import');
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count birds images and related birds remigrated.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Modify reimported bird related field references in previous hook_update_n.
 */
function nas_master_update_7119() {
  nas_import_modify_bird_related_references(TRUE);
  variable_del('nas_cached_files_folder');
}

/**
 * Revert features.
 */
function nas_master_update_7120() {
  features_revert_module('nas_views_feature');
  features_revert_module('nas_solr_feature');
}

/**
 * Revert features components.
 */
function nas_master_update_7122() {
  features_revert(array('nas_boa_index_feature' => array('views_view')));
  features_revert(array('nas_text_format_feature' => array('filter')));
}

/**
 * Revert features.
 */
function nas_master_update_7123() {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_views_feature');
}

/**
 * Migrate Magazine issues articles hero and editorial card images.
 */
function nas_master_update_7124(&$sandbox) {
  $chunk = 10;
  if (!isset($sandbox['progress'])) {
    // Fetch imported magazine issues articles nids and corresponding d6 nids.
    $query = db_select('node', 'n');
    $query->innerJoin('feeds_item', 'fi', 'n.nid = fi.entity_id AND fi.id = :importer_id AND fi.entity_type = :entity_type', array(
      ':importer_id' => 'news_import',
      ':entity_type' => 'node',
    ));
    $query->innerJoin('field_data_field_magazine_issue', 'fmi', 'fmi.entity_id = n.nid and fmi.entity_type = :entity_type', array(
      ':entity_type' => 'node',
    ));
    $query->condition('n.type', 'article');
    $query->fields('fi', array('entity_id', 'guid'));
    $results = $query->execute()->fetchAll();

    $sandbox['progress'] = 0;
    $sandbox['max'] = count($results);
    if (isset($_SERVER['APP_ENV']) && $_SERVER['APP_ENV'] == 'dev') {
      // Limit nodes for dev environment.
      $sandbox['max'] = min($sandbox['max'], 20);
    }
    else {
      // Change variable for non dev environment.
      variable_set('nas_cached_files_folder', variable_get('file_temporary_path'));
    }
    $sandbox['nids'] = $results;
  }

  if (!empty($sandbox['max'])) {
    // Get part of ids.
    $nids = array_slice($sandbox['nids'], $sandbox['progress'], $chunk);
    $sandbox['progress'] += count($nids);
    _nas_import_update_mag_issue_articles($nids);
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count magazine issue articles hero and editorial card images were updated.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Set variables.
 */
function nas_master_update_7125() {
  $actions = array(
    EXPIRE_PANELS_DISPLAY_UPDATE => EXPIRE_PANELS_DISPLAY_UPDATE,
    EXPIRE_PANELS_DISPLAY_DELETE => EXPIRE_PANELS_DISPLAY_DELETE,
  );
  variable_set('expire_panels_actions', $actions);
  variable_set('expire_panels_panel_page', TRUE);
  variable_set('expire_panels_panelizer_page', TRUE);
}

/**
 * Revert feature component.
 */
function nas_master_update_7126() {
  features_revert(array('nas_article_feature' => array('panelizer_defaults')));
}

/**
 * Revert feature and enable and uninstall modules.
 */
function nas_master_update_7127() {
  $uninstall = array('ds');
  module_disable($uninstall);
  drupal_uninstall_modules($uninstall);
  features_revert_module('nas_view_modes_feature');

  $enable = array('fast_404');
  module_enable($enable);
}

/**
 * Revert features.
 */
function nas_master_update_7128() {
  features_revert_module('nas_image_styles_feature');
  $image_style_names = array('nas_bird_teaser_illustration', 'article_teaser');
  foreach ($image_style_names as $image_style_name) {
    $image_style = image_style_load($image_style_name);
    image_style_flush($image_style);
  }
  features_revert(array('nas_view_modes_feature' => array('file_display')));
  features_revert(array('nas_site_template_feature' => array('page_manager_handlers')));

  ctools_include('export');
  if ($handlers = ctools_export_load_object('page_manager_handlers', 'conditions', array(
    'task' => 'page',
    'subtask' => 'frontpage2'
  ))
  ) {
    $handler = reset($handlers);
    $did = $handler->conf['did'];
    // Insert 'Stay abreast' pane into 'Footer' region of frontpage panel.
    db_insert('panels_pane')
      ->fields(array(
        'did' => $did,
        'panel' => 'footer',
        'type' => 'nas_stay_abreast_pane',
        'subtype' => 'nas_stay_abreast_pane',
        'shown' => 1,
        'access' => serialize(array()),
        'configuration' => serialize(array(
          'headline' => 'Stay abreast of Audubon',
          'caption' => 'Our email newsletter shares the latest programs and initiatives.',
          'override_title' => 0,
          'override_title_text' => '',
        )),
        'cache' => serialize(array()),
        'style' => serialize(array('settings' => NULL)),
        'css' => serialize(array()),
        'extras' => serialize(array()),
        'position' => 0,
        'locks' => serialize(array()),
      ))
      ->execute();
    // Insert 'Footer' pane into 'Footer' region of frontpage panel.
    db_insert('panels_pane')
      ->fields(array(
        'did' => $did,
        'panel' => 'footer',
        'type' => 'nas_footer_pane',
        'subtype' => 'nas_footer_pane',
        'shown' => 1,
        'access' => serialize(array()),
        'configuration' => serialize(array(
          'logo_path' => 'public://footer-logo.png',
          'title' => 'National Audubon Society',
          'mission' => 'Our mission is to conserve and restore natural ecosystems, focusing on birds, other wildlife, and their habitats for the benefit of humanity and the earth’s biological diversity.',
          'copyright' => 'Copyright © 2014 National Audubon Society, Inc.',
          'override_title' => 0,
          'override_title_text' => '',
        )),
        'cache' => serialize(array()),
        'style' => serialize(array('settings' => NULL)),
        'css' => serialize(array()),
        'extras' => serialize(array()),
        'position' => 1,
        'locks' => serialize(array()),
      ))
      ->execute();
  }
}

/**
 * Flush all image styles.
 *
 * Revert features.
 */
function nas_master_update_7129() {
  features_revert_module('nas_image_styles_feature');
  $styles = image_styles();
  foreach ($styles as $style) {
    image_style_flush($style);
  }
  features_revert_module('nas_slideshow_feature');
  _nas_master_update_7129_update_frontpage_engagement_card();
}

/**
 * Helper function to keep hook_update_n code clean.
 */
function _nas_master_update_7129_update_frontpage_engagement_card() {
  ctools_include('export');
  $handlers = ctools_export_load_object('page_manager_handlers', 'conditions', array(
    'task' => 'page',
    'subtask' => 'frontpage2',
  ));
  if ($handlers) {
    $handler = reset($handlers);
    // Look up pane.
    $query = db_select('panels_pane', 'pp')
      ->fields('pp', array('pid', 'configuration'))
      ->condition('panel', 'more_headlines')
      ->condition('subtype', 'engagement_cards_sidebar')
      ->condition('did', $handler->conf['did'])
      ->execute();
    if ($pane = $query->fetchObject()) {
      // Update configuration.
      $pane->configuration = unserialize($pane->configuration);
      $pane->configuration['default'] += array(
        'equalize_height' => 1,
        'show_social_icons' => 1,
        'social_icons' => array(
          'twitter' => 'https://twitter.com/audubonsociety',
          'facebook' => 'https://www.facebook.com/NationalAudubonSociety',
          'instagram' => 'http://instagram.com/audubonsociety',
        ),
      );
      // Save to DB.
      db_update('panels_pane')
        ->fields(array('configuration' => serialize($pane->configuration)))
        ->condition('pid', $pane->pid)
        ->execute();
    }
  }
}

/**
 * Revert features.
 */
function nas_master_update_7130() {
  features_revert_module('nas_image_styles_feature');
  $style = image_style_load('article_featured');
  image_style_flush($style);
  features_revert(array('nas_search_feature' => array('views_view')));
}

/**
 * Revert features and update file text fields format.
 */
function nas_master_update_7131() {
  features_revert(array('nas_bird_type_feature' => array('field_instance')));
  $query = db_update('field_data_field_file_credit')
    ->fields(array('field_file_credit_format' => 'html'))
    ->execute();
  $query = db_update('field_revision_field_file_credit')
    ->fields(array('field_file_credit_format' => 'html'))
    ->execute();
  $query = db_update('field_data_field_file_caption')
    ->fields(array('field_file_caption_format' => 'html'))
    ->execute();
  $query = db_update('field_revision_field_file_caption')
    ->fields(array('field_file_caption_format' => 'html'))
    ->execute();
}

/**
 * Revert features.
 */
function nas_master_update_7132() {
  features_revert(array('nas_article_feature' => array('views_view')));
  features_revert(array('nas_birds_family_feature' => array('page_manager_handlers')));
}

/**
 * Revert features.
 */
function nas_master_update_7133() {
  features_revert(array('nas_article_feature' => array('panelizer_defaults')));
  features_revert(array('nas_conservation_project_feature' => array('panelizer_defaults')));
  features_revert(array('nas_static_page_feature' => array('panelizer_defaults')));
}

/**
 * Revert features.
 */
function nas_master_update_7134() {
  features_revert(array(
    'nas_bird_type_feature' => array(
      'field_base',
      'field_instance'
    )
  ));
}

/**
 * Revert features.
 */
function nas_master_update_7135() {
  features_revert(array('nas_article_feature' => array('field_base')));
  module_enable(array('ajax_error_suppress'));
}

/**
 * Download GeoLite2 city database. Revert features.
 */
function nas_master_update_7136() {
  $result = drupal_http_request('http://nas.wearepropeople.md/cache/GeoLite2-City.mmdb');
  file_unmanaged_save_data($result->data, 'public://GeoLite2-City.mmdb', FILE_EXISTS_REPLACE);

  features_revert(array('nas_solr_feature' => array('search_api_index')));
  features_revert(array('nas_search_feature' => array('views_view')));
}

/**
 * Revert features, delete field_wysiwyg_slideshow_title field.
 */
function nas_master_update_7137() {
  features_revert_module('nas_beans_feature');
  field_delete_field('field_wysiwyg_slideshow_title');
}

/**
 * Set country of location address field.
 */
function nas_master_update_7138() {
  db_query('UPDATE {field_data_field_location_address} SET field_location_address_country = :country', array(':country' => 'US'));
  db_query('UPDATE {field_revision_field_location_address} SET field_location_address_country = :country', array(':country' => 'US'));
}

/**
 * Fix BOA images.
 *
 * BOA images have incorrect URI in database with triple "/".
 */
function nas_master_update_7139() {
  $needle = 'public:///';
  $replace = 'public://';
  db_update('file_managed')
    ->expression('uri', 'replace(uri, :needle, :replace)', array(
      ':needle' => $needle,
      ':replace' => $replace
    ))
    ->condition('uri', db_like($needle) . '%', 'LIKE')
    ->execute();
}

/**
 * Update articles layout.
 */
function nas_master_update_7140(&$sandbox) {
  $chunk = 100;
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    // Lookup nids of Article nodes with Standart Hero Photo panelizer layout
    // that have no hero images uploaded.
    $q = db_select('node', 'n');
    $q->innerJoin('panelizer_entity', 'pe', 'pe.entity_id = n.nid AND pe.entity_type = :entity_type', array(':entity_type' => 'node'));
    $q->leftJoin('field_data_field_hero_image', 'hi', 'hi.entity_id = n.nid AND hi.entity_type = :entity_type and hi.deleted = :deleted', array(
      ':entity_type' => 'node',
      ':deleted' => 0,
    ));
    $q->addField('n', 'nid');
    $q->condition('n.type', 'article');
    $q->condition('n.status', 1);
    $q->condition('pe.name', 'node:article:big_image');
    $q->isNull('hi.entity_id');
    $sandbox['nids'] = $q->execute()->fetchAllKeyed(0, 0);
    $sandbox['max'] = count($sandbox['nids']);
  }

  if (!empty($sandbox['max'])) {
    // Get part of ids.
    $nids = array_slice($sandbox['nids'], $sandbox['progress'], $chunk);
    $sandbox['progress'] += count($nids);
    // Set nodes' panelizer layout to default.
    db_update('panelizer_entity')
      ->fields(array(
        'name' => 'node:article:default',
      ))
      ->condition('entity_id', $nids)
      ->condition('entity_type', 'node')
      ->execute();
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count birds images and related birds remigrated.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Replace incorrect links and image sources.
 */
function nas_master_update_7141() {
  foreach (array('field_data_body', 'field_revision_body') as $table) {
    // ://audubon.wearepropeople.md/ -> ://audubon.prod.acquia-sites.com/ .
    db_update($table)
      ->expression('body_value', 'replace(body_value, :old, :new)', array(
        ':old' => '://audubon.wearepropeople.md/',
        ':new' => '://audubon.prod.acquia-sites.com/'
      ))
      ->condition('body_value', '%://audubon.wearepropeople.md/%', 'LIKE')
      ->execute();
    // ://nas.wearepropeople.md/staging/ -> ://www.audubon.org/.
    db_update($table)
      ->expression('body_value', 'replace(body_value, :old, :new)', array(
        ':old' => '://nas.wearepropeople.md/staging/',
        ':new' => '://www.audubon.org/'
      ))
      ->condition('body_value', '%://nas.wearepropeople.md/staging/%', 'LIKE')
      ->execute();
  }
}

/**
 * Revert features.
 */
function nas_master_update_7142() {
  features_revert_module('nas_views_feature');
  ga_stats_update_counts();
  features_revert(array('nas_conservation_strategy_feature' => array('views_view')));
  module_enable(array('entitycache'));
}

/**
 * Revert features.
 */
function nas_master_update_7143() {
  features_revert(array('nas_article_feature' => array('panelizer')));
  features_revert(array('nas_location_feature' => array('views_view')));
  registry_rebuild();
  // Remove default Map code.
  $map_html = '<iframe frameborder="0" height="100%" width="100%" marginheight="0" marginwidth="0" scrolling="no" src="http://audubon.maps.arcgis.com/home/webmap/embedViewer.html?webmap=e47c7387f97d4f6f8f691e1c73e31a00&amp;extent=-74.1592,40.6498,-73.6521,40.8761"></iframe>';
  db_delete('field_data_field_article_map')
    ->condition('field_article_map_value', $map_html, '=')
    ->execute();
  db_delete('field_revision_field_article_map')
    ->condition('field_article_map_value', $map_html, '=')
    ->execute();
}

/**
 * Enable modules.
 */
function nas_master_update_7145() {
  module_enable(array('entity_modified', 'render_cache'));
}

/**
 * Enable CAPTCHA, reCAPTCHA, nas_captcha_feature.
 *
 * Revert nas_captcha_feature.
 */
function nas_master_update_7144() {
  module_enable(array('captcha', 'recaptcha', 'nas_captcha_feature'));
  features_revert_module('nas_captcha_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7146() {
  features_revert(array(
    'nas_article_feature' => array(
      'panelizer',
      'field_instance'
    )
  ));
  features_revert(array('nas_magazine_issue_feature' => array('field_instance')));
  features_revert(array('nas_conservation_project_feature' => array('field_instance')));
  features_revert(array('nas_slideshow_feature' => array('field_instance')));
  features_revert(array('nas_static_page_feature' => array('field_instance')));
  module_enable(array('transliteration'));
  features_revert_module('nas_overrides_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7147() {
  module_enable(array('transliteration'));
  features_revert_module('nas_overrides_feature');
}

/**
 * Fix all URLs for nodes.
 */
function nas_master_update_7148(&$sandbox) {
  $chunk = 100;
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $q = db_select('node', 'n');
    // This ugly join helps to select the alias for the nodes right away.
    $q->innerJoin('url_alias', 'path', 'path.source = CONCAT(:node, n.nid)', array(':node' => 'node/'));
    $q->addField('n', 'nid');
    $q->condition('n.status', 1);
    // Finnaly, this ugly condition aims to do an heuristic and select only
    // nodes that have weird URLs for regenerating aliases.
    $q->where('NOT path.alias REGEXP :regexp', array(':regexp' => '^[A-Za-z0-9,./-]*$'));
    $sandbox['nids'] = $q->execute()->fetchCol();
    $sandbox['max'] = count($sandbox['nids']);
  }

  if (!empty($sandbox['max'])) {
    // Get part of ids.
    $nids = array_slice($sandbox['nids'], $sandbox['progress'], $chunk);

    module_load_include('inc', 'pathauto', 'pathauto');
    pathauto_node_update_alias_multiple($nids, 'update');
    $sandbox['progress'] += count($nids);
    drupal_set_message(t('Processed @count / @max nodes', array(
      '@count' => $sandbox['progress'],
      '@max' => $sandbox['max']
    )));
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count nodes had URLs checked and fixed.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Revert features.
 */
function nas_master_update_7149() {
  module_enable(array('transliteration'));
  features_revert_module('nas_overrides_feature');
}

/**
 * Enable module, revert feature.
 */
function nas_master_update_7150() {
  module_enable(array('search_api_autocomplete'));
  features_revert(array(
    'nas_solr_feature' => array(
      'search_api_index',
      'search_api_autocomplete_search',
      'user_permission'
    )
  ));
}

/**
 * Enable modules, revert features.
 */
function nas_master_update_7151() {
  module_enable(array('lazyloader', 'views_infinite_scroll'));
  features_revert_module('nas_overrides_feature');
}

/**
 * Enable modules, revert features.
 */
function nas_master_update_7152() {
  module_enable(array('pasteformat'));
  features_revert_module('nas_text_format_feature');
}

/**
 * Enable modules, revert features.
 */
function nas_master_update_7153() {
  module_enable(array('twitter_typeahead'));
  module_disable(array('search_api_autocomplete'));
  drupal_uninstall_modules(array('search_api_autocomplete'));
  features_revert_module('nas_solr_feature');
}

/**
 * Revert feature.
 */
function nas_master_update_7154() {
  features_revert_module('nas_birds_guide_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7155() {
  features_revert_module('nas_text_format_feature');
}

/**
 * Revert feature.
 */
function nas_master_update_7156() {
  features_revert_module('nas_birds_guide_feature');
}

/**
 * Update articles without hero and editorial card images.
 */
function nas_master_update_7157(&$sandbox) {
  // If this is the first pass through this update function then set some variables.
  if (!isset($sandbox['total'])) {
    $query = db_select('node', 'n');
    $query->innerJoin('feeds_item', 'fi', 'n.nid = fi.entity_id AND fi.id = :importer_id AND fi.entity_type = :entity_type', array(
      ':importer_id' => 'news_import',
      ':entity_type' => 'node',
    ));
    $query->condition('n.type', 'article');
    $query->fields('fi', array('entity_id', 'guid'));
    $sandbox['total'] = $query->execute()->rowCount();
    $sandbox['current'] = 0;
    variable_set('nas_cached_files_folder', variable_get('file_temporary_path'));
  }

  // How many nodes should be processed per pass. The higher this number is, the faster your update will
  // complete, but the more likely your server will run out of memory or timeout.
  $chunk = 50;

  // Get the nodes to process during this pass.
  $query = db_select('node', 'n');
  $query->innerJoin('feeds_item', 'fi', 'n.nid = fi.entity_id AND fi.id = :importer_id AND fi.entity_type = :entity_type', array(
    ':importer_id' => 'news_import',
    ':entity_type' => 'node',
  ));
  $query->condition('n.type', 'article');
  $query->fields('fi', array('entity_id', 'guid'));
  $query->range($sandbox['current'], $chunk);
  $results = $query->execute()->fetchAll();
  foreach ($results as $nids) {
    $node = node_load($nids->entity_id);
    $get_field_hero_image = field_get_items('node', $node, 'field_hero_image');
    if (empty($get_field_hero_image)) {
      $data = new stdClass();
      $data->entity_id = $nids->entity_id;
      $data->guid = $nids->guid;
      $data = array($data);
      _nas_import_update_mag_issue_articles($data);
    }
    $sandbox['current']++;
  }

  // Set the value for finished. If current == total then finished will be 1, signifying we are done.
  $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);

  if ($sandbox['#finished'] === 1) {
    watchdog('nas_master', '@count magazine issue articles hero and editorial card images were updated.', array('@count' => $sandbox['current']));
  }
}

/**
 * Revert About feature.
 */
function nas_master_update_7158() {
  features_revert_module('nas_about_feature');
}

/**
 * Revert features.
 */
function nas_master_update_7159() {
  features_revert_module('nas_beans_feature');
  features_revert_module('nas_text_format_feature');
}

/**
 * Enable Fast Permissions Administration module.
 */
function nas_master_update_7160() {
  module_enable(array('fpa'));
}

/**
 * Revert features.
 */
function nas_master_update_7161() {
  features_revert_module('nas_overrides_feature');
  features_revert(array('nas_birds_family_feature' => array('views_view')));
  features_revert(array('nas_birds_priority_feature' => array('views_view')));
}

/**
 * Disable Display cache module.
 */
function nas_master_update_7162() {
  module_disable(array('display_cache'));
}

/**
 * Enable Events feature.
 */
function nas_master_update_7163() {
  module_enable(array('nas_event_feature'));
}

/**
 * Revert News page feature.
 */
function nas_master_update_7164() {
  features_revert_module('nas_news_page_feature');
}

/**
 * Revert Events feature.
 */
function nas_master_update_7165() {
  features_revert_module('nas_event_feature');
}

/**
 * Revert Events feature.
 */
function nas_master_update_7166() {
  field_delete_field('field_event_location');
  features_revert_module('nas_event_feature');
  features_revert_module('nas_views_feature');
  module_enable(array('nas_events'));
  ctools_include('export');
  $handlers = ctools_export_load_object('page_manager_handlers', 'conditions', array(
    'name' => 'term_view_panel_context',
  ));
  if ($handlers) {
    $handler = reset($handlers);
    $handler->conf['body_classes_to_add'] = 'page-taxonomy-term-tags';
    $conf = serialize($handler->conf);
    db_update('page_manager_handlers')
      ->fields(array('conf' => $conf))
      ->condition('name', 'term_view_panel_context')
      ->execute();
  }
}

/**
 * Revert features.
 */
function nas_master_update_7167() {
  module_enable(array('date_ical', 'nas_calendar_download_view_feature'));
  features_revert_module('nas_event_feature');
}

/**
 * Revert Events feature.
 */
function nas_master_update_7168() {
  features_revert_module('nas_static_page_feature');
  features_revert_module('nas_slideshow_feature');
}

/**
 * Enable and revert Events landing page related features.
 */
function nas_master_update_7169() {
  module_enable(array(
    'date_views',
    'nas_events_landing_feature',
    'jquery_colorpicker'
  ));
  module_enable(array('nas_video_page_feature'));
  features_revert(array(
    'nas_solr_feature' => array('search_api_index', 'facetapi'),
    'nas_image_styles_feature' => array('image'),
    'nas_site_template_feature' => array('page_manager_handlers'),
    'nas_search_feature' => array('views_view'),
  ));

  ctools_include('export');
  $handlers = ctools_export_load_object('page_manager_handlers', 'conditions', array(
    'name' => 'page_frontpage2_panel_context',
  ));
  if ($handlers) {
    $handler = reset($handlers);
    $query = db_select('panels_pane');
    $query->addField('panels_pane', 'configuration');
    $query->condition('type', 'nas_panes_frontpage_featured');
    $query->condition('did', $handler->conf['did']);
    $conf = $query->execute()->fetchField();
    $conf = unserialize($conf);

    // Update Frontpage featured panel pane configuation.
    $conf['variant'] = 'curtain_simple';

    $fields = array(
      'image',
      'title',
      'title_link',
      'blue_text',
      'blue_text_link',
      'summary'
    );
    $conf['curtain_simple'] = array();
    foreach ($fields as $field) {
      $conf['curtain_simple'][$field] = $conf[$field];
      unset($conf[$field]);
    }
    $query = db_update('panels_pane');
    $query->fields(array('configuration' => serialize($conf)));
    $query->condition('type', 'nas_panes_frontpage_featured');
    $query->condition('did', $handler->conf['did']);
    $query->execute();
  }
}

/**
 * Enable NAS field max length module and increasing slideshow subtitle length.
 */
function nas_master_update_7170() {
  // Remove in favor of nas_sla.
}

/**
 * Enable Panelizer Layout Thumbnails module for changing type of choosing layouts.
 */
function nas_master_update_7171() {
  // Remove in favor of nas_sla.
}

/**
 * Enable Export birds module.
 */
function nas_master_update_7172() {
  module_enable(array('nas_export_birds'));
}

/**
 * Revert feature.
 */
function nas_master_update_7173() {
  module_enable(array('email'));
  module_enable(array('phone'));
  features_revert_module('nas_location_feature');
}

/**
 * Revert feature.
 */
function nas_master_update_7174() {
  if (!isset($_ENV['AH_SITE_ENVIRONMENT']) || $_ENV['AH_SITE_ENVIRONMENT'] !== 'prod') {
    features_revert_module('nas_news_page_feature');
  }
  features_revert_module('nas_static_page_feature');
  features_revert(array('nas_article_feature' => array('field_instance')));
  // Move Disquss pane to the own panel.
  db_update('panels_pane')
    ->fields(array('position' => 0, 'panel' => 'comments'))
    ->condition('subtype', 'disqus-disqus_comments')
    ->execute();

  // Create new pane and configure content and visibility settings.
  $new_pane = panels_new_pane('entity_field', 'node:field_file_attachments', TRUE);
  if ($new_pane) {
    // Set up content.
    $new_pane->configuration['label'] = 'hidden';
    $new_pane->configuration['formatter'] = 'file_default';
    $new_pane->configuration['formatter_settings'] = array();
    $new_pane->configuration['context'] = 'panelizer';
    $new_pane->configuration['override_title'] = 0;
    $new_pane->configuration['override_title_text'] = '';
    $new_pane->configuration['override_title_heading'] = 'h2';
    // Select all Articles default panelizers.
    $db_or = db_or()
      ->condition('p.name', 'node:article:fullscreen_image')
      ->condition('p.name', 'node:article:inline_hero_photo')
      ->condition('p.name', 'node:article:big_image')
      ->condition('p.name', 'node:article:default')
      ->condition('p.name', 'node:article:press_release')
      ->condition('p.name', 'node:article:map');
    $query = db_select('panelizer_defaults', 'p')
      ->fields('p', array('did'))
      ->condition($db_or);
    $dids1 = $query->execute()->fetchAll();
    // Select all overriden Articles panelizers.
    $db_or = db_or()
      ->condition('p.layout', 'nas_article_default', '=')
      ->condition('p.layout', 'nas_article_inline_hero_image', '=')
      ->condition('p.layout', 'nas_article_big_image')
      ->condition('p.layout', 'nas_article_fullscreen')
      ->condition('p.layout', 'nas_article_map');
    $query = db_select('panels_display', 'p')
      ->fields('p', array('did'))
      ->condition($db_or);
    $dids2 = $query->execute()->fetchAll();
    // Save pane to the all provided panel_displays.
    $result = array_merge($dids1, $dids2);
    foreach ($result as $value) {
      // Load the panel display to add the new pane.
      $did = $value->did;
      if (is_numeric($did)) {
        $display = panels_load_display($did);
        if ($display) {
          $display->add_pane($new_pane, 'file_attachments');
          panels_save_display($display);
        }
      }
      else {
        drupal_set_message(t('Incorrect reference to panels display'), 'warning', FALSE);
        watchdog('nas_install', 'did passed to panels_load_display is not int - @did.', array('@did' => $did));
      }
    }
  }
  else {
    drupal_set_message(t('Failed to create new pane.'), 'warning', FALSE);
  }
}

/**
 * Update nodes, remove duplicated contact nodes.
 */
function nas_master_update_7175(&$sandbox) {
  module_load_include('inc', 'nas_master', 'includes/nas_master.7175');
  $chunk = 1;
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    // TODO: select groups to be updated.
    $sandbox['groups'] = _nas_master_get_duplicated_contacts();
    $sandbox['max'] = count($sandbox['groups']);
  }

  if (!empty($sandbox['max'])) {
    // Get next groups.
    $groups = array_slice($sandbox['groups'], $sandbox['progress'], $chunk);
    foreach ($groups as $group) {
      $_t = microtime(1);
      $stats = _nas_master_contact_group_stats($group->nids);
      // Determine "primary" node.
      $primary_node = _nas_master_get_primary_node_of_group($stats);
      foreach ($group->nids as $nid) {
        // Skip primary node.
        if ($nid == $primary_node->nid) {
          continue;
        }
        // If any articles were referencing to this node change references to
        // primary node.
        if ($stats[$nid]->count > 0) {
          _nas_master_update_references_to_contact_nodes($stats[$nid]->references, $primary_node, $nid);
        }
        node_delete($nid);
      }
      watchdog('nas_master', ':s', array(':s' => 'group updated in ' . (microtime(1) - $_t)));
    }
    $sandbox['progress'] += count($groups);
    drupal_set_message(t('Processed @count / @max groups', array(
      '@count' => $sandbox['progress'],
      '@max' => $sandbox['max']
    )));
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] >= 1) {
    $sandbox['#finished'] = 1;
    watchdog('nas_master', '@count duplicated nodes were processed.', array('@count' => $sandbox['progress']));
  }
}

/**
 * Revert nas_boa_index_feature feature.
 */
function nas_master_update_7176() {
  features_revert_module('nas_overrides_feature');
  features_revert(array(
    'nas_boa_index_feature' => array('views_view', 'page_manager_pages'),
  ));
}

/**
 * Sort helper function.
 *
 * See nas_master_update_7178().
 */
function _nas_master_compare_by_title($a, $b) {
  return strcmp($a['title'], $b['title']);
}

/**
 * Bird call reordering.
 *
 * See https://propeople-us.atlassian.net/browse/ANW-670
 */
function nas_master_update_7178() {
  // Get NID from all birds nodes that have at least 1 audio file.
  $nids = db_query("SELECT nid, title
    FROM {node} node
    LEFT JOIN {field_data_field_bird_audio}
      ON nid = entity_id
      AND entity_type = 'node'
      AND deleted = 0
    WHERE status = '1'
      AND type = 'bird'
      AND field_bird_audio_fid > 0")->fetchAllKeyed();
  foreach ($nids as $nid => $title) {
    $node = node_load($nid);
    // If there is more than 1 audio, sort them.
    if (!empty($node->field_bird_audio) and count($node->field_bird_audio[LANGUAGE_NONE]) > 1) {
      // Put the title of the file in the array for sorting.
      foreach ($node->field_bird_audio[LANGUAGE_NONE] as $key => $field) {
        $filename = db_query('SELECT fm.filename AS filename
          FROM {file_managed} fm
          WHERE fm.fid = :fid',
          array(':fid' => $field['fid']))->fetchField();
        $node->field_bird_audio[LANGUAGE_NONE][$key]['title'] = $filename;
      }
      // Sort the audio files array by title.
      usort($node->field_bird_audio[LANGUAGE_NONE], '_nas_master_compare_by_title');
      // Save the node with the sorted audio files.
      variable_set('menu_rebuild_needed', FALSE);
      lock_acquire('menu_rebuild');
      node_save($node);
      lock_release('menu_rebuild');
    }
  }
}

/**
 * Re-update of missed update 7169, revert features.
 */
function nas_master_update_7179() {
  nas_master_update_7169();
  features_revert_module('nas_image_styles_feature');
  module_enable(array('nas_page_scheduler'));
}

/**
 * NAS63 Article feature revert.
 */
function nas_master_update_7180(&$sandbox) {
  features_revert_module('nas_article_feature');
  features_revert_module('nas_fpp_feature');
}

/**
 * Revert Article feature.
 */
function nas_master_update_7181() {
  features_revert_module('nas_article_feature');
}

/**
 * Remove duplicated file_attachments panes.
 *
 * Update BOA Index view.
 */
function nas_master_update_7183() {
  $query = db_select('panels_pane', 'p')
    ->fields('p', array('did', 'pid'))
    ->condition('p.subtype', 'node:field_file_attachments');
  $pps = $query->execute()->fetchAll();
  $unique_keys = array();
  foreach ($pps as $p) {
    if (!array_key_exists($p->did, $unique_keys)) {
      $unique_keys[$p->did] = $p->pid;
    }
    else {
      db_delete('panels_pane')
        ->condition('pid', $p->pid, '=')
        ->execute();
    }
  }
  features_revert(array('nas_boa_index_feature' => array('views_view')));
}

/**
 * Revert features.
 */
function nas_master_update_7184() {
  module_enable(array('page_manager_search', 'nas_location_view_feature'));
  features_revert(array(
    'nas_search_feature' => array('views_view', 'page_manager_pages'),
    'nas_solr_feature' => array('search_api_index'),
  ));
  // Workaround for empty search index.
  $indexes = entity_load('search_api_index', array('page_manager_pages'));
  $index = reset($indexes);
  $index->queueItems();

  module_enable(array('nas_boa_plates', 'deepzoom'));
  $config = variable_get('deepzoom_config', array());
  $config['engine'] = 'openseadragon';
  variable_set('deepzoom_config', $config);

  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'boa');

  $result = $efq->execute();
  if (isset($result['node'])) {
    $dirname = 'public://deepzoom';
    if (!is_dir($dirname)) {
      mkdir($dirname);
      drupal_chmod($dirname);
    }
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);
    foreach ($nodes as $node) {
      if ($field_items = field_get_items('node', $node, 'field_boa_illustration')) {
        $md5_file = md5_file($field_items[0]['uri']);
        $dzi_filename = $dirname . '/' . $md5_file . '.dzi';
        if (!file_exists($dzi_filename)) {
          file_put_contents($dzi_filename, '');
        }
      }
    }
  }
}

/**
 * Enable Campaign feature, revent features.
 *
 * Add Welcome to Audubon block to all articles.
 */
function nas_master_update_7185() {
  module_enable(array('nas_campaign_feature'));
  features_revert_module('nas_site_template_feature');
  features_revert_module('nas_articles_feature');

  // Create new pane and configure content and visibility settings.
  $new_pane = panels_new_pane('block', 'bean-welcome-to-audubon', TRUE);
  if ($new_pane) {
    // Set up content.
    $new_pane->configuration['override_title'] = 0;
    $new_pane->configuration['override_title_text'] = '';
    $new_pane->configuration['override_title_heading'] = 'h2';

    // Select all overriden Articles panelizers.
    $db_or = db_or()
      ->condition('p.layout', 'nas_article_default', '=')
      ->condition('p.layout', 'nas_article_inline_hero_image', '=')
      ->condition('p.layout', 'nas_article_big_image')
      ->condition('p.layout', 'nas_article_fullscreen')
      ->condition('p.layout', 'nas_article_map');
    $query = db_select('panels_display', 'p')
      ->fields('p', array('did'))
      ->condition($db_or);
    $result = $query->execute()->fetchAll();
    // Save pane to the all provided panel_displays.
    foreach ($result as $value) {
      // Load the panel display to add the new pane.
      $did = $value->did;
      if (is_numeric($did)) {
        $display = panels_load_display($did);
        if ($display) {
          $display->add_pane($new_pane, 'right');
          panels_save_display($display);
        }
      }
      else {
        drupal_set_message(t('Incorrect reference to panels display'), 'warning', FALSE);
        watchdog('nas_install', 'did passed to panels_load_display is not int - @did.', array('@did' => $did));
      }
    }
  }
  else {
    drupal_set_message(t('Failed to create new pane.'), 'warning', FALSE);
  }
}

/**
 * Revert features.
 */
function nas_master_update_7186() {
  features_revert(array('nas_views_feature' => array('views_view')));
  features_revert(array('nas_boa_feature' => array('views_view')));
}

/**
 * Enable IBA feature.
 */
function nas_master_update_7187() {
  module_enable(array('nas_iba_feature'));
  features_revert(array('nas_image_styles_feature'));
}

/**
 * Install multilanguage stack.
 */
function nas_master_update_7190() {
  module_enable(
    array(
      'locale',
      'i18n_panels',
      'variable',
      'nas_localization_feature',
    )
  );
  registry_rebuild();
}

/**
 * Enable localization client.
 */
function nas_master_update_7191() {
  module_enable(
    array(
      'l10n_client',
      'l10n_update',
    )
  );
  features_revert(array(
    'nas_localization_feature' => array(
      'variable'
    )
  ));
  registry_rebuild();
}

/**
 * Install Spanish language.
 */
function nas_master_update_7192() {
  require_once DRUPAL_ROOT . '/includes/locale.inc';
  locale_add_language(
    'es',
    'Spanish',
    'Español'
  );
}

/**
 * Revert localization settings.
 */
function nas_master_update_7193() {
  features_revert(array(
    'nas_localization_feature' => array(
      'variable'
    )
  ));
  registry_rebuild();
}

/**
 * Enable i18n_node_load module.
 */
function nas_master_update_7194() {
  module_enable(
    array(
      'i18n_node_load',
      'translation',
      'i18n_node'
    )
  );
  registry_rebuild();
}

/**
 * Enable translation for all CTs.
 */
function nas_master_update_7195() {
  $types = node_type_get_types();
  $types = array_keys($types);
  foreach ($types as $type) {
    variable_set('i18n_node_extended_' . $type, 1);
    variable_set('i18n_node_options_' . $type, array());
    variable_set('language_content_type_' . $type, '2');
  }
}

/**
 * Enable modules.
 */
function nas_master_update_7196() {
  $modules = array('nas_pm_xmlsitemap', 'hreflang');
  module_enable($modules);
  variable_set('xmlsitemap_multilingual', 1);
}

/**
 * Enable taxonomy translation (localization variant).
 */
function nas_master_update_7197() {
  module_enable(array('i18n_taxonomy'));
  foreach (taxonomy_get_vocabularies() as $vocabulary) {
    $vocabulary->i18n_mode = I18N_MODE_LOCALIZE;
    taxonomy_vocabulary_save($vocabulary);
  }
}

/**
 * Enable menu translation.
 */
function nas_master_update_7198() {
  module_enable(array('i18n_menu'));
  foreach (menu_load_all() as $menu) {
    $menu['i18n_mode'] = I18N_MODE_MULTIPLE;
    menu_save($menu);
  }
}

/**
 * Rebuild theme registry to find new theme function in "calendar_download" pane.
 */
function nas_master_update_7199() {
  drupal_theme_rebuild();
}

/**
 * Clear cache to apply modifications to "events_social_block" pane.
 */
function nas_master_update_7200() {
  cache_clear_all();
}

/**
 * Disable Welcome bean.
 */
function nas_master_update_7201() {
}

/**
 * Enable i18n_pc module.
 */
function nas_master_update_7202() {
  $language_default = array(
    'language' => 'en',
    'name' => 'English',
    'native' => 'English',
    'direction' => 0,
    'enabled' => 1,
    'plurals' => 0,
    'formula' => '',
    'domain' => '',
    'prefix' => '',
    'weight' => 0,
    'javascript' => '',
  );
  $language_default = (object) $language_default;
  variable_set('language_default', $language_default);
  module_enable(
    array(
      'i18n_pc',
    )
  );
  registry_rebuild();
}

/**
 * Delete no longer used variable.
 */
function nas_master_update_7203() {
  variable_del('nas_events_works_images_url');
}

/**
 * Rebuild menu for applying changes in menu items.
 */
function nas_master_update_7204() {
  menu_rebuild();
}

/**
 * Revert nas_boa_index_feature.
 */
function nas_master_update_7205() {
  features_revert(array(
    'nas_boa_index_feature' => array(
      'page_manager_pages',
      'views_view'
    )
  ));
  module_enable(
    array(
      'i18n_field',
    )
  );
  registry_rebuild();
  i18n_string_refresh_group('field');
}

/**
 * Revert nas_boa_index_feature .
 */
function nas_master_update_7206() {
  features_revert(
    array(
      'nas_boa_index_feature' => array(
        'page_manager_pages',
      )
    )
  );
  registry_rebuild();
}

/**
 * Localize path strings.
 */
function nas_master_update_7207() {
  // Look for all top terms in Menu Section vocabulary.
  $vocabulary = taxonomy_vocabulary_machine_name_load('menu_section');
  $terms = taxonomy_get_tree($vocabulary->vid, 0, 1);
  // Load all menu items from main menu.
  $menu_items = menu_load_links('menu-header-big-main-menu');

  // Build paths to localize.
  // @see _nas_token_menu_section()
  $paths = array();
  foreach ($terms as $term) {
    foreach ($menu_items as $menu_item) {
      if (strip_tags($menu_item['link_title']) == strip_tags($term->name)) {
        $paths[] = $menu_item['link_path'];
        break;
      }
    }
  }

  // Localize the paths.
  foreach ($paths as $path) {
    locale($path, NAS_TOKEN_PATH_LOCALIZATION_CONTEXT, 'es');
  }

  // Localize 3 hardcoded path sections used for articles.
  // @see _nas_token_article()
  foreach (array('press-release', 'magazine', 'news') as $string) {
    locale($string, NAS_TOKEN_PATH_LOCALIZATION_CONTEXT, 'es');
  }
}

/**
 * Disabling admin_menu client side caching .
 */
function nas_master_update_7208() {
  variable_set('admin_menu_cache_client', 0);
  cache_clear_all();
}

/**
 * Revert features.
 */
function nas_master_update_7209() {
  features_revert(array(
    'nas_solr_feature' => array('search_api_index', 'facetapi'),
  ));
  // Requeue items in the index.
  $indexes = entity_load('search_api_index', array('page_manager_pages'));
  $index = reset($indexes);
  $index->queueItems();
}

/**
 * Update Bird CT feature.
 */
function nas_master_update_7210() {
  features_revert(array(
    'nas_bird_type_feature' => array('field_base', 'field_instance'),
  ));
}

/**
 * Disable Welcome bean in a right way.
 */
function nas_master_update_7211() {
  module_disable(array('nas_welcome_to_audubon'));
  drupal_uninstall_modules('nas_welcome_to_audubon');
  registry_rebuild();
}

/**
 * Update Event CT feature.
 */
function nas_master_update_7212() {
  features_revert(array(
    'nas_event_feature' => array(
      'field_base',
      'field_instance',
      'feeds_importer_default',
      'strongarm',
      'taxonomy',
      'uuid_term',
      'panelizer',
      'views_default',
    ),
  ));
}

/**
 * Enable Translation redirect module.
 */
function nas_master_update_7213() {
  module_enable(array('i18n_redirect'));
}

/**
 * Enable module, revert feature components.
 */
function nas_master_update_7214() {
  module_enable(array('nas_i18n_file'));
  features_revert(array(
    'nas_bird_type_feature' => array('field_base'),
  ));
}

/**
 * Enable NAS i18n Views module.
 */
function nas_master_update_7215() {
  module_enable(array('nas_i18n_views'));
}

/**
 * Update Event CT and importer - location name field.
 */
function nas_master_update_7216() {
  features_revert(array(
    'nas_events_feature' => array(
      'field_base',
      'field_instance',
      'variable',
      'feeds_importer',
    ),
  ));
}

/**
 * Update aliases.
 */
function nas_master_update_7217() {
  // Localize all hardcoded path sections used for articles.
  // @see _nas_tokens_simple()
  $strings = array(
    'field-guide',
    'bird',
    'conservation',
    'project',
    'magazine',
    'photos'
  );
  foreach ($strings as $string) {
    locale($string, NAS_TOKEN_PATH_LOCALIZATION_CONTEXT, 'es');
  }
  features_revert(
    array(
      'nas_url_aliases_feature' => array(
        'variable',
      ),
    )
  );
}

/**
 * Revert features.
 */
function nas_master_update_7218() {
  features_revert(array('nas_event_feature' => array('variable')));
}

/**
 * Enable variable_store and i18n_variable.
 */
function nas_master_update_7219() {
  module_enable(array(
    'variable_store',
    'i18n_variable'
  ));
}

/**
 * Clone default 404 page into Spanish language.
 */
function nas_master_update_7220() {
  // Define which node is the source,
  // this node has his own id as translation nid (tnid)
  $source_node = node_load(42611);
  $es_node_404 = clone $source_node;
  $source_node->tnid = 42611;
  node_save($source_node);

  unset($es_node_404->nid);
  unset($es_node_404->vid);

  node_object_prepare($es_node_404);
  $es_node_404->title = '[ES] ' . $source_node->title;
  $es_node_404->language = 'es';
  $es_node_404->status = 1;
  // Define source tnid.
  $es_node_404->tnid = 42611;
  node_save($es_node_404);

  // Set created page for been used as 404 for Spanish language.
  variable_set(
    'variable_realm_list_language',
    array('site_name', 'site_slogan', 'site_404')
  );
  variable_store_set('language', 'es', 'site_404', 'node/' . $es_node_404->nid);
}

/**
 * Enable modules.
 */
function nas_master_update_7221() {
  module_disable(array('i18n_redirect'));
  module_enable(array('nas_i18n_redirect'));
}

/**
 * Revert features.
 */
function nas_master_update_7222() {
  features_revert(array('nas_views_feature' => array('views_view')));
}

/**
 * Disable Localization client module.
 */
function nas_master_update_7223() {
  features_revert(array('nas_i18n_permissions_feature' => array('user_permission')));
  module_disable(array('l10n_client'));
}

/**
 * Update bird node default panelizer.
 */
function nas_master_update_7224() {
  features_revert(array('nas_bird_type_feature' => array('panelizer_defaults')));
}

/**
 * Enable NAS theme.
 */
function nas_master_update_7225() {
  theme_enable(array('nas'));
}

/**
 * Add Action for creating Spanish translations.
 */
function nas_master_update_7226() {
  module_enable(array('nas_i18n_actions'));
  features_revert(array('nas_content_administration_page_feature' => array('views_view')));
}

/**
 * Create new menu Donate | Take action and its items.
 */
function nas_master_update_7227() {
  // Create new menu.
  $menu_id = 'menu-header-big-dta-desktop';
  $menu = array(
    'menu_name' => $menu_id,
    'title' => t('Header big donate | take action (desktop)'),
    'description' => '',
    'language' => LANGUAGE_NONE,
    'i18n_mode' => I18N_MODE_MULTIPLE,
  );
  menu_save($menu);

  // Define menu items.
  $menu_items = array(
    'Join' => array(
      'url' => 'https://secure.audubon.org/site/Donation2?df_id=7140&7140.donation=form1&s_src=2015_AUDHP_topbanner-join_test&s_subsrc=website',
      'class' => array(
        'action-nav-link',
        'button',
        'small',
        'tomato',
      ),
      'liclass' => 'action-nav-item',
      'children' => array(
        'Become a Member' => 'https://secure.audubon.org/site/Donation2?df_id=7140&7140.donation=form1&s_src=2015_AUDHP_topbanner-member_test&s_subsrc=website',
        'Renew' => 'https://secure.audubon.org/site/Donation2?df_id=7900&7900.donation=form1&s_src=2015_AUDHP_topbanner-renew_test&s_subsrc=website',
        'Gift Membership' => 'https://secure.audubon.org/site/Donation2?df_id=7320&7320.donation=form1&s_src=2015_AUDHP_topbanner-gift_test&s_subsrc=website',
        'Audubon Near You' => 'audubon-near-you',
      ),
    ),
    'Donate Now' => array(
      'url' => 'https://secure.audubon.org/site/Donation2?df_id=6960&6960.donation=form1&s_src=2015_AUDHP_topbanner-donate_test&s_subsrc=website',
      'class' => array(
        'action-nav-link',
        'button',
        'small',
        'tomatoDk',
      ),
      'liclass' => 'action-nav-item',
      'children' => array(
        'One-time Gift' => 'https://secure.audubon.org/site/Donation2?df_id=6960&6960.donation=form1&s_src=2015_AUDHP_topbanner-one-time_test&s_subsrc=website',
        'Monthly' => 'https://audubon.secure-donor.com/cardinal/choose/?source=header',
        'Online Store' => 'https://secure.audubon.org/site/SPageNavigator/2014_Adoption_Catalog_Homepage.html&s_src=2015_AUDHP_topbanner-store_test&s_subsrc=website',
        'More Ways to Give' => 'how-to-help',
      ),
    ),
    'Take Action' => array(
      'url' => 'takeaction',
      'class' => array(
        'action-nav-link',
        'button',
        'small',
        'tomato',
      ),
      'liclass' => 'action-nav-item',
      'children' => array(
        'Prevent Needless Bird Deaths' => 'https://secure.audubon.org/site/Advocacy?cmd=display&page=UserAction&id=1829&s_src=2015_AUDHP_topbanner_test&s_subsrc=website',
        'Protect America\'s Open Spaces' => 'https://secure.audubon.org/site/Advocacy?cmd=display&page=UserAction&id=1945&s_src=2015_AUDHP_topbanner_test&s_subsrc=website',
        'Act for Greater Sage-Grouse' => 'https://secure.audubon.org/site/Advocacy?cmd=display&page=UserAction&id=1999&s_src=2015_AUDHP_topbanner_test&s_subsrc=website',
      ),
    ),
  );

  $weight = 0;
  foreach ($menu_items as $menu_item_title => $menu_item) {
    $menu_link = array(
      'link_title' => $menu_item_title,
      'link_path' => $menu_item['url'],
      'module' => 'menu',
      'menu_name' => $menu_id,
      'weight' => $weight,
      'plid' => 0,
    );
    if (!empty($menu_item['class'])) {
      $menu_link['options']['attributes']['class'] = $menu_item['class'];
      $menu_link['options']['attributes']['liclass'] = $menu_item['liclass'];
    }
    $mlid = menu_link_save($menu_link);
    $weight++;

    if (empty($menu_item)) {
      continue;
    }

    $inner_weight = -50;
    foreach ($menu_item['children'] as $menu_child_item_title => $menu_child_item_url) {
      $menu_link = array(
        'link_title' => $menu_child_item_title,
        'link_path' => $menu_child_item_url,
        'module' => 'menu',
        'menu_name' => $menu_id,
        'weight' => $inner_weight,
      );
      $menu_link['plid'] = $mlid;
      menu_link_save($menu_link);
      $inner_weight++;
    }
  }
}

/**
 * Update take action page.
 */
function nas_master_update_7228() {
  ctools_include('export');
  $handlers = ctools_export_load_object('page_manager_handlers', 'conditions', array(
    'task' => 'page',
    'subtask' => 'action_center',
  ));
  if ($handlers) {
    $handler = reset($handlers);
    // Look up pane.
    $query = db_select('panels_pane', 'pp')
      ->fields('pp', array('pid', 'configuration'))
      ->condition('panel', 'main')
      ->condition('subtype', 'engagement_cards')
      ->condition('did', $handler->conf['did'])
      ->execute();
    while ($pane = $query->fetchObject()) {
      // Update configuration.
      $pane->configuration = unserialize($pane->configuration);
      $pane->configuration['default'] += array(
        'wrapper' => 1,
      );
      // Save to DB.
      db_update('panels_pane')
        ->fields(array('configuration' => serialize($pane->configuration)))
        ->condition('pid', $pane->pid)
        ->execute();
    }
  }
}

/**
 * Add Social Media Photo for Articles.
 */
function nas_master_update_7229() {
  module_enable(array('nas_social_media_photo'));
  $metatag = metatag_config_load('node:article');
  $metatag->config['og:image']['value'] = '[node:field_social_media_photo:social_media_photo],[node:editorial_card_image:hero_mobile]';
  metatag_config_save($metatag);
}

/**
 * NAS-156: Make Editoral Section a multi-value field.
 */
function nas_master_update_7230() {
  $field = field_info_field('field_custom_section');
  $field['cardinality'] = -1;
  field_update_field($field);
}

/**
 * Creating bird map section.
 */
function nas_master_update_7231() {
  module_enable(array('adbn_map'));
  features_revert(array(
    'nas_bird_type_feature' => array(
      'field_base',
      'field_instance',
      'panelizer_defaults',
      'variable',
    ),
  ));
}

/**
 * Set bird guide blocks default values.
 */
function nas_master_update_7232() {
  $default_value = array(
    'value' => '<p>Text © Kenn Kaufman, adapted from <br><a href="/kaufman"><em>Lives of North American Birds</em></a></p><p>Illustration © David Allen Sibley.<br><a href="/sibley">Learn more about these drawings.</a></p>',
    'format' => 'full_html',
  );

  variable_set('nas_birds_guide-credits-content', array(
    'en' => $default_value,
    'es' => $default_value
  ));

  $img_path = drupal_get_path('theme', 'nas') . '/img';
  $default_value = array(
    'value' => '<h5>Download Our Bird Guide App</h5><p><a href="http://www.audubon.org/ios-app?utm_source=bird-guide&amp;utm_campaign=iosapp" target="_blank"><img src="' . url($img_path . '/apple-store.png') . '" width="110" title="Download the Audubon Bird Guide App on the App Store"></a> <a href="http://www.audubon.org/android-app?utm_source=bird-guide&amp;utm_campaign=android-app" target="_blank"><img src="' . url($img_path . '/google-play.png') . '" width="110" title="Get the Audubon Bird Guide App on Google Play"></a></p>',
    'format' => 'full_html',
  );

  variable_set('nas_birds_guide-download-content', array(
    'en' => $default_value,
    'es' => $default_value
  ));
}

/**
 * Enable NAS Language switcher feature.
 */
function nas_master_update_7233() {
  module_enable(array('nas_language_switcher_feature'));
  features_revert(
    array('nas_site_template_feature' => array('page_manager_handlers'))
  );
}

/**
 * Revert NAS Site Template feature.
 */
function nas_master_update_7234() {
  features_revert(
    array('nas_site_template_feature' => array('page_manager_handlers'))
  );
}

/**
 * Enable Acquia Search Multiple Indexes module.
 */
function nas_master_update_7235() {
  module_enable(array('acquia_search_multi_subs'));
}

/**
 * Fixes for similar birds on Spanish bird nodes.
 */
function nas_master_update_7236() {
  module_enable(array('i18n_sync'));
  features_revert(array(
    'nas_bird_type_feature' => array('panelizer_defaults', 'variable'),
  ));
}

/**
 * Fixes for the Language Switcher on front page.
 */
function nas_master_update_7237() {
  variable_set('variable_realm_list_language',
    array('site_name', 'site_slogan', 'site_404', 'site_frontpage'));
  variable_store_set('language', 'en', 'site_frontpage', 'frontpage');
  variable_store_set('language', 'es', 'site_frontpage', 'inicio');
}

/**
 * Enable Native Plants features.
 */
function nas_master_update_7238() {
  // Update "Default node index" settings.
  features_revert(array(
    'nas_solr_feature' => array('search_api_index'),
  ));

  // Load US ZIP codes information.
  $file = drupal_get_path('module', 'location') . '/database/zipcodes.us.mysql';
  $query = file_get_contents($file);
  db_query($query);

  module_enable(array(
    'postal_code_validation',
    'views_ajax_history',
    'ajax_screen_lock',
    'protected_pages',
    'nas_master_native_plants',
    'nas_native_plants_taxonomy',
    'nas_nursery_ct_feature',
    'nas_nursery_import_feature',
    'nas_permalink_et_feature',
    'nas_native_plants_permalink_page',
    'nas_native_plant_ct_feature',
    'nas_native_plants_search_page_feature',
    'nas_native_plants_image_styles',
    'nas_nurseries_near_you_feature',
    'nas_community_resource_ct_feature',
    'nas_community_resources_near_you_feature',
    'nas_native_plants_email_feature',
    'nas_native_plants_resources_page',
  ));

  // Create taxonomy terms.
  module_load_include('inc', 'nas_master_native_plants', 'nas_master_native_plants.terms');
  nas_master_native_plants_taxonomy_terms_create();

  // Revert features that somehow become overridden.
  features_revert(array(
    'nas_native_plants_email_feature' => array('variable'),
  ));

  // Set AJAX Screen Lock variables.
  variable_set('ajax_screen_lock_popup_timeout', 300000);
  variable_set('ajax_screen_lock_throbber_hide', 1);
  variable_set('ajax_screen_lock_disable_in_admin', 1);
  variable_set('ajax_screen_lock_pages_path', 'native-plants*');

  // Protect Native Plants pages with password.
  module_load_include('inc', 'protected_pages', 'protected_pages.admin');
  $form = array();
  $form_state = array(
    'values' => array(
      'path' => 'native-plants',
      'password' => 'nativeplants',
    ),
  );
  $paths = array(
    'native-plants',
    'native-plants-resources',
  );
  foreach ($paths as $path) {
    $form_state['values']['path'] = $path;
    protected_pages_configure_submit_callback($form, $form_state);
  }
}

/**
 * Enable NAS RSS feature.
 */
function nas_master_update_7239() {
  module_enable(array('nas_rss'));
}

/**
 * Enables events display.
 */
function nas_master_update_7240() {
  // Enabling events page.
  $page = page_manager_cache_load('page-events_landing_page');
  page_manager_page_enable($page, FALSE);
  menu_rebuild();

  // Enabling events block on home.
  variable_set('events_frontpage_enabled', 1);
}

/**
 * Entity translation for FPPs.
 */
function nas_master_update_7241() {
  module_enable(array('entity_translation', 'title'));

  // Entity translation variables.
  variable_set('locale_field_language_fallback', 1);
  variable_set('entity_translation_shared_labels', 1);
  variable_set('entity_translation_entity_types', array(
    'fieldable_panels_pane' => 'fieldable_panels_pane',
    'node' => 0,
    'taxonomy_term' => 0,
    'bean' => 0,
    'file' => 0,
    'user' => 0,
  ));
  variable_set('entity_translation_settings_fieldable_panels_pane__nas_flyway_section', array(
    'default_language' => 'xx-et-default',
    'hide_language_selector' => 0,
    'exclude_language_none' => 1,
    'lock_language' => 0,
    'shared_fields_original_only' => 1,
  ));
}

/**
 * Enable attachments on events.
 */
function nas_master_update_7242() {
  module_enable(array('remote_stream_wrapper'));
  features_revert(array(
    'nas_event_feature' => array(
      'feeds_importer',
      'field_instance',
    ),
  ));
}

/**
 * Enabling events block on home.
 */
function nas_master_update_7243() {
  ini_set('memory_limit', '1024M');
  features_revert(array(
    'nas_event_feature' => array(
      'panelizer_defaults',
    ),
  ));
  variable_set('events_frontpage_enabled', 1);
}

/**
 * Enable FBIA integration.
 */
function nas_master_update_7244() {
  // Prevent rebuilding composer.json.
  variable_set('composer_manager_autobuild_packages', 0);

  // Enable modules.
  module_enable(array(
    'nas_fbia',
    'fb_instant_articles_display',
    'fb_instant_articles_views',
    'nas_fb_instant_articles_feature',
  ), TRUE);

  // Revert features.
  features_revert(array(
    'nas_article_feature' => array('field_instance'),
    'nas_slideshow_feature' => array('field_instance'),
    'nas_fbia' => array('views_view'),
  ));
}

/**
 * Enabling Google AMP link tag.
 */
function nas_master_update_7245() {
  features_revert(array(
    'nas_metatags_feature' => array(
      'metatag',
    ),
  ));
}

/**
 * Enable NAS IBA features.
 */
function nas_master_update_7246() {
  // Clear cache to discover new Feeds parser plugin.
  cache_clear_all();
  module_enable(array(
    'nas_iba_feature',
    'nas_iba_state',
    'nas_iba_import_feeds_feature',
    'nas_iba_redirect',
  ));
  features_revert(array('nas_image_styles_feature'));
  features_revert_module('nas_solr_feature');
  features_revert_module('nas_url_aliases_feature');

  // Delete old redirect for IBA page.
  db_delete('redirect')
    ->condition('source', 'important-bird-areas')
    ->execute();

  // Add redirects for IBA.
  $redirect = new stdClass();

  redirect_object_prepare(
    $redirect,
    array(
      'source' => 'iba',
      'source_options' => array(),
      'redirect' => 'important-bird-areas',
      'redirect_options' => array(),
      'language' => LANGUAGE_NONE,
    )
  );

  redirect_save($redirect);
}

/**
 * Engagement card with form element.
 */
function nas_master_update_7247() {
  features_revert(array(
    'nas_engagement_cards_feature' => array(
      'field_base',
      'field_instance',
      'field_group',
    ),
  ));

  module_enable(array('nas_engagement_cards'));
}

/**
 * Enable Search API DB module and events index.
 */
function nas_master_update_7248() {
  module_enable(array('search_api_db'));
  features_revert(array(
    'nas_events_landing_page_feature' => array('views_view'),
    'nas_event_feature' => array(
      'search_api_index',
      'search_api_server',
    ),
  ));
}

/**
 * Enable nas_panels_ipe module.
 */
function nas_master_update_7249() {
  module_enable(array('nas_panels_ipe'));
}

/**
 * Enable IPE for some pages created via page manager.
 */
function nas_master_update_7250() {
  $exclude = array(
    'frontpage2',
    'frontpage',
    'frontpage2_es_kwbg',
  );
  $task = page_manager_get_task('page');
  $handlers = page_manager_load_task_handlers($task);
  foreach ($handlers as $handler) {
    if ($handler->handler != 'panel_context' || in_array($handler->subtask, $exclude)) {
      continue;
    }
    $handler->conf['pipeline'] = 'ipe';
    page_manager_save_task_handler($handler);
  }
}

/**
 * Enable dfw module.
 */
function nas_master_update_7251() {
  module_enable(array('dfw', 'drupal_firewall_settings_feature'));
}

/**
 * Update Engagement cards CT feature.
 */
function nas_master_update_7252() {
  features_revert(array(
    'nas_engagement_cards_feature' => array(
      'field_base',
      'field_instance',
      'field_group',
      'variable',
    ),
  ));
}

/**
 * Enable NAS Engagement forms, update Engagement cards CT feature.
 */
function nas_master_update_7253() {
  module_enable(array('nas_engagement_forms'));
  features_revert(array(
    'nas_engagement_cards_feature' => array(
      'field_base',
      'field_instance',
      'field_group',
      'variable',
      'image',
    ),
  ));
}

/**
 * Update Static page CT feature.
 */
function nas_master_update_7254() {
  features_revert(array(
    'nas_static_page_feature' => array(
      'field_base',
    ),
  ));
}

/**
 * Update Bird family feature.
 */
function nas_master_update_7255() {
  features_revert(array(
    'nas_birds_family_feature' => array(
      'page_manager_handlers',
      'views_view',
    ),
  ));
}

/**
 * Enable i18n_ctools_custom_content module.
 */
function nas_master_update_7256() {
  module_enable(array('i18n_ctools_custom_content'));
}

/**
 * Update Chapters & Centers CT - nas_location_feature.
 */
function nas_master_update_7257() {
  features_revert(array(
    'nas_location_feature' => array(
      'metatag',
    ),
  ));
}

/**
 * Enable IPE for homepage.
 */
function nas_master_update_7258() {
  $task = page_manager_get_task('page');
  $handlers = array();
  $handlers = array_merge($handlers,
    page_manager_load_task_handlers($task, 'frontpage2'),
    page_manager_load_task_handlers($task, 'frontpage2_es_kwbg'));

  foreach ($handlers as $handler) {
    if ($handler->handler != 'panel_context') {
      continue;
    }
    $handler->conf['pipeline'] = 'ipe';
    page_manager_save_task_handler($handler);
  }
}

/**
 * Output Related pane on article pages.
 */
function nas_master_update_7259() {
  features_revert(array(
    'nas_article_feature' => array(
      'field_instance',
      'field_group',
      'panelizer_defaults',
    ),
  ));
}

/**
 * Revert Event content type related permissions.
 */
function nas_master_update_7260() {
  features_revert(array(
    'nas_event_feature' => array('user_permission'),
  ));
}

/**
 * Revert twitter tag image metatag, Bird CT metatags, add image style.
 */
function nas_master_update_7261() {
  features_revert(array(
    'nas_metatags_feature' => array('metatag'),
    'nas_image_styles_feature' => array('image'),
  ));
}

/**
 * Restore default donate path for Editorial cards river-style listing panes.
 */
function nas_master_update_7262() {
  $panel_type = 'editorial_card_river';
  ctools_include('context');
  ctools_include('plugins');
  $plugin = ctools_get_plugins('ctools', 'content_types', $panel_type);

  $configs = db_select('panels_pane', 'pp')
    ->fields('pp', array('pid', 'configuration'))
    ->condition('pp.type', $panel_type)
    ->execute()
    ->fetchAll();

  foreach ($configs as $config_data) {
    $config = unserialize($config_data->configuration);
    if (!empty($config['donate_path'])) {
      continue;
    }
    $config['donate_path'] = $plugin['defaults']['donate_path'];

    db_update('panels_pane')
      ->fields(array('configuration' => serialize($config)))
      ->condition('type', $panel_type)
      ->condition('pid', $config_data->pid)
      ->execute();
  }
}

/**
 * Revert features.
 */
function nas_master_update_7263() {
  features_revert(array('nas_views_feature' => array('views_view')));
}

/**
 * Enable netX revert features for fields.
 */
function nas_master_update_7264() {
  module_enable(array('netx', 'nas_netx_feature', 'nas_file_entity'));
  features_revert(array('nas_beans_feature' => array('field_instance')));
  features_revert(array('nas_bird_type_feature' => array('field_instance')));
  features_revert(array('cbc_gallery' => array('field_instance')));
  features_revert(array('nas_static_page_feature' => array('field_instance')));
  features_revert(array('nas_article_feature' => array('field_instance')));
  features_revert(array('nas_conservation_project_feature' => array('field_instance')));
  features_revert(array('nas_slideshow_feature' => array('field_instance')));
  features_revert(array('nas_video_page_feature' => array('field_instance')));
  features_revert(array('nas_conservation_strategy_feature' => array('field_instance')));
  features_revert(array('nas_fpp_feature' => array('field_instance')));
  features_revert(array('nas_magazine_issue_feature' => array('field_instance')));
  features_revert(array('nas_native_plants_taxonomy' => array('field_instance')));
  features_revert(array('nas_social_media_photo' => array('field_instance')));
}

/**
 * Enable event date start field in Search API.
 */
function nas_master_update_7265() {
  features_revert(array('nas_solr_feature' => array('search_api_index')));
}

/**
 * Apply changes for events_listing view.
 */
function nas_master_update_7266() {
  features_revert(array('nas_events_landing_feature' => array('views_view')));
}

/**
 * Enable event date start field in Search API.
 */
function nas_master_update_7267() {
  module_load_install('search_api');
  search_api_update_7118();

  features_revert(array('nas_solr_feature' => array('search_api_index')));
}

/**
 * Enable NAS Editorial Grid feature.
 */
function nas_master_update_7268() {
  module_enable(array('nas_editorial_grid_feature'));
}

/**
 * Update NAS File entity feature.
 */
function nas_master_update_7269() {
  features_revert(array(
    'nas_file_entity' => array(
      'file_display',
    ),
  ));
}

/**
 * Enable module Audubon Netx.
 */
function nas_master_update_7270() {
  module_enable(array('audubon_netx'));
}

/**
 * Enable CDN feature.
 */
function nas_master_update_7272() {
  module_enable(array('nas_cdn_feature'));
}

/**
 * Adds Hero Mobile Image field.
 */
function nas_master_update_7273() {
  features_revert(array(
    'nas_article_feature' => array(
      'field_instance',
      'field_group',
    ),
    'nas_conservation_project_feature' => array(
      'field_instance',
      'field_group',
    ),
    'nas_conservation_strategy_feature' => array(
      'field_instance',
      'field_group',
    ),
    'nas_static_page_feature' => array(
      'field_instance',
      'field_group',
    ),
    'nas_image_styles_feature' => array(
      'image',
    ),
  ));
}

/**
 * Enable CDN feature.
 */
function nas_master_update_7274() {
  module_enable(array('nas_cdn_feature'));
}

/**
 * Revert Search feature for add title field.
 */
function nas_master_update_7275() {
  features_revert(array(
    'nas_search_feature' => array(
      'views_view',
    ),
  ));
}

/**
 * Revert IBA State view for add sortable fields.
 */
function nas_master_update_7276() {
  features_revert(array(
    'nas_iba_state' => array(
      'views_view',
    ),
  ));
}

/**
 * Enable Quiz module and dependency module Rules.
 */
function nas_master_update_7277() {
  module_enable(array('rules'));
  module_enable(array('quiz'));
}

/**
 * Adds Hero Mobile Image field.
 */
function nas_master_update_7278() {
  features_revert(array(
    'nas_article_feature' => array(
      'field_base',
      'field_instance',
      'field_group',
    ),
    'nas_conservation_project_feature' => array(
      'field_instance',
      'field_group',
    ),
    'nas_conservation_strategy_feature' => array(
      'field_instance',
      'field_group',
    ),
    'nas_static_page_feature' => array(
      'field_instance',
      'field_group',
    ),
    'nas_image_styles_feature' => array(
      'image',
    ),
  ));
}

/**
 * Enable Quiz configuration feature.
 */
function nas_master_update_7279() {
  module_enable(array('nas_quiz_configuration'));
}

/**
 * Update RSS feature and RSS view modes.
 */
function nas_master_update_7280() {
  features_revert(array(
    'nas_rss' => array('views_view'),
  ));
}

/**
 * Revert feature nas_metatags_feature.
 */
function nas_master_update_7281() {
  features_revert(array(
    'nas_metatags_feature' => array('metatag'),
  ));
}

/**
 * Enable h5p module.
 */
function nas_master_update_7282() {
  module_enable(array(
    'h5p',
    'h5peditor',
    'nas_h5p',
  ));
  features_revert(array(
    'nas_text_format_feature' => array('filter'),
  ));
}

/**
 * Revert Native Plants features.
 */
function nas_master_update_7283() {
  features_revert(array(
    'nas_native_plants_permalink_page' => array('page_manager_pages'),
  ));
}

/**
 * Revert nas_engagement_cards_feature.
 */
function nas_master_update_7284() {
  features_revert(array(
    'nas_engagement_cards_feature' => array(
      'field_instance',
      'field_group',
      'strongarm',
      'variable',
    ),
  ));
}

/**
 * Move value from field_state to field_boa_state for BOA.
 */
function nas_master_update_7285() {
  features_revert(array(
    'nas_boa_feature' => array(
      'field_base',
      'field_instance',
      'field_group',
    ),
    'nas_boa_index_feature' => array(
      'views_view',
    ),
  ));

  $node_load_multiple = node_load_multiple(array(), array('type' => 'boa'));
  foreach ($node_load_multiple as $node) {
    $node->field_boa_state = $node->field_state;
    field_attach_update('node', $node);
  }

  if ($instance = field_info_instance('node', 'field_state', 'boa')) {
    field_delete_instance($instance);
  }

}

/**
 * Turn off auto-add engagement cards to nodequeue.
 */
function nas_master_update_7286() {
  // Qid of engagement_cards from table 'nodequeue_queue'.
  $qid = 1;
  $form_state = array(
    'values' => array(
      'qid' => $qid,
      'auto_add' => 0,
    ),
  );
  auto_nodequeue_nodequeue_edit_queue_form_submit(array(), $form_state);
}

/**
 * Revert content types: article and static page and nas_view.
 */
function nas_master_update_7287() {
  features_revert(array(
    'nas_article_feature' => array(
      'field_instance',
      'field_group',
      'variable',
    ),
    'nas_static_page_feature' => array(
      'field_instance',
      'field_group',
      'variable',
    ),
    'nas_view_feature' => array(
      'views_view',
    ),
  ));
}

/**
 * Revert nas_news feature with .
 */
function nas_master_update_7288() {
  features_revert(array('nas_news' => array('views_view')));
}

/**
 * Enable AMPTheme theme.
 */
function nas_master_update_7289() {
  theme_enable(array(
    'amptheme',
    'nas_amp',
  ));
}

/**
 * Enable AMP module.
 */
function nas_master_update_7290() {
  module_enable(array(
    'amp',
    'nas_amp_feature',
  ));
}

/**
 * Revert Metatags, Article and Static Page features.
 */
function nas_master_update_7291() {
  features_revert(array(
    'nas_metatags_feature' => array('metatag'),
    'nas_article_feature' => array(
      'field_instance',
      'strongarm',
    ),
    'nas_static_page_feature' => array(
      'field_instance',
      'strongarm',
    ),
  ));
}

/**
 * Enable webform_validation module.
 */
function nas_master_update_7292() {
  module_enable(array('webform_validation'));
}

/**
 * Enable NAS Grid Gallery feature.
 */
function nas_master_update_7293() {
  module_enable(array(
    'nas_grid_gallery_feature',
  ));
}

/**
 * Enable conservation news feature.
 *
 * Turn on ability to export taxonomy terms, enable fe_date.
 */
function nas_master_update_7294() {
  $taxonomy_settings = array(
    'conservation_news_tracker' => 'conservation_news_tracker',
  );
  variable_set('uuid_features_entity_taxonomy_term', $taxonomy_settings);
  module_enable(array('fe_date', 'nas_conservation_news_feature'));
}

/**
 * Revert nas_conservation_news_feature.
 */
function nas_master_update_7295() {
  $name = 'nas_conservation_news_feature';
  module_disable(array($name));
  drupal_uninstall_modules(array($name));
  module_enable(array($name));
}

/**
 * Enable panels_revision.
 */
function nas_master_update_7296() {
  module_enable(array(
    'panels_revision',
  ));
}

/**
 * Enable NAS Emoji module.
 */
function nas_master_update_7297() {
  module_enable(array(
    'nas_emoji',
  ));
}

/**
 * Revert nas_conservation_news_feature.
 */
function nas_master_update_7298() {
  features_revert(array(
    'nas_conservation_news_feature' => array(
      'field_instance',
      'strongarm',
      'views_default'
    )
  ));
  variable_set('xmlsitemap_settings_node_conservation_news', array(
    'status' => 0,
    'priority' => 0.5
  ));
}

/**
 * Revert nas_conservation_news_feature and nas_metatags_feature.
 */
function nas_master_update_7299() {
  features_revert(array(
    'nas_conservation_news_feature' => array('field_instance'),
    'nas_metatags_feature' => array('metatag')
  ));
}

/**
 * Revert nas_beans_feature.
 */
function nas_master_update_7300() {
  features_revert(array(
    'nas_beans_feature' => array(
      'field_base',
      'field_instance',
    ),
  ));
}

/**
 * Enable nas_content_lock.
 */
function nas_master_update_7301() {
  module_enable(array(
    'nas_content_lock',
  ));
}

/**
 * Revert nas_engagement_cards_feature, nas_overrides_feature;
 *
 * Enable nas_mobapp_endpoint.
 */
function nas_master_update_7302() {
  features_revert(array(
    'nas_engagement_cards_feature' => array(
      'field_base',
      'field_instance',
      'field_group',
    ),
    'nas_overrides_feature' => array(
      'strongarm'
    )
  ));
  module_enable(array(
    'nas_mobapp_endpoint',
  ));
}


/*
 * Revert nas_netx_feature, force new auth on netx.
 */
function nas_master_update_7303() {
  features_revert(array(
    'nas_netx_feature' => array('variable'),
  ));
  variable_set('netx_cookie', "");
}

/*
 * Disable every action integration for native plants search form.
 */
function nas_master_update_7304() {
  // Native plants display id.
  $did = 38621;
  $display = panels_load_display($did);
  if (!empty($display->content)) {
    foreach ($display->content as &$pane) {
      if ($pane->type == 'native_plants_initial_form' && !empty($pane->configuration['nas_external_integration']['provider'])) {
        $pane->configuration['nas_external_integration']['provider'] = '';
        $pane->configuration['nas_external_integration']['embed_script'] = '<div class="ngp-form"
     data-form-url="https://actions.everyaction.com/v1/Forms/S49LshHFBUKAejEkZAfw-g2"
     data-fastaction-endpoint="https://fastaction.ngpvan.com"
     data-inline-errors="true"
     data-fastaction-nologin="true"
     data-databag="everybody">
</div>';
        $pane->configuration['nas_external_integration']['embed_script_js'] = 'https://d1aqhv4sn5kxtx.cloudfront.net/actiontag/at.js
sites/all/modules/custom/nas_master_native_plants/js/nas_master_native_plants.action_tag.js
sites/all/modules/custom/nas_master_native_plants/js/nas_master_native_plants.ajax_screen_lock.js';


      }
    }
  }
  panels_save_display($display);
}

/**
 * Revert nas_article_feature.
 */
function nas_master_update_7305() {
  features_revert(array(
    'nas_article_feature' => array(
      'field_base',
      'field_instance',
      'field_group',
      'panelizer_defaults',
      'strongarm',
    ),
  ));
}

/**
 * Enable Panels Cache Expiration module.
 */
function nas_master_update_7306() {
  module_enable(array('expire_panels'));
}

/**
 * Enable nas_imagecache_token_feature feature. Set proper variable for updated lazyloader.
 */
function nas_master_update_7307() {
  module_enable(array('nas_imagecache_token_feature'));
  variable_set('lazyloader_page_exclude_option', LAZYLOADER_PAGE_EXCLUDE_OPTION);
}

/**
 * Set excluded image styles for lazyloader.
 */
function nas_master_update_7308() {
  $options = array();
  $styles = image_styles();
  foreach ($styles as $style) {
    $options[$style['name']] = $style['name'];
    if ($style['name'] == 'engagement_card' || $style['name'] == 'boa_mail_subscription') {
      $options[$style['name']] = 0;
    }
  }
  variable_set('lazyloader_image_styles', $options);
}

/**
 * Revert nas_file_entity.
 */
function nas_master_update_7309() {
  features_revert(array(
    'nas_file_entity' => array(
      'file_display',
    ),
    'nas_view_modes_feature' => array(
      'file_display',
    ),
  ));
}

/**
 * Enable feeds_entity_processor.
 */
function nas_master_update_7310() {
  module_enable(['feeds_entity_processor']);
}

/**
 * Revert nas_article_feature.
 */
function nas_master_update_7311() {
  features_revert(array(
    'nas_article_feature' => array(
      'field_instance',
      'strongarm',
    ),
  ));
}

/**
 * Revert nas_nurseries_near_you_feature.
 */
function nas_master_update_7312() {
  features_revert(array(
    'nas_nurseries_near_you_feature' => array('views_default'),
  ));
}

/**
 * Generate deppzoom images.
 */
function nas_master_update_7313() {
  if ($_ENV['AH_SITE_ENVIRONMENT'] == 'prod') {
    return;
  }
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'boa');

  $result = $efq->execute();
  if (isset($result['node'])) {
    $dirname = 'public://deepzoom';
    if (!is_dir($dirname)) {
      mkdir($dirname);
      drupal_chmod($dirname);
    }
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);
    foreach ($nodes as $node) {
      if (!$field_items = field_get_items('node', $node, 'field_boa_illustration')) {
        continue;
      }
      if (!file_exists($field_items[0]['uri'])) {
        continue;
      }
      $md5_file = md5_file($field_items[0]['uri']);
      $dzi_filename = $dirname . '/' . $md5_file . '.dzi';
      if (file_exists($dzi_filename)) {
        continue;
      }
      file_put_contents($dzi_filename, '');
    }
  }
}

/**
 * Preparing for generate deppzoom images.
 */
function nas_master_update_7314() {
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'boa');

  $result = $efq->execute();
  $images = array();
  if (isset($result['node'])) {
    $dirname = 'public://deepzoom';
    if (!is_dir($dirname)) {
      mkdir($dirname);
      drupal_chmod($dirname);
    }
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);
    foreach ($nodes as $node) {
      if (!$field_items = field_get_items('node', $node, 'field_boa_illustration')) {
        continue;
      }
      if (!file_exists($field_items[0]['uri'])) {
        continue;
      }
      $md5_file = md5_file($field_items[0]['uri']);
      $images[$md5_file] = $field_items[0]['uri'];
      $md5_file_path = $dirname . '/' . $md5_file . '.dzi';
      if (file_exists($md5_file_path)) {
        $file = file_get_contents($md5_file_path);
        if(empty($file)) {
          file_unmanaged_delete($md5_file_path);
        }
      }
    }
  }
}


/**
 * Enable CT feature.
 */
function nas_master_update_7330() {
  variable_set('nas_conservation_tracker_auth_protection', TRUE);
  variable_set('nas_conservation_tracker_auth_user', 'audubon');
  variable_set('nas_conservation_tracker_auth_pass', 'audubon');

  variable_set('nas_conservation_tracker_endpoint', 'http://www.audubon.org/sites/default/files/conservation-tracker');
  module_enable(array('nas_conservation_tracker'));
  drupal_flush_all_caches();
  features_revert_module('nas_conservation_tracker');
  //drupal_flush_all_caches();
  module_load_install('nas_conservation_tracker');
  nas_conservation_tracker_custom_install();
  module_load_include('module', 'nas_conservation_tracker');

  nas_conservation_tracker_load_species();
}

/**
 * Clear all caches.
 */
function nas_master_update_7331() {
//  drupal_flush_all_caches();
}

/**
 * Enable CT Search feature.
 */
function nas_master_update_7332() {
  cache_set('module_implements', array(), 'cache_bootstrap');
  drupal_static_reset('module_hook_info');
  drupal_static_reset('drupal_alter');
  cache_clear_all('hook_info', 'cache_bootstrap');
  cache_clear_all('system_cache_tables', 'cache');

  module_enable(array('nas_conservation_tracker_search'));
  features_revert_module('nas_conservation_tracker_search');

}

/**
 * Re-index CT Species entity.
 */
function nas_master_update_7333() {
  $index = search_api_index_load('ct_species_index', TRUE);
  $index->reindex();
  search_api_index_items($index);
}

