<?php
/**
 * @file
 * Main file for the NAS Master Native Plants module.
 */

require_once dirname(__FILE__) . '/nas_master_native_plants.forms.inc';

/**
 * Implements hook_menu().
 */
function nas_master_native_plants_menu() {
  $items['admin/config/system/native-plants'] = array(
    'title' => 'Native Plants',
    'description' => 'Configure Native Plants settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nas_master_native_plants_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'nas_master_native_plants.admin.inc',
  );
  $items['admin/config/system/native-plants/settings'] = array(
    'title' => 'Settings',
    'description' => 'Native Plants settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/system/native-plants/cache-clear'] = array(
    'title' => 'Cache',
    'description' => 'Clear Native Plants cache',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nas_master_native_plants_cache_clear'),
    'access arguments' => array('administer site configuration'),
    'file' => 'nas_master_native_plants.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/system/native-plants/csv-update'] = array(
    'title' => 'CSV update',
    'description' => 'Update Native Plants nodes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nas_master_native_plants_csv_update'),
    'access arguments' => array('administer site configuration'),
    'file' => 'nas_master_native_plants.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/system/native-plants/plant-id-update'] = array(
    'title' => 'Plant ID',
    'description' => 'Update Native Plants IDs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nas_master_native_plants_plant_id_update'),
    'access arguments' => array('administer site configuration'),
    'file' => 'nas_master_native_plants.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/system/native-plants/update-tier-1-images'] = array(
    'title' => 'Update images',
    'description' => 'Update Tier 1 plants images',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nas_master_native_plants_update_images'),
    'access arguments' => array('administer site configuration'),
    'file' => 'nas_master_native_plants.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['nas_master_native_plants/native_plant_create'] = array(
    'title' => 'Create Native Plant',
    'description' => 'Native Plant creation callback',
    'page callback' => 'nas_master_native_plants_native_plant_create',
    'access arguments' => array('create native_plant content'),
    'file' => 'nas_master_native_plants.admin.inc',
  );

  $items['native-plants/ajax/%'] = array(
    'title' => 'Native Plants data',
    'description' => 'Native Plants data by ZIP code',
    'page callback' => 'nas_master_native_plants_data_zipcode',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'file' => 'nas_master_native_plants.angular.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_presave().
 */
function nas_master_native_plants_node_presave($node) {
  if ($node->type != 'native_plant') {
    return;
  }

  $plant_id = nas_master_native_plants_generate_plant_id(
    array(
      $node->field_np_scientific_name[LANGUAGE_NONE][0]['value'],
      $node->field_native_plant_family[LANGUAGE_NONE][0]['value'],
    )
  );
  $node->field_native_plant_id[LANGUAGE_NONE][0]['value'] = $plant_id;
  cache_clear_all('native_plants_' . $plant_id, 'cache');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nas_master_native_plants_form_native_plant_node_form_alter(&$form, &$form_state, $form_id) {
  // Disable fields that shouldn't be changed.
  $form['title']['#attributes']['disabled'] = TRUE;
  $disable_fields = array(
    'field_native_plant_common_name',
    'field_np_scientific_name',
    'field_native_plant_family',
    'field_native_plant_id',
  );
  foreach ($disable_fields as $field) {
    $form[$field][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = TRUE;
  }

  // Remove Canada states.
  $states = &$form['field_native_plant_tier1_states'][LANGUAGE_NONE];
  _nas_master_native_plants_remove_canada_states($states);

  // Assign all states if no states selected yet.
  if (!$states['#default_value']) {
    foreach (array_keys($states['#options']) as $tid) {
      $states['#default_value'][] = $tid;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nas_master_native_plants_form_nursery_node_form_alter(&$form, &$form_state, $form_id) {
  _nas_master_native_plants_set_online_states($form['field_nursery_states'][LANGUAGE_NONE], 'field_nursery_online');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nas_master_native_plants_form_community_resource_node_form_alter(&$form, &$form_state) {
  _nas_master_native_plants_set_online_states($form['field_community_resource_states'][LANGUAGE_NONE], 'field_community_res_state_office');
}

/**
 * Specific settings for states field.
 */
function _nas_master_native_plants_set_online_states(&$states, $field_name) {
  _nas_master_native_plants_remove_canada_states($states);

  // Show states checkboxes only if Nursery is online one.
  $states['#states'] = array(
    'visible' => array(
      'input[name^="' . $field_name . '"]' => array(
        'checked' => TRUE,
      ),
    ),
  );
}

/**
 * Helper function to remove Canada states.
 */
function _nas_master_native_plants_remove_canada_states(&$states) {
  $canada_states = array(
    'Ontario',
    'Quebec',
    'Nova Scotia',
    'New Brunswick',
    'Manitoba',
    'British Columbia',
    'Prince Edward Island',
    'Saskatchewan',
    'Alberta',
    'Newfoundland and Labrador',
    'Northwest Territories',
    'Yukon',
    'Nunavut',
  );
  foreach ($states['#options'] as $tid => $name) {
    if (in_array($name, $canada_states)) {
      unset($states['#options'][$tid]);
    }
  }
}

/**
 * Helper function to generate Plant ID.
 */
function nas_master_native_plants_generate_plant_id($params) {
  $params = array_map('trim', $params);
  $plant_id = md5(implode('-', $params));
  return $plant_id;
}

/**
 * Implements hook_theme().
 */
function nas_master_native_plants_theme($existing, $type, $theme, $path) {
  return array(
    'nas_master_native_plants_mail_native_plants_list' => array(
      'variables' => array(
        'permalink' => NULL,
      ),
      'template' => 'templates/nas-master-native-plants-mail-native-plants-list',
    ),
  );
}

/**
 * Helper function to validate form element for US ZIP code.
 */
function nas_master_native_plants_element_validate_zipcode_us($element, &$form_state) {
  if ($element['#value'] == '' || !module_exists('postal_code_validation')) {
    return;
  }

  $validation = postal_code_validation_validate($element['#value'], 'US');
  if ($validation['error']) {
    form_error($element, $validation['error']);
  }
}

/**
 * Helper function to validate form element value is a valid email address.
 */
function nas_master_native_plants_element_validate_email($element, &$form_state) {
  $email = &$element['#value'];
  $email = strtolower(trim($email));
  if (empty($email)) {
    return;
  }

  // Validate email address.
  if (!valid_email_address($email)) {
    form_error($element, t('The e-mail address you specified is not valid.'));
  }
}

/**
 * Helper function to convert ZIP code into County FIPS code.
 */
function nas_master_native_plants_element_validate_zipfips($element, &$form_state) {
  if ($element['#value'] == '' || !variable_get('nas_master_native_plants_zip_fips', 0)) {
    return;
  }

  // Find County FIPS code for the entered ZIP code.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'zipfips')
    ->entityCondition('bundle', 'zipfips')
    ->propertyCondition('zip_code', $element['#value'])
    ->propertyCondition('prevalent_county_flag', 'Y');
  $results = $query->execute();

  if (!isset($results['zipfips'])) {
    form_error($element, t("Sorry, we couldn't find any data for this ZIP code."));
    watchdog('nas_master_native_plants', 'Failed to find County FIPS code for ZIP code @zipcode.', array('@zipcode' => $element['#value']));
    return;
  }

  $zipfips_id = reset($results['zipfips'])->id;
  $zipfips = entity_load('zipfips', array($zipfips_id));
  $county_fips_code = reset($zipfips)->county_fips_code;
  form_set_value($element, $county_fips_code, $form_state);
}

/**
 * Helper function; retrieves image attributions by plantid.
 *
 * @param string $plant_id
 *   MD5 plant hash.
 *
 * @return mixed
 *   Formatted image attribution or FALSE.
 */
function nas_master_native_plants_get_image_attributions_by_plantid($plant_id) {
  if ($np_image_caption_credits = variable_get('np_image_caption_credits', array())) {
    // Check if there is native_plant with this PlantID.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'native_plant')
      ->fieldCondition('field_native_plant_id', 'value', $plant_id);
    $results = $query->execute();
    if (isset($results['node'])) {
      $nid = reset($results['node'])->nid;
      if (!empty($np_image_caption_credits[$nid])) {
        $fake_file = (object) array(
          'type' => 'image',
          'fid' => 0,
          'field_file_caption' => isset($np_image_caption_credits[$nid]['caption']) ? $np_image_caption_credits[$nid]['caption'] : array(),
          'field_file_credit' => isset($np_image_caption_credits[$nid]['credit']) ? $np_image_caption_credits[$nid]['credit'] : array(),
        );
        return _nas_panes_format_image_attribution($fake_file);
      }
    }
  }

  return nas_master_native_plants_get_default_image_attribution();
}

/**
 * Helper function; builds default image attribution.
 *
 * @return string
 *   Formatted image attribution.
 */
function nas_master_native_plants_get_default_image_attribution() {
  $default_credit = variable_get('nas_master_native_plants_default_credit', '');
  $fake_file = (object) array(
    'type' => 'image',
    'fid' => 0,
    'field_file_caption' => array(),
    'field_file_credit' => array(
      LANGUAGE_NONE => array(
        array(
          'value' => $default_credit,
          'safe_value' => check_plain($default_credit),
        ),
      ),
    ),
  );

  return _nas_panes_format_image_attribution($fake_file);
}

/**
 * Helper function for Convio integration.
 */
function nas_master_native_plants_convio_integration($values) {
  // @see https://secure.audubon.org/site/SSurvey?ACTION_REQUIRED=URI_ACTION_USER_REQUESTS&SURVEY_ID=21409
  $url = 'https://secure.audubon.org/site/SSurvey';
  $data = array(
    'cons_info_component' => 't',
    'cons_email' => $values['email'],
    'cons_zip_code' => $values['zipcode'],
    's_rememberMe' => 0,
    'remember_me_opt_in_requested' => 'true',
    // Square feet.
    '3340_21409_2_18300' => $values['square_feet'] ? $values['square_feet'] : 0,
    'denySubmit' => '',
    'ACTION_SUBMIT_SURVEY_RESPONSE' => 'Submit Survey',
    'SURVEY_ID' => '21409',
  );
  $options = array(
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    'method' => 'POST',
    'data' => http_build_query($data),
    'timeout' => 15,
  );
  $result = drupal_http_request($url, $options);
  watchdog('nas_master_native_plants', 'Convio integration - %email entered. Service answer was !answer',
    array(
      '%email' => $values['email'],
      '!answer' => '<pre>' . htmlspecialchars(print_r($result, 1)) . '</pre>',
    )
  );
}

/**
 * Implements hook_mail().
 */
function nas_master_native_plants_mail($key, &$message, $params) {
  if ($key != 'native_plants_list') {
    return;
  }

  // TODO: do we need to do anything else to send HTML correctly? modify headers?
  $message['subject'] = 'Audubon Native Plants list';
  $message['body'][] = theme('nas_master_native_plants_mail_native_plants_list', array(
    'permalink' => $params['permalink'],
  ));
}

/**
 * Implements hook_preprocess_HOOK() for nas_master_native_plants_mail_native_plants_list.
 */
function nas_master_native_plants_preprocess_nas_master_native_plants_mail_native_plants_list(&$variables) {
  $variables['plants'] = drupal_json_decode($variables['permalink']->plants_cart);
  _nas_master_native_plants_preprocess_plants_list($variables);
  foreach ($variables['plants'] as &$plant) {
    $plant['BirdTypesMail'] = array();
    foreach ($plant['BirdTypesValues'] as $bird_type) {
      $plant['BirdTypesMail'][] = l($bird_type['name'], $bird_type['url'], array(
        'absolute' => TRUE,
        'attributes' => array(
          'style' => 'color: #404040; text-decoration: underline; white-space: nowrap;',
        ),
      ));
    }
  }
  $variables['permalink_url'] = url('native-plants/list/' . $variables['permalink']->uuid, array('absolute' => TRUE));

  $page = page_manager_page_load('permalink_page');
  $task = page_manager_get_task($page->task);
  $handlers = page_manager_load_task_handlers($task, $page->name);
  foreach ($handlers as $handler) {
    if ($handler->name === 'page_permalink_page__plant_list_page') {
      break;
    }
  }

  // Load display if it is empty.
  if (empty($handler->conf['display']) && !empty($handler->conf['did'])) {
    $handler->conf['display'] = panels_load_display($handler->conf['did']);
  }
  if (empty($handler->conf['display']->content)) {
    return;
  }

  $order = 1;
  foreach ($handler->conf['display']->content as $pane) {
    switch ($pane->subtype) {
      case 'native_plants_bar':
        $variables['bar_title'] = $pane->configuration['title_desktop'];
        $variables['bar_link'] = $pane->configuration['title_link'];
        $variables['bar_background_color'] = $pane->configuration['background_color'];
        break;

      case 'native_plants_list_description':
        $variables['list_title_' . $order] = $pane->configuration['override_title_text'];
        $variables['list_text_' . $order] = check_markup($pane->configuration['text']['value'], $pane->configuration['text']['format']);
        $variables['list_text_' . $order] = strtr(
          $variables['list_text_' . $order],
          array('!permalink' => l($variables['permalink_url'], $variables['permalink_url']))
        );
        // Convert to absolute URLs.
        $variables['list_text_' . $order] = check_markup($variables['list_text_' . $order], 'absolute_urls');
        $order++;

        break;

      case 'editorial_card_3x':
        $variables['editorial_cards_title'] = $pane->configuration['override_title_text'];
        $variables['editorial_cards'] = array();
        foreach ($pane->configuration['refs'] as $ref) {
          if (!empty($ref['reference']['entity_id']) && $node = node_load($ref['reference']['entity_id'])) {
            // Hackish way to get required node values.
            $vars['node'] = $node;
            $vars['type'] = $node->type;
            $vars['view_mode'] = 'editorial_card_3x';
            nas_preprocess_nodes_editorial_cards($vars);

            $uri = entity_uri('node', $node);
            $uri['options']['absolute'] = TRUE;
            $image = theme('image_style', array(
              'style_name' => 'article_teaser',
              'path' => nas_alters_local_image_uri($vars['image_uri']),
              'alt' => $node->title,
              'style' => 'width: 315px; height: 201px;',
              'attributes' => array(
                'style' => 'width: 315px; height: 201px;',
              ),
            ));
            $variables['editorial_cards'][] = array(
              'url' => url($uri['path'], $uri['options']),
              'title' => $vars['title'],
              'subtitle' => $vars['subtitle'],
              'image_url' => image_style_url('article_teaser', nas_alters_local_image_uri($vars['image_uri'])),
              'image' => $image,
              'linked_image' => l($image, $uri['path'], $uri['options'] + array('html' => TRUE, 'attributes' => array('title' => $node->title))),
              'blue_text_link_url' => isset($vars['blue_text_link_url']) ? url(ltrim($vars['blue_text_link_url'], '/'), array('absolute' => TRUE)) : '',
              'blue_text_link_text' => isset($vars['blue_text_link_text']) ? $vars['blue_text_link_text'] : '',
              'custom_link_text' => $vars['custom_link_text'],
            );
          }
          else {
            continue;
          }
        }
        $variables['editorial_cards'] = array_slice($variables['editorial_cards'], 0, 2);
        break;
    }
  }
}

/**
 * Implements hook_eck_property_types().
 */
function nas_master_native_plants_eck_property_types() {
  return array('big_text' => t('Big text'));
}

/**
 * Implements hook_eck_property_type_schema_alter().
 */
function nas_master_native_plants_eck_property_type_schema_alter(&$schema, $type) {
  if ($type == 'big_text') {
    $schema = array(
      'description' => 'Big text',
      'type' => 'text',
      'size' => 'normal',
    );
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function nas_master_native_plants_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'geocoder' && $plugin_type == 'geocoder_handler') {
    return 'plugins/' . $plugin_type;
  }
  if ($owner == 'feeds_tamper' && $plugin_type == 'plugins') {
    return 'plugins/feeds_tamper';
  }
}

/**
 * Helper function to preprocess plants list.
 */
function _nas_master_native_plants_preprocess_plants_list(&$variables) {
  // Prepare bird types wrappers.
  $np_bird_types_voc = taxonomy_vocabulary_machine_name_load('native_plant_bird_types');
  $np_bird_types_terms = taxonomy_get_tree($np_bird_types_voc->vid, 0, NULL, TRUE);
  $np_bird_types_term_wrappers = array();
  foreach ($np_bird_types_terms as $term) {
    $np_bird_types_term_wrappers[$term->tid] = entity_metadata_wrapper('taxonomy_term', $term);
  }

  // Cycle through each plant and add bird types values.
  foreach ($variables['plants'] as &$plant) {
    $plant['BirdTypes'] = explode(',', $plant['BirdTypes']);
    $plant['BirdTypesValues'] = array();
    $plant['BirdTypesDesktop'] = array();
    $plant['BirdTypesMobile'] = array();

    foreach ($plant['BirdTypes'] as $bird_type_tid) {
      if (!isset($np_bird_types_term_wrappers[$bird_type_tid])) {
        continue;
      }

      $wrapper = $np_bird_types_term_wrappers[$bird_type_tid];
      $bird_type = array(
        'tid' => $wrapper->tid->value(),
        'name' => $wrapper->name->value(),
        'image' => $wrapper->field_np_bird_type_image->value(),
        'url' => $wrapper->field_link->value() ? $wrapper->field_link->value()['url'] : '',
      );
      $plant['BirdTypesValues'][$wrapper->tid->value()] = $bird_type;
      $plant['BirdTypesDesktop'][] = l($bird_type['name'], $bird_type['url'], array('attributes' => array('class' => array('native-plant-bird-category-link'))));
      $plant['BirdTypesMobile'][] = l($bird_type['name'], $bird_type['url']);
    }
  }
}

/**
 * Helper function to convert zipcode into state.
 */
function _nas_master_native_plants_zipcode_to_state($zipcode = '') {
  if (empty($zipcode)) {
    $query_params = drupal_get_query_parameters();
    if (isset($query_params['zipcode'])) {
      $zipcode = $query_params['zipcode'];
    }
  }

  if (empty($zipcode)) {
    return '';
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'zipfips')
    ->entityCondition('bundle', 'zipfips')
    ->propertyCondition('zip_code', $zipcode)
    ->propertyCondition('prevalent_county_flag', 'Y');
  $results = $query->execute();

  if (!isset($results['zipfips'])) {
    return '';
  }

  $zipfips_id = reset($results['zipfips'])->id;
  $zipfips = entity_load('zipfips', array($zipfips_id));

  return reset($zipfips)->state_code;
}

/**
 * Helper function to check if a zipcode relates to Hawaii state.
 *
 * @param string $zipcode
 *   The zipcode.
 *
 * @return bool
 *   The zipcode relates to Hawaii states.
 */
function _nas_master_native_plants_zipcode_is_hawaii($zipcode = '') {
  return _nas_master_native_plants_zipcode_to_state($zipcode) == 'HI';
}

/**
 * Implements hook_feeds_presave().
 */
function nas_master_native_plants_feeds_presave(FeedsSource $source, $entity, $item) {
  switch ($entity->feeds_item->id) {
    case 'nurseries':
      $entity->field_nursery_online[LANGUAGE_NONE][0]['value'] = 0;
      if (!empty($item['supply area'][0])) {
        $entity->field_nursery_online[LANGUAGE_NONE][0]['value'] = 1;
      }
      break;
  }
}

/**
 * Implements hook_library().
 */
function nas_master_native_plants_library() {
  $libraries['angularjs'] = array(
    'title' => 'AngularJS',
    'website' => 'https://angularjs.org/',
    'version' => '1.6.1',
    'js' => array(
      '//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.min.js' => array(
        'type' => 'external',
      ),
    ),
  );
  $libraries['angularjs-touch'] = array(
    'title' => 'AngularJS Touch',
    'website' => 'https://angularjs.org/',
    'version' => '1.6.1',
    'js' => array(
      '//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular-touch.min.js' => array(
        'type' => 'external',
      ),
    ),
    'dependencies' => array(
      array('nas_master_native_plants', 'angularjs'),
    ),
  );
  $libraries['angularjs-sanitize'] = array(
    'title' => 'AngularJS Sanitize',
    'website' => 'https://angularjs.org/',
    'version' => '1.6.1',
    'js' => array(
      '//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular-sanitize.min.js' => array(
        'type' => 'external',
      ),
    ),
    'dependencies' => array(
      array('nas_master_native_plants', 'angularjs'),
    ),
  );
  $libraries['angularjs-cookies'] = array(
    'title' => 'AngularJS Cookies',
    'website' => 'https://angularjs.org/',
    'version' => '1.6.1',
    'js' => array(
      '//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular-cookies.min.js' => array(
        'type' => 'external',
      ),
    ),
    'dependencies' => array(
      array('nas_master_native_plants', 'angularjs'),
    ),
  );
  $libraries['angularjs-ui-router'] = array(
    'title' => 'AngularJS UI Router',
    'website' => 'https://ui-router.github.io',
    'version' => '0.3.2',
    'js' => array(
      '//unpkg.com/angular-ui-router@0.3.2/release/angular-ui-router.min.js' => array(
        'type' => 'external',
      ),
    ),
    'dependencies' => array(
      array('nas_master_native_plants', 'angularjs'),
    ),
  );
  $libraries['angularjs-storage'] = array(
    'title' => 'AngularJS Local and Sessions storage',
    'website' => 'https://github.com/gsklee/ngStorage',
    'version' => '0.3.11',
    'js' => array(
      '//cdnjs.cloudflare.com/ajax/libs/ngStorage/0.3.11/ngStorage.min.js' => array(
        'type' => 'external',
      ),
    ),
    'dependencies' => array(
      array('nas_master_native_plants', 'angularjs'),
    ),
  );

  $module_path = drupal_get_path('module', 'nas_master_native_plants');
  $libraries['angularjs-native-plants'] = array(
    'title' => 'AngularJS Native Plants',
    'version' => '1.0.0',
    'js' => array(
      $module_path .  '/js/nas_master_native_plants.js' => array(
        'type' => 'file',
      ),
      $module_path .  '/js/nas_master_native_plants.angular.js' => array(
        'type' => 'file',
      ),
    ),
    'dependencies' => array(
      array('nas_master_native_plants', 'angularjs'),
      array('nas_master_native_plants', 'angularjs-sanitize'),
      array('nas_master_native_plants', 'angularjs-cookies'),
      array('nas_master_native_plants', 'angularjs-ui-router'),
      array('nas_master_native_plants', 'angularjs-storage'),
    ),
  );
  $libraries['angularjs-native-plants']['js'][] = array(
    'type' => 'setting',
    'data' => array(
      'nas_master_native_plants' => array(
        'callback' => 'native-plants/ajax/',
      ),
    ),
  );

  $theme_path = drupal_get_path('theme', 'nas');
  $libraries['jquery-responsive-tabs'] = array(
    'title' => 'jQuery Responsive tabs',
    'website' => 'https://github.com/jellekralt/Responsive-Tabs',
    'version' => '1.6.1',
    'js' => array(
      // TODO: change to minified version?
      $theme_path . '/js/vendor/responsive-tabs/jquery.responsiveTabs.js' => array(
        'type' => 'file',
      ),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );
  $libraries['jquery-owl-carousel2'] = array(
    'title' => 'jQuery Owl Carousel 2',
    'website' => 'https://github.com/OwlCarousel2/OwlCarousel2',
    'version' => '2.2.0',
    'js' => array(
      $theme_path . '/js/vendor/owl-carousel2/owl.carousel.js' => array(
        'type' => 'file',
      ),
    ),
    'css' => array(
      $theme_path . '/js/vendor/owl-carousel2/owl.carousel.css',
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_imagecache_external_directory_alter().
 */
function nas_master_native_plants_imagecache_external_directory_alter(&$directory, $filename, $url) {
  // Check that URL is for Native Plants images.
  if (!strstr($url, 'netapp.audubon.org/NativePlants')) {
    return;
  }

  // Save Native Plants images to separate directory.
  $directory = 'public://externals/native_plants';
  $filepath = $directory . '/' . $filename;
  if (file_exists($filepath)) {
    return;
  }

  // Set cache value to fetch file in image effect callback.
  variable_set('native_plants_image_' . $filename, $url);
}

/**
 * Implements hook_imagecache_external_needs_refresh_alter().
 */
function nas_master_native_plants_imagecache_external_needs_refresh_alter(&$needs_refresh, $filepath) {
  // Act only on Native Plants images.
  if (!strstr($filepath, 'externals/native_plants')) {
    return;
  }

  // Do not fetch image here, it will be done in image style effect.
  $needs_refresh = FALSE;
  if (file_exists($filepath)) {
    return;
  }

  // Create fake file.
  $image = image_load(drupal_get_path('module', 'nas_master_native_plants') . '/img/transparent.gif');
  image_save($image, $filepath);
}

/**
 * Implements hook_image_effect_info().
 */
function nas_master_native_plants_image_effect_info() {
  $effects = array();

  $effects['nas_master_native_plants'] = array(
    'label' => t('Native Plants external image'),
    'effect callback' => 'nas_master_native_plants_image_effect_callback',
    'dimensions passthrough' => TRUE,
  );

  return $effects;
}

/**
 * Native Plants external image effect callback.
 */
function nas_master_native_plants_image_effect_callback(&$image, $data) {
  // Check for a fake file.
  if (!strstr($image->source, 'externals/native_plants')
    || $image->info['width'] != 1 || $image->info['height'] != 1) {
    return TRUE;
  }

  // Replace fake file with the actual data from external link.
  $filename = basename($image->source);
  if (!$url = variable_get('native_plants_image_' . $filename)) {
    watchdog('nas_master_native_plants', 'Failed to get original URL value for %filename.', array('%filename' => $filename), WATCHDOG_ERROR);
    return FALSE;
  }

  if ($filepath = imagecache_external_fetch($url, $image->source)) {
    variable_del('native_plants_image_' . $filename);
  }
  else {
    watchdog('nas_master_native_plants', 'Failed to fetch original image for %filename, %url.', array('%filename' => $filename, '%url' => $url), WATCHDOG_ERROR);
    return FALSE;
  }

  $image = image_load($filepath);
  return TRUE;
}
