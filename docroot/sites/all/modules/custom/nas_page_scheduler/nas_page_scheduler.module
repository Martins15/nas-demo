<?php

/**
 * @file
 * Maintains a cloning and scheduling of panel pages.
 */

/**
 * Implements hook_menu().
 */
function nas_page_scheduler_menu() {
  $items = array();

  $items['page/%ctools_js/clone/%'] = array(
    'page callback' => 'nas_page_scheduler_page_clone',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/content/nas/page_scheduler/start'] = array(
    'title' => 'Run Page Scheduler check',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nas_page_scheduler_check_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback for modal "Schedule new version of the page".
 */
function nas_page_scheduler_page_clone() {
  ctools_include('modal');
  ctools_include('ajax');
  $form_state = array(
    'title' => t('Schedule new version of the page'),
    'ajax' => TRUE,
  );
  $output = ctools_modal_form_wrapper('nas_page_scheduler_settings_form', $form_state);
  print ajax_render($output);
}

/**
 * Form nas_page_scheduler_settings_form.
 */
function nas_page_scheduler_settings_form($form, &$form_state) {
  $form['intro'] = array(
    '#markup' => 'Intro',
  );
  $form['show_unpublish_date'] = array(
    '#type' => 'checkboxes',
    '#options' => array('on' => t('Show unpublish date')),
  );
  $form['date_publish'] = array(
    '#type' => 'date_popup',
    '#default_value' => date('Y-m-d H:i:s'),
    '#date_type' => DATE_DATETIME,
    '#date_timezone' => date_default_timezone(),
    '#date_format' => 'm-d-Y H:i',
    '#date_increment' => 1,
    '#date_year_range' => '0:+3',
    '#required' => TRUE,
  );
  $form['date_unpublish'] = array(
    '#type' => 'date_popup',
    '#default_value' => date('Y-m-d H:i:s'),
    '#date_type' => DATE_DATETIME,
    '#date_timezone' => date_default_timezone(),
    '#date_format' => 'm-d-Y H:i',
    '#date_increment' => 1,
    '#date_year_range' => '0:+3',
    '#states' => array(
      'visible' => array(
       ':input[name="show_unpublish_date[on]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['subtask'] = array(
    '#type' => 'hidden',
    '#default_value' => arg(3),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array(
      'class' => array('button', 'tomato', 'large'),
    ),
  );
  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#attributes' => array(
      'class' => array('ctools-close-modal', 'button', 'tomato', 'large'),
    ),
  );
  return $form;
}

/**
 * nas_page_scheduler_settings_form validation callback.
 */
function nas_page_scheduler_settings_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['date_publish']) && !empty($form_state['values']['date_unpublish'])) {
    $publish_timestamp = date_create($form_state['values']['date_publish'])->getTimestamp();
    $unpublish_timestamp = date_create($form_state['values']['date_unpublish'])->getTimestamp();

    if ($publish_timestamp > $unpublish_timestamp) {
      form_set_error('date_unpublish', t('Publish date should be less than publish.'));
    }

    $form_state['values']['date_publish'] = $publish_timestamp;
    $form_state['values']['date_unpublish'] = $unpublish_timestamp;
  }
}

/**
 * nas_page_scheduler_settings_form submit callback.
 */
function nas_page_scheduler_settings_form_submit($form, $form_state) {
  $page = page_manager_cache_load('page-' . $form_state['values']['subtask']);
  $original = $page->subtask['subtask'];

  // Unique hash for path and machine name.
  $hash = md5(rand());

  $original->name = $form_state['values']['subtask'] . '_' . $hash;
  $original->admin_title = $page->subtask['subtask']->admin_title . ' ' . date('Y-m-d H:i', $form_state['values']['date_publish']);
  $original->path = $hash;
  // Hide page from anonymous until get it published.
  $original->access['plugins'][] = array(
    'name' => 'role',
    'settings'=> array(
      'rids' => array(
        0 => 1,
      ),
    ),
    'context'=> 'logged-in-user',
    'not' => TRUE,
  );

  $handlers = !empty($page->handlers) ? $page->handlers : FALSE;

  foreach ($handlers as $key => $handler) {
    // Scheduled page is not an original.
    $handler->conf['nas_page_scheduler_original_page'] = FALSE;
    // Save the original task name.
    $handler->conf['nas_page_scheduler_original_page_task_name'] = 'page-' . $form_state['values']['subtask'];
    // Save date.
    $handler->conf['nas_page_scheduler_date_publish'] = $form_state['values']['date_publish'];
    $handler->conf['nas_page_scheduler_date_unpublish'] = $form_state['values']['date_unpublish'];
  }

  // Export the handler, which is a fantastic way to clean database IDs out of it.
  $export = page_manager_page_export($original, $handlers);
  ob_start();
  eval($export);
  ob_end_clean();

  $task_name = page_manager_make_task_name('page', $page->name);
  $cache = new stdClass();

  page_manager_page_new_page_cache($page, $cache);
  page_manager_set_page_cache($cache);

  $commands[] = ctools_ajax_command_redirect(page_manager_edit_url($task_name));
  print ajax_render($commands);
  exit;
}

/**
 * Implements hook_page_manager_variant_operations_alter().
 *
 * Shameful rip off from panels_everywhere module.
 *
 * @see panels_everywhere_page_manager_variant_operations_alter()
 * @see http://groups.drupal.org/node/110719#comment-356094
 */
function nas_page_scheduler_page_manager_variant_operations_alter(&$operations, $handler) {

  // Use this obnoxious construct to safely insert our item.
  reset($operations['children']);
  $children_operations = array();
  while (list($key, $value) = each($operations['children'])) {
    $children_operations[$key] = $value;
    if ($key == 'context') {
      $children_operations['scheduler'] = array(
        'title' => t('Scheduler'),
        'description' => t('Edit publish and unpublish dates for this page.'),
        'form' => 'nas_page_scheduler_variant_scheduler_form',
      );
    }
  }
  $operations['children'] = $children_operations;
}

/**
 * Panels scheduler configuration form.
 */
function nas_page_scheduler_variant_scheduler_form($form, &$form_state) {
  ctools_include('context-task-handler');

  $handler = $form_state['handler'];
  $contexts = ctools_context_handler_get_all_contexts($form_state['task'], $form_state['subtask'], $handler);

  $form += nas_page_scheduler_partial_configuration_form($handler->conf, $contexts);

  return $form;
}

/**
 * Implements hook_ctools_render_alter().
 *
 * When a Page Manager page is rendered, build the Scheduler link if it exists.
 */
function nas_page_scheduler_ctools_render_alter(&$info, &$page, &$context) {
  $handler = $context['handler'];
  $contexts = ctools_context_handler_get_handler_contexts($context['contexts'], $handler);
  if (isset($handler->conf['nas_page_scheduler_state']) && $handler->conf['nas_page_scheduler_state']) {
    if (isset($handler->task) && $handler->task == 'page') {
      drupal_set_message(l('Schedule new version', 'page/nojs/clone/' . $handler->subtask, array(
        'attributes' => array(
          'class' => array(
            'ctools-use-modal',
          ),
        ),
        'html' => TRUE,
      )));
    }
  }
}

/**
 * Returns a partially formed configuration form.
 *
 * @param $conf
 * @param $contexts
 * @return
 *  An array containing a partial configuration form.
 */
function nas_page_scheduler_partial_configuration_form($conf, $contexts) {
  // Now check all panel pages and ignore all mini panels.
  ctools_include('page', 'page_manager', 'plugins/tasks');
  ctools_include('page_manager.admin', 'page_manager', '');
  ctools_include('export');

  $tasks = page_manager_get_tasks_by_type('page');
  $page_types = array();

  foreach ($tasks as $task) {
    // Disabled page return empty.
    if ($pages = page_manager_load_task_handlers($task)) {
      $page_types[] = $pages;
    }
  }

  // Not all display objects are loaded, make sure to load them.
  foreach ($page_types as &$pages) {
    foreach ($pages as &$page) {
      if (empty($page->conf['display']) && !empty($page->conf['did'])) {
        $page->conf['display'] = panels_load_display($page->conf['did']);

        if (isset($page->conf['nas_page_scheduler_state']) &&
          $page->conf['nas_page_scheduler_state'] &&
          isset($page->conf['nas_page_scheduler_original_page_task_name']) &&
          $page->conf['nas_page_scheduler_original_page_task_name']) {

          if ($page->conf['nas_page_scheduler_original_page_task_name'] == arg(5)) {
            $publish_date = date('Y-m-d H:i', $page->conf['nas_page_scheduler_date_publish']);
            $unpublish_date = date('Y-m-d H:i', $page->conf['nas_page_scheduler_date_unpublish']);
            if ($publish_date == $unpublish_date) {
              $unpublish_date = '';
            }
            $classes = array();
            $rows[] = array(
              'data' => array(
                array('data' => $publish_date),
                array('data' => $unpublish_date),
                array(
                  'data' => l(t('Edit'), 'admin/structure/pages/edit/page-' . $page->subtask, array(
                    'attributes' => array(
                      'target' => '_blank',
                    ),
                  )),
                ),
              ),
              'class' => $classes,
            );
          }
        }
      }
    }
  }
  if (!empty($rows)) {
    // Build table with all scheduled pages.
    $header = array(
      array('data' => t('Publish on')),
      array('data' => t('Unpublish on')),
      array('data' => t('')),
    );
    $output = theme('table', array(
      'header' => $header,
      'rows' => $rows,
    ));
  }

  $disabled = TRUE;
  if (!isset($conf['nas_page_scheduler_original_page']) || $conf['nas_page_scheduler_original_page']) {
    $disabled = FALSE;
  }
  $form['settings']['nas_page_scheduler_state'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable scheduler configuration.'),
    '#default_value' => isset($conf['nas_page_scheduler_state']) ? $conf['nas_page_scheduler_state'] : FALSE,
    '#disabled' => $disabled,
  );
  $form['settings']['nas_page_scheduler_original_page'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($conf['nas_page_scheduler_original_page']) ? $conf['nas_page_scheduler_original_page'] : TRUE,
  );
  $form['settings']['nas_page_scheduler_table'] = array(
    '#markup' => isset($output) ? $output : '',
  );
  if ($conf['nas_page_scheduler_state'] && !$conf['nas_page_scheduler_original_page']) {
    $form['settings']['show_unpublish_date'] = array(
      '#type' => 'checkboxes',
      '#options' => array('on' => t('Show unpublish date')),
      '#default_value' => $conf['nas_page_scheduler_date_publish'] !== $conf['nas_page_scheduler_date_unpublish'] ? array('on' => 'on') : array('on' => 0),
    );
    $form['settings']['nas_page_scheduler_date_publish'] = array(
      '#type' => 'date_popup',
      '#default_value' => isset($conf['nas_page_scheduler_date_publish']) ? date('Y-m-d H:i:s', $conf['nas_page_scheduler_date_publish']) : date('Y-m-d H:i:s'),
      '#date_type' => DATE_DATETIME,
      '#date_timezone' => date_default_timezone(),
      '#date_format' => 'm-d-Y H:i',
      '#date_increment' => 1,
      '#date_year_range' => '0:+3',
    );
    $form['settings']['nas_page_scheduler_date_unpublish'] = array(
      '#type' => 'date_popup',
      '#default_value' => isset($conf['nas_page_scheduler_date_unpublish']) ? date('Y-m-d H:i:s', $conf['nas_page_scheduler_date_unpublish']) : date('Y-m-d H:i:s'),
      '#date_type' => DATE_DATETIME,
      '#date_timezone' => date_default_timezone(),
      '#date_format' => 'm-d-Y H:i',
      '#date_increment' => 1,
      '#date_year_range' => '0:+3',
      '#states' => array(
        'visible' => array(
         ':input[name="show_unpublish_date[on]"]' => array('checked' => TRUE),
        ),
      ),
    );
  }

  return $form;
}

/**
 * Validation callback handler for panels scheduler configuration form.
 */
function nas_page_scheduler_variant_scheduler_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['nas_page_scheduler_date_publish']) && !empty($form_state['values']['nas_page_scheduler_date_unpublish'])) {
    $publish_timestamp = date_create($form_state['values']['nas_page_scheduler_date_publish'])->getTimestamp();
    $unpublish_timestamp = date_create($form_state['values']['nas_page_scheduler_date_unpublish'])->getTimestamp();

    if ($publish_timestamp > $unpublish_timestamp) {
      form_set_error('nas_page_scheduler_date_unpublish', t('Publish date should be less than publish.'));
    }

    $form_state['values']['nas_page_scheduler_date_publish'] = $publish_timestamp;
    $form_state['values']['nas_page_scheduler_date_unpublish'] = $unpublish_timestamp;
  }
}

/**
 * Submission callback handler for panels scheduler configuration form.
 */
function nas_page_scheduler_variant_scheduler_form_submit($form, &$form_state) {
  $form_state['handler']->conf['nas_page_scheduler_date_publish'] = $form_state['values']['nas_page_scheduler_date_publish'];
  $form_state['handler']->conf['nas_page_scheduler_date_unpublish'] = $form_state['values']['nas_page_scheduler_date_unpublish'];
  $form_state['handler']->conf['nas_page_scheduler_state'] = (bool) $form_state['values']['nas_page_scheduler_state'];
  $form_state['handler']->conf['nas_page_scheduler_original_page'] = (bool) $form_state['values']['nas_page_scheduler_original_page'];
}

/**
 * Callback form for nas/page_scheduler/start page.
 */
function nas_page_scheduler_check_form($form, &$form_state) {
  drupal_set_message('Current server time is ' . date('m-d-Y H:i:s', REQUEST_TIME));
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start'),
  );
  return $form;
}

/**
 * Submit form for nas/page_scheduler/start page.
 */
function nas_page_scheduler_check_form_submit($form, &$form_state) {
  nas_page_scheduler_start();
  return $form;
}

function nas_page_scheduler_start() {
  // Now check all panel pages and ignore all mini panels.
  ctools_include('page', 'page_manager', 'plugins/tasks');
  ctools_include('page_manager.admin', 'page_manager', '');
  ctools_include('export');

  $tasks = page_manager_get_tasks_by_type('page');
  $page_types = array();
  $clear_cache = FALSE;

  foreach ($tasks as $task) {
    // Disabled page return empty.
    if ($pages = page_manager_load_task_handlers($task)) {
      $page_types[] = $pages;
    }
  }

  // Not all display objects are loaded, make sure to load them.
  foreach ($page_types as &$pages) {
    foreach ($pages as &$page) {
      if (empty($page->conf['display']) && !empty($page->conf['did'])) {
        $page->conf['display'] = panels_load_display($page->conf['did']);

        if (isset($page->conf['nas_page_scheduler_state']) &&
          $page->conf['nas_page_scheduler_state'] &&
          isset($page->conf['nas_page_scheduler_original_page_task_name']) &&
          $page->conf['nas_page_scheduler_original_page_task_name']) {

          $original_page = page_manager_cache_load($page->conf['nas_page_scheduler_original_page_task_name']);
          $scheduled_page = page_manager_cache_load('page-' . $page->subtask);

          // Unique hash.
          $hash = md5(rand());

          // Check publish/unpublish dates.
          $scheduled_page_handlers = !empty($scheduled_page->handlers) ? $scheduled_page->handlers : FALSE;

          foreach ($scheduled_page_handlers as $key => $handler) {
            $date_publish = $handler->conf['nas_page_scheduler_date_publish'];
            $date_unpublish = $handler->conf['nas_page_scheduler_date_unpublish'];
            $published = isset($handler->conf['nas_page_scheduler_page_published']) ? $handler->conf['nas_page_scheduler_page_published'] : FALSE;

            // Publish and unpublish dates are equal, so publish only.
            if ($date_publish == $date_unpublish) {
              if ($date_publish <= REQUEST_TIME) {
                drupal_set_message('It\'s time to Publish "' . $scheduled_page->subtask['admin title'] . '"');
                // Modify scheduled page.
                $scheduled_page->subtask['subtask']->path = $original_page->subtask['subtask']->path;
                $scheduled_page->handlers[$key]->conf['nas_page_scheduler_page_published'] = TRUE;
                // Remove previously added access plugin.
                foreach ($scheduled_page->subtask['subtask']->access['plugins'] as $key => $plugin) {
                  if ($plugin['name'] == 'role') {
                    unset($scheduled_page->subtask['subtask']->access['plugins'][$key]);
                  }
                }
                // Modify original page.
                $original_page->subtask['subtask']->path = $hash;
                // Hide page from anonymous until get it published.
                $original_page->subtask['subtask']->access['plugins'][] = array(
                  'name' => 'role',
                  'settings'=> array(
                    'rids' => array(
                      0 => 1,
                    ),
                  ),
                  'context'=> 'logged-in-user',
                  'not' => TRUE,
                );
                $clear_cache = TRUE;
              }
            }
            // The page has publish and unpublish dates, lets define what to do.
            if ($date_publish < $date_unpublish) {
              if ($date_publish <= REQUEST_TIME && $date_unpublish >= REQUEST_TIME) {
                drupal_set_message('It\'s time to Publish "' . $scheduled_page->subtask['admin title'] . '"');
                // Modify scheduled page.
                $scheduled_page->subtask['subtask']->path = $original_page->subtask['subtask']->path;
                $scheduled_page->handlers[$key]->conf['nas_page_scheduler_page_published'] = TRUE;
                // Remove previously added access plugin.
                foreach ($scheduled_page->subtask['subtask']->access['plugins'] as $key => $plugin) {
                  if ($plugin['name'] == 'role') {
                    unset($scheduled_page->subtask['subtask']->access['plugins'][$key]);
                  }
                }
                // Modify original page.
                $original_page->subtask['subtask']->path = $hash;
                // Hide page from anonymous until get it published.
                $original_page->subtask['subtask']->access['plugins'][] = array(
                  'name' => 'role',
                  'settings'=> array(
                    'rids' => array(
                      0 => 1,
                    ),
                  ),
                  'context'=> 'logged-in-user',
                  'not' => TRUE,
                );
                $clear_cache = TRUE;
              }
              if ($date_unpublish <= REQUEST_TIME && $published) {
                drupal_set_message('It\'s time to Unpublish "' . $scheduled_page->subtask['admin title'] . '"');
                // We should return original page.
                $original_page->subtask['subtask']->path = $scheduled_page->subtask['subtask']->path;
                $scheduled_page->subtask['subtask']->path = $hash;
                $scheduled_page->handlers[$key]->conf['nas_page_scheduler_page_published'] = FALSE;
                // Hide page from anonymous until get it published.
                $scheduled_page->subtask['subtask']->access['plugins'][] = array(
                  'name' => 'role',
                  'settings'=> array(
                    'rids' => array(
                      0 => 1,
                    ),
                  ),
                  'context'=> 'logged-in-user',
                  'not' => TRUE,
                );
                $clear_cache = TRUE;
              }
            }
          }

          // Finally save all changes to the original and scheduled pages.
          page_manager_set_page_cache($scheduled_page);
          if ($cache = page_manager_get_page_cache('page-' . $page->subtask)) {
            page_manager_save_page_cache($cache);
          }

          page_manager_set_page_cache($original_page);
          if ($cache = page_manager_get_page_cache($page->conf['nas_page_scheduler_original_page_task_name'])) {
            page_manager_save_page_cache($cache);
          }
        }
      }
    }
  }
  if ($clear_cache) {
    drupal_flush_all_caches();
  }
  else {
    drupal_set_message('There are no pages to publish/unpublish.');
  }
}
