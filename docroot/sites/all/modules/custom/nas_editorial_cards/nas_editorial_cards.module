<?php

/**
 * @file
 * Contains Editorial cards related logic.
 */

/**
 * Helper function to get editorial card title.
 *
 * @param object $node
 *   Node object.
 *
 * @return string
 *   Unsanitized title string.
 */
function _nas_editorial_cards_get_title($node) {
  $title = $node->title;
  if (!empty($node->field_editorial_card_title[LANGUAGE_NONE][0]['value'])) {
    $title = $node->field_editorial_card_title[LANGUAGE_NONE][0]['value'];
  }
  return $title;
}

/**
 * Helper function to get editorial card subtitle.
 *
 * @param object $node
 *   Node object.
 *
 * @return string
 *   Unsanitized title string.
 */
function _nas_editorial_cards_get_subtitle($node) {
  $subtitle = '';
  if ($field_items = field_get_items('node', $node, 'field_editorial_card_subtitle')) {
    $subtitle = $field_items[0]['safe_value'];
  }
  elseif ($node->type == 'slideshow' && $field_items = field_get_items('node', $node, 'field_slideshow_subtitle')) {
    $subtitle = $field_items[0]['safe_value'];
  }
  elseif ($node->type !== 'project' && $field_items = field_get_items('node', $node, 'field_subtitle')) {
    $subtitle = $field_items[0]['safe_value'];
  }
  elseif ($node->type !== 'project' && $field_items = field_get_items('node', $node, 'body')) {
    // Remove some tags.
    $tags = array(
      'i',
      'em',
      'span',
      'b',
      'strong',
      'h1',
      'h2',
      'h3',
      'h4',
      'h5',
      'h6',
      'a'
    );
    $text = preg_replace('/<(' . implode('|', $tags) . ')(?:[^>]+)>(.*)?<\/\1>/Uus', '$2', $field_items[0]['value']);
    // Remove image tags.
    $text = preg_replace('/<img[^>]*>/', '', $text);
    // Remove block_insert tags.
    $text = preg_replace('/\[block_insert\]([0-9]+)\[\/block_insert\]/', '', $text);
    $subtitle = text_summary($text, 'full_html', 150);
  }
  elseif ($node->type === 'project' && $field_items = field_get_items('node', $node, 'field_project_description')) {
    $subtitle = $field_items[0]['safe_value'];
  }

  return $subtitle;
}

/**
 * Implements hook_token_info().
 */
function nas_editorial_cards_token_info() {
  $info['tokens']['node']['editorial_card_title'] = array(
    'name' => t('Editorial card title value'),
    'description' => t('Returns Editorial card title'),
  );
  $info['tokens']['node']['editorial_card_subtitle'] = array(
    'name' => t('Editorial card description value'),
    'description' => t('Returns Editorial card description'),
  );
  $info['tokens']['node']['editorial_card_image'] = array(
    'name' => t('Editorial card image value'),
    'description' => t('Returns Editorial card image with fallback to slideshow images'),
    'type' => 'image-field',
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function nas_editorial_cards_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'editorial_card_title':
          $title = _nas_editorial_cards_get_title($node);
          $replacements[$original] = $sanitize ? check_plain($title) : $title;
          break;

        case 'editorial_card_subtitle':
          $replacements[$original] = _nas_editorial_cards_get_subtitle($node);
          break;

        default:
          $pseudo_image_fields = array('editorial_card_image');
          foreach ($pseudo_image_fields as $pseudo_image_field) {
            $field_object = FALSE;

            switch ($pseudo_image_field) {
              case 'editorial_card_image':
                $field_object = field_get_items('node', $node, 'field_editorial_card_image');
                if (!$field_object && $node->type === 'slideshow') {
                  $field_object = field_get_items('node', $node, 'field_images');
                }
                break;
            }

            if ($field_object && $image_field_tokens = token_find_with_prefix($tokens, $pseudo_image_field)) {
              $replacements += token_generate('image-field', $image_field_tokens, array('image-field' => $field_object), $options);
            }
          }
          break;
      }
    }
  }

  return $replacements;
}
