<?php

/**
 * @file
 * Contains additional alters.
 */

/**
 * Implements hook_init().
 */
function nas_alters_init() {
  global $theme;

  if ($theme == 'adminimal') {
    drupal_add_css(drupal_get_path('module', 'nas_alters') . '/css/nas_alters_adminimal.css');
  }

  // Redirect articles only when field_article_redirect is filled and is full node page.
  if (_nas_alters_is_node_full_view_mode_page() && $node = menu_get_object('node')) {
    $fields = array(
      'article' => 'field_article_redirect',
      'slideshow' => 'field_slideshow_redirect',
      'static_page' => 'field_static_page_redirect'
    );
    if (in_array($node->type, array_keys($fields))) {
      $redirect = field_get_items('node', $node, $fields[$node->type]);
      if (!empty($redirect[0]['url'])) {
        drupal_goto($redirect[0]['url'], array(), 301);
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function nas_alters_theme() {
  return array(
    'nas_button' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function nas_alters_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'nas_alters'),
  );
}

/**
 * Implements theme_button()
 * used to return <button> tag when needed
 */
function theme_nas_button($variables) {
  $element = $variables['element'];

  $element['#attributes']['type'] = 'submit';
  element_set_attributes($element, array('id', 'name'));
  $element['#attributes']['class'][] = 'form-' . $element['#button_type'];
  return '<button' . drupal_attributes($element['#attributes']) . '>' . $element['#value'] . '</button>';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the node forms.
 */
function nas_alters_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Remove author tab.
  unset($form['author']);
  // Change type of elements and combine menu & path into one tab.
  if (isset($form['menu']) && isset($form['path'])) {
    $form['menu']['#type'] = 'container';
    $form['path']['#type'] = 'container';
    $form['menu_path_custom_tab'] = array(
      '#type' => 'fieldset',
      '#title' => 'Menu & URL path settings',
      '#collapsible' => 'TRUE',
      '#collapsed' => 'TRUE',
      '#weight' => '-2',
      '#group' => 'additional_settings',
      'menu' => $form['menu'],
      'path' => $form['path'],
    );
    unset($form['menu']);
    unset($form['path']);
  }
  // Rename Panelizer tab to Layout and remove unnecessary label.
  if (isset($form['panelizer'])) {
    $form['panelizer']['#title'] = t('Layout');
    unset($form['panelizer']['page_manager']['name']['#title']);
  }
  // Hide Panezizer tab if there is no choise to select.
  if (isset($form['panelizer']['page_manager']['name']['#options']) && count($form['panelizer']['page_manager']['name']['#options']) <= 1) {
    unset($form['panelizer']);
  }
}

/**
 * Implements hook_node_prepare().
 */
function nas_alters_node_prepare($node) {
  // If creating a translation, copy panelizer settings to be synchronized.
  if (empty($node->nid) && !empty($node->translation_source) && isset($node->translation_source->panelizer)) {
    $source = $node->translation_source;
    $node->panelizer = $source->panelizer;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the Magazine Issue node form.
 */
function nas_alters_form_magazine_issue_node_form_alter(&$form, &$form_state, $form_id) {
  // Add description to node title.
  $form['title']['#description'] = t('e.g. November - December 2014');
}

/**
 * Implements hook_element_info_alter().
 */
function nas_alters_element_info_alter(&$type) {
  if (isset($type['link_field'])) {
    $type['link_field']['#process'][] = 'nas_alters_link_field_process';
  }
}

/**
 * Process function for nas_alters_element_info_alter.
 */
function nas_alters_link_field_process(&$element, &$form_state, $complete_form) {
  switch ($element['#field_name']) {
    case 'field_contact_twitter':
      $element['title']['#title'] = t('Twitter screen name (e.g. @JoeSmith)');
      break;
  }
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the Slideshow node form.
 */
function nas_alters_form_slideshow_node_form_alter(&$form, &$form_state, $form_id) {
  // Move redirect field to "Menu & URL path settings" tab.
  $form['menu_path_custom_tab']['field_slideshow_redirect'] = $form['field_slideshow_redirect'];
  $form['menu_path_custom_tab']['field_slideshow_redirect']['#weight'] = 40;
  unset($form['field_slideshow_redirect']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the Static Page node form.
 */
function nas_alters_form_static_page_node_form_alter(&$form, &$form_state, $form_id) {
  // Move redirect field to "Menu & URL path settings" tab.
  $form['menu_path_custom_tab']['field_static_page_redirect'] = $form['field_static_page_redirect'];
  $form['menu_path_custom_tab']['field_static_page_redirect']['#weight'] = 40;
  unset($form['field_static_page_redirect']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the Article node form.
 */
function nas_alters_form_article_node_form_alter(&$form, &$form_state, $form_id) {
  //Remove unecessary options.
  unset($form['options']['promote']);
  unset($form['options']['sticky']);
  $form['options']['#weight'] = '34';
  //Change type of elements and combine them into one tab.
  $form['options']['#type'] = 'container';
  $form['scheduler_settings']['#type'] = 'scheduler_settings';
  $form['publishing_custom_tab'] = array(
    '#type' => 'fieldset',
    '#title' => 'Publishing & Scheduling options',
    '#collapsible' => 'TRUE',
    '#collapsed' => 'TRUE',
    '#weight' => '35',
    '#group' => 'additional_settings',
    'scheduler_settings' => $form['scheduler_settings'],
    'options' => $form['options'],
  );
  unset($form['options']);
  unset($form['scheduler_settings']);

  // Place panelizer field to the Layout group.
  $form['panelizer']['#type'] = 'container';
  $form['#group_children']['panelizer'] = 'group_panelizer';

  // Add extra reset link if we have overriden display state.
  if (!isset($form['panelizer']['page_manager'])) {
    $form['panelizer']['reset_custom_display'] = array(
      '#prefix' => '<div class="form-item">',
      '#suffix' => '</div>',
      '#type' => 'link',
      '#title' => t('Reset custom display'),
      '#href' => 'node/' . arg(1) . '/panelizer/page_manager/reset',
      '#options' => array(
        'query' => array(
          'destination' => 'node/' . arg(1) . '/edit',
        ),
        'attributes' => array(
          'class' => array(
            'button',
            'remove'
          ),
        ),
      ),
    );
  }

  $states = array(
    'big_image' => array(
      'field_hero_image',
      'field_color_mode',
    ),
    'inline_hero_photo' => array(
      'field_hero_image',
    ),
    'default' => array(),
    'fullscreen_image' => array(
      'field_hero_image',
      'field_color_mode',
    ),
    'map' => array(
      'field_article_map',
      'field_credit_caption_map',
    ),
    'press_release' => array(
      'field_pressrelease_contact',
    ),
  );

  // Add custom states for each fields with appropriate panelizer mode.
  foreach ($states as $panelizer_mode => $fields) {
    foreach ($fields as $field) {
      $form[$field]['#states']['visible'][':input[name="panelizer[page_manager][name]"]'][]['value'] = 'node:article:' . $panelizer_mode;
    }
  }

  // Move redirect field to "Menu & URL path settings" tab.
  $form['menu_path_custom_tab']['field_article_redirect'] = $form['field_article_redirect'];
  $form['menu_path_custom_tab']['field_article_redirect']['#weight'] = 40;
  unset($form['field_article_redirect']);

  // Manage visibility comment settings vertical tab.
  $form['#attached']['js'][] = drupal_get_path('module', 'nas_alters') . '/js/hide-comment-settings.js';

  // Attach after build callback.
  $form['#after_build'][] = 'nas_alters_form_article_node_form_after_build';

  // Extra submit.
  $form['#submit'][] = 'nas_alters_form_article_node_form_submit';
}

/**
 * After build callback.
 */
function nas_alters_form_article_node_form_after_build($form, &$form_state) {
  // Hide some vertical tabs.
  $form['author']['#access'] = FALSE;

  return $form;
}

/**
 * Validate the Article node form.
 */
function nas_alters_form_article_node_form_submit($form, &$form_state) {
  // For overridden panelizer.
  if (!isset($form_state['values']['panelizer'])) {
    return;
  }
  // Change layout to default if Hero image wasn't uploaded.
  $layout = $form_state['values']['panelizer']['page_manager']['name'];
  if (($layout == 'node:article:big_image' || $layout == 'node:article:fullscreen_image' || $layout == 'node:article:inline_hero_photo') && isset($form_state['values']['field_hero_image'][LANGUAGE_NONE][0]['fid']) && $form_state['values']['field_hero_image'][LANGUAGE_NONE][0]['fid'] == 0) {
    $form_state['values']['panelizer']['page_manager']['name'] = 'node:article:default';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the Campaign node form.
 */
function nas_alters_form_campaign_node_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['field_campaign_url_parameter'][LANGUAGE_NONE][0]['value']['#default_value'])) {
    $default_name = $form['field_campaign_url_parameter'][LANGUAGE_NONE][0]['value']['#default_value'];
  }
  $form['url_machine_name'] = array(
    '#type' => 'machine_name',
    '#title' => t('URL parameter'),
    '#maxlength' => 255,
    '#machine_name' => array(
      'exists' => 'nas_alters_campaign_url_parameter_exists',
      'source' => array('title'),
    ),
    '#description' => t('The URL parameter of this campaign. It must be unique, and it must contain only alphanumeric characters and underscores.'),
    '#default_value' => isset($default_name) ? $default_name : '',
  );
  drupal_add_js(drupal_get_path('module', 'nas_alters') . '/js/campaign-form.js', array('scope' => 'footer'));
  // Attach after build callback.
  $form['#after_build'][] = 'nas_alters_form_campaign_node_form_alter_build';
  // Extra validate.
  $form['#validate'][] = 'nas_alters_form_campaign_node_form_alter_validate';
  // Extra submit.
  $form['#submit'][] = 'nas_alters_form_campaign_node_form_alter_submit';
}

/**
 * A function name to invoke for checking whether
 * a submitted url parameter value already exists.
 */
function nas_alters_campaign_url_parameter_exists($name, $nid, $validate = FALSE) {
  if ($validate) {
    $query = db_select('field_data_field_campaign_url_parameter', 'f')
      ->fields('f', array('entity_id', 'field_campaign_url_parameter_value'))
      ->condition('f.field_campaign_url_parameter_value', $name);
    if (is_numeric($nid) && $nid !== 0) {
      $query->condition('f.entity_id', $nid, '<>');
    }

    $result = $query->execute()->fetchAll();
    foreach ($result as $value) {
      if ($value->field_campaign_url_parameter_value == $name) {
        return $name;
      }
    }
  }
}

/**
 * After build callback.
 */
function nas_alters_form_campaign_node_form_alter_build($form, &$form_state) {
  $form['url_machine_name']['#attached']['js'][1]['data']['machineName']['#edit-title']['label'] = t('URL parameter');
  return $form;
}

/**
 * Validate callback.
 */
function nas_alters_form_campaign_node_form_alter_validate($form, &$form_state) {
  if ($form_state['values']['url_machine_name'] == 'q') {
    form_set_error('url_machine_name', t('Incorrect URL query parameter, please use another one.'));
  }
  $nid = 0;
  if (isset($form_state['node']->nid) && is_numeric($form_state['node']->nid)) {
    $nid = $form_state['node']->nid;
  }
  if ($test = nas_alters_campaign_url_parameter_exists($form_state['values']['url_machine_name'], $nid, TRUE)) {
    form_clear_error();
    form_set_error('title', t('The URL parameter is already in use. Please make sure it is unique by editing it manually or generate from title.'));
  }
}

/**
 * Submit callback.
 */
function nas_alters_form_campaign_node_form_alter_submit($form, &$form_state) {
  $form_state['values']['field_campaign_url_parameter'][LANGUAGE_NONE][0]['value'] = $form_state['values']['url_machine_name'];
}

/**
 * Implements hook_form_alter().
 */
function nas_alters_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-nas-bird-guide-nas-bird-guide-fav-birds') {
    $form['submit']['#value'] = '<span class="hide-for-medium hide-for-large hide-for-xlarge"><i class="icon-magnifier"></i></span><span class="hide-for-tiny hide-for-small">' . $form['submit']['#value'] . '</span>';
    $form['submit']['#attributes']['class'][] = 'bird-guide-search-submit';
    $form['submit']['#attributes']['class'][] = 'button';
    $form['submit']['#attributes']['class'][] = 'pea-green';
    $form['field_bird_call_type_tid']['#options']['All'] = t('Type of Bird');
    $form['field_bird_family_tid']['#options']['All'] = t('Taxonomic Family');
    $form['field_bird_region_tid']['#options']['All'] = t('Region');
    $form['#attributes']['class'][] = 'bird-guide-exposed-form';
    $form['#attached']['js'][] = drupal_get_path('module', 'nas_alters') . '/js/bird-guide-form.js';

    if (!empty($form_state['storage']['external_page'])) {
      $form['external_page'] = array(
        '#type' => 'hidden',
        '#value' => TRUE,
      );
      // Apply typeahead.js settings for form placed not on the Field Guide page.
      $species = _nas_search_get_tt_species();
      $form['search_api_views_fulltext']['#typeahead'] = array(
        array(
          'type' => 'local values',
          'values' => $species,
          'options' => array(
            'name' => 'species',
            'displayKey' => 'title',
            'limit' => 10,
          )
        ),
      );
    }
    else {
      // Apply typeahead.js settings for form placed on the Field Guide page.
      $species = _nas_search_get_tt_species();
      $families = _nas_search_get_tt_families();

      $form['search_api_views_fulltext']['#typeahead'] = array(
        array(
          'type' => 'local callback',
          'localCallback' => 'Drupal.behaviors.birdGuideFilters.birdGuideFilteredResults',
          'values' => $species,
          'options' => array(
            'name' => 'species',
            'displayKey' => 'title',
          )
        ),
        array(
          'type' => 'local callback',
          'localCallback' => 'Drupal.behaviors.birdGuideFilters.birdGuideFilteredResults',
          'values' => $families,
          'options' => array(
            'name' => 'families',
            'displayKey' => 'name',
            'templates' => array(
              'header' => '<div class="tt-separator">' . t('Taxonomy') . '</div>'
            ),
          )
        ),
      );
    }
  }

  if ($form['#id'] == 'views-exposed-form-events-listing-events-listing-pane') {
    $form['#attributes']['class'][] = 'events-search-form';
    $form['query']['#attributes']['placeholder'] = t('Search for an event...');
    $form['submit']['#value'] = '<span class="hide-for-medium hide-for-large hide-for-xlarge"><i class="icon-magnifier"></i></span><span class="hide-for-tiny hide-for-small">' . $form['submit']['#value'] . '</span>';
    $form['submit']['#attributes']['class'][] = 'bird-guide-search-submit';
    $form['submit']['#attributes']['class'][] = 'button';
    $form['submit']['#attributes']['class'][] = 'pea-green';

    $searcher = 'search_api@default_node_index';
    // Checks view uses search index and adapter is loaded.
    if (facetapi_is_active_searcher($searcher) && $adapter = facetapi_adapter_load($searcher)) {
      $current_search = $adapter->getCurrentSearch();

      $facets = array();
      // Facets might be empty.
      if (!empty($current_search[1]['search_api_facets'])) {
        $facets = $current_search[1]['search_api_facets'];
      }

      // Process filter by state.
      $options = array('All' => t('Filter by State'));
      if (!empty($facets['event_state'])) {
        foreach ($facets['event_state'] as $rawvalue) {
          $key = preg_replace('/"(.*)"/', "$1", $rawvalue['filter']);
          $options[$key] = $key;
        }
      }
      $form['event_state']['#type'] = 'select';
      $form['event_state']['#options'] = $options;
      $form['event_state']['#multiple'] = FALSE;
      unset($form['event_state']['#size']);

      // Process filter by month.
      $options = array('All' => t('Filter by Month'));
      if (!empty($facets['event_months'])) {
        foreach ($facets['event_months'] as $rawvalue) {
          $key = preg_replace('/"(.*)"/', "$1", $rawvalue['filter']);
          // Convert month number to name.
          $month_num = (int) substr($key, 4, 2);
          $date_obj = DateTime::createFromFormat('!m', $month_num);
          $month_name = $date_obj->format('F');
          // TODO: translate month name.
          $options[$key] = $month_name . ' ' . substr($key, 0, 4);
        }
      }
      $form['event_months']['#type'] = 'select';
      $form['event_months']['#options'] = $options;
      $form['event_months']['#multiple'] = FALSE;
      unset($form['event_months']['#size']);

      // Process filter by type.
      $available_types[] = 'All';
      if (!empty($facets['field_event_type'])) {
        foreach ($facets['field_event_type'] as $rawvalue) {
          $available_types[] = (int) preg_replace('/"(.*)"/', "$1", $rawvalue['filter']);
        }
        foreach ($form['field_event_type']['#options'] as $key => $value) {
          if (!in_array($key, $available_types)) {
            unset($form['field_event_type']['#options'][$key]);
          }
        }
      }
      $form['field_event_type']['#options']['All'] = t('Filter by Event Type');
    }
  }

  if ($form['#id'] == 'views-exposed-form-boa-index-boa-index') {
    $form['#attached']['js'][] = drupal_get_path('module', 'nas_alters') . '/js/boa-search-form.js';
    $form['#attributes']['class'][] = 'boa-search-form';
    $form['query']['#attributes']['placeholder'] = t('Search for a bird...');
    $form['submit']['#value'] = '<span class="hide-for-medium hide-for-large hide-for-xlarge"><i class="icon-magnifier"></i></span><span class="hide-for-tiny hide-for-small">' . $form['submit']['#value'] . '</span>';
    $form['submit']['#attributes']['class'][] = 'bird-guide-search-submit';
    $form['submit']['#attributes']['class'][] = 'button';
    $form['submit']['#attributes']['class'][] = 'pea-green';
    $form['state']['#options']['All'] = t('State');

    // Apply typeahead.js settings for form placed on the BOA Landing page.
    $boas = _nas_search_get_tt_boas();

    $form['query']['#typeahead'] = array(
      array(
        'type' => 'local values',
        'values' => $boas,
        'options' => array(
          'name' => 'boas',
          'displayKey' => 'combined_title',
          'limit' => 10,
        ),
        'templates' => array(
          'suggestion' => 'Drupal.behaviors.boaSearchFilters.suggestionTemplate',
        ),
      ),
    );
  }
}

/**
 * Implements hook_views_pre_view().
 */
function nas_alters_views_pre_render(&$view) {
  if ($view->name == 'nas_bird_guide' && $view->current_display == 'nas_bird_guide_fav_birds') {
    $view->set_title(t('Some of Our Favorite Birds'));

    if (!empty($view->exposed_input)) {
      $view->set_title(t('Matching Birds'));
      $query = drupal_get_query_parameters();
      if (!empty($query['external_page'])) {
        $view->set_title(t('Search results'));
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nas_alters_form_file_entity_add_upload_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module', 'nas_alters') . '/js/file-entity-alt-title.js');
  $form['filename']['#title'] = t('File name');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nas_alters_form_file_entity_edit_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module', 'nas_alters') . '/js/file-entity-alt-title.js');
  $form['filename']['#title'] = t('File name');
  if (isset($form['field_file_caption'][LANGUAGE_NONE][0]['#format'])) {
    $form['field_file_caption'][LANGUAGE_NONE][0]['#format'] = 'html';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nas_alters_form_bean_form_alter(&$form, &$form_state, $form_id) {
  //$form['label']['#prefix'] = '<div style="display:none;">';
  //$form['label']['#suffix'] = '</div>';
  $form['label']['#default_value'] = 'bean_block';
  $form['title']['#prefix'] = '<div style="display:none;">';
  $form['title']['#suffix'] = '</div>';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nas_alters_form_nodequeue_arrange_subqueue_form_1_alter(&$form, &$form_state, $form_id) {
  $form['help_text'] = array(
    '#markup' => t('<strong>The first 3 cards</strong> will appear in order of appearance <strong>in the footer section sitewide. You can override these settings</strong> on any one particular page. If you don\'t need manual override for a particular page anymore just delete engagement cards references from autocomplete fields in the pane settings<br /><br /><strong>The 4th card</strong> from this nodequeue <strong>will appear in the right sidebar placements sitewide</strong> in case if <strong>no contextual match</strong> is found. You can override defaults using particular sidebar pain settings.'),
    '#weight' => -2,
  );
}

/**
 * Implements hook_menu().
 */
function nas_alters_menu_alter(&$items) {
  $items['admin/structure/menu/manage/%menu']['page callback'] = '_nas_alters_menu_admin_page';
  $items['admin/structure/menu/manage/%menu']['page arguments'] = array(4);
}

/**
 * Implements hook_module_implements_alter().
 */
function nas_alters_module_implements_alter(&$implementations, $hook) {
  // Make sure that we trigger nas_alters_menu_alter() after bigmenu_menu_alter().
  if ($hook == 'menu_alter') {
    $group = $implementations['nas_alters'];
    unset($implementations['nas_alters']);
    $implementations['nas_alters'] = $group;
  }
}

/**
 * Menu admin page callback.
 */
function _nas_alters_menu_admin_page($menu) {
  if ($menu['menu_name'] == 'boa') {
    module_load_include('inc', 'bigmenu', 'bigmenu.admin');
    return drupal_get_form('bigmenu_overview_form', $menu);
  }

  module_load_include('inc', 'menu', 'menu.admin');
  return drupal_get_form('menu_overview_form', $menu);
}

/**
 * Returns whether is article full view mode page.
 */
function _nas_alters_is_node_full_view_mode_page() {
  $args = arg();
  return $args[0] == 'node' && !empty($args[1]) && is_numeric($args[1]) && empty($args[2]);
}

/**
 * Implements hook_form_alter().
 */
function nas_alters_form_alter(&$form, &$form_state, $form_id) {
  $query = drupal_get_query_parameters();
  if ((!empty($query['nas-panes-from-page']) || !empty($query['nas_panes_resave_panel'])) && isset($form['override_title_text'])) {
    // Hide "Override title" field and add label to title field.
    $form['override_title']['#default_value'] = 1;
    $form['override_title']['#access'] = FALSE;
    $form['override_title_text']['#title'] = t('Title');
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function nas_alters_entity_property_info_alter(&$info) {
  $info['node']['properties']['title_string'] = array(
    'type' => 'text',
    'label' => t('Title string'),
    'description' => t('Mirror of the node title'),
    'getter callback' => 'nas_alters_title_getter_callback',
  );
}

/**
 * Wrapper callback for title.
 */
function nas_alters_title_getter_callback($item) {
  return $item->title;
}

/**
 * Implements hook_views_pre_view().
 */
function nas_alters_views_pre_view(&$view) {
}

/**
 * Implements hook_image_styles_alter().
 *
 * Adds 'Strip metadata' filter to all styles that doesn't have it enabled.
 */
function nas_alters_image_styles_alter(&$styles) {
  if (module_exists('imagemagick_advanced')) {
    foreach ($styles as &$style) {
      $max_weight = 0;
      // Look up style.
      foreach ($style['effects'] as $effect) {
        if ($effect['name'] == 'imagemagick_strip') {
          // Go to next style.
          continue 2;
        }
        $max_weight = max($max_weight, $effect['weight']);
      }
      // Style was not found, add it.
      $style['effects'][] = array(
        'name' => 'imagemagick_strip',
        'data' => array(),
        'weight' => $max_weight + 1,
        'effect callback' => 'imagemagick_advanced_strip_effect',
        'module' => 'imagemagick_advanced',
        'label' => 'Strip metadata',
      );
    }
  }
}

/**
 * Implements hook_epsacrop_crop_image_postsave().
 */
function nas_alters_epsacrop_crop_image_postsave($image, $settings, $coords, $style_name) {
  if (module_exists('expire')) {
    $image_uri = str_replace(url('', array('absolute' => TRUE)), '', image_style_url($style_name, $image->source));
    ExpireAPI::executeExpiration(array($image_uri => $image_uri));
  }
}

/**
 * Implements hook_node_presave().
 */
function nas_alters_node_presave($node) {
  if ($node->type !== 'article' || empty($node->original)) {
    return;
  }
  if ($node->status == NODE_PUBLISHED && $node->original->status == NODE_NOT_PUBLISHED) {
    $node->field_article_date[LANGUAGE_NONE][0]['value'] = date('Y-m-d - H:i:s');
  }
}

/**
 * Implements hook_panels_pane_prepared_alter().
 */
function nas_alters_panels_panes_prepared_alter(&$panes, $b) {
  // Events listing views should be processed first, so facets will be available.
  if (strpos($b->display->cache_key, 'page-events_landing_page') !== FALSE) {
    foreach ($panes as &$pane) {
      if ($pane->subtype == 'events_listing-events_listing_pane') {
        $copy = clone $pane;
        unset($panes[$pane->pid]);
        break;
      }
    }
    $panes = array_reverse($panes, TRUE);
    $panes[$copy->pid] = $copy;
    $panes = array_reverse($panes, TRUE);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nas_alters_form_system_site_information_settings_alter(&$form, &$form_state, $form_id) {
  $form['nas_alters_site_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('NAS site config'),
  );
  $form['nas_alters_site_config']['nas_birds_allow_dev_params'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow use dev params for External Content on Birds pages.'),
    '#description' => t('This status allow to use dev params when build not in
    production for checking how external content works on birds pages.'),
    '#default_value' => variable_get('nas_birds_allow_dev_params', FALSE),
  );
}

/**
 * Helper function to get language dropdown.
 */
function nas_alters_lang_dropdown() {
  if (!module_exists('lang_dropdown')) {
    return '';
  }

  // TODO: Somehow determine if current page has translation...

  if ($block = lang_dropdown_block_view()) {
    return drupal_render($block['content']);
  }
  return '';
}
