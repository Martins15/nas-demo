<?php

/**
 * @file
 * Handling Events with Audubon Works.
 */

define('NAS_AUDUBON_WORKS_EVENTS_URL', 'http://worksdev.prod.acquia-sites.com/');
define('NAS_AUDUBON_WORKS_START_TIMESTAMP', 1426152117);

/**
 * Implements hook_cron_job_scheduler_info().
 */
function nas_events_cron_job_scheduler_info() {
  $schedulers = array();
  $schedulers['nas_events_update_task'] = array(
    'worker callback' => 'nas_events_update_nodes',
  );
  return $schedulers;
}

/**
 * This function should only be called once a day.
 */
function nas_events_update_nodes($job = NULL) {
  $timestamp = variable_get('nas_events_last_time_processed', NAS_AUDUBON_WORKS_START_TIMESTAMP);
  $uuids = nas_events_get_list($timestamp);
  foreach ($uuids as $uuid => $timestamp) {
    $config = array(
      'FeedsHTTPFetcher' => array(
        'source' => variable_get('nas_events_works_url', NAS_AUDUBON_WORKS_EVENTS_URL) . 'event/' . $uuid . '?' . $_SERVER['REQUEST_TIME'],
        'uuid' => $uuid,
      ));
    $source = feeds_source('events_import');
    $source->addConfig($config);
    $source->save();
    $source->import();
  }
  watchdog('events', "Last time Events were synced at '%time'", array('%time' => date('Y-m-d H:i:s', $timestamp)));
  variable_set('nas_events_last_time_processed', REQUEST_TIME);
}

/**
 * Get list of uuid and timestamp pairs().
 */
function nas_events_get_list($timestamp, $page = 1, $site = 'National') {
  $params  = array(
    'timestamp' => $timestamp,
    'site' => $site,
    'page' => $page,
  );
  $uri = url(variable_get('nas_events_works_url', NAS_AUDUBON_WORKS_EVENTS_URL) . 'event/changes', array('query' => $params, 'external' => TRUE));
  $result = drupal_http_request($uri);
  $data = drupal_json_decode($result->data);

  return $data;
}

/**
 * Implements hook_feeds_presave().
 */
function nas_events_feeds_presave(FeedsSource $source, $entity, $item) {
  switch ($entity->feeds_item->id) {
    case 'events_import':
      if (isset($item['date']) && !empty($item['date']['value'])) {
        $date_start = date_create($item['date']['value']);
        $entity->field_event_date[LANGUAGE_NONE][0]['value'] = date_format($date_start, 'Y-m-d - H:i:s');
        if (isset($item['date']['value2']) && !empty($item['date']['value2'])) {
          $date_end = date_create($item['date']['value2']);
          $entity->field_event_date[LANGUAGE_NONE][0]['value2'] = date_format($date_end, 'Y-m-d - H:i:s');
        }
        $entity->field_event_date[LANGUAGE_NONE][0]['timezone'] = $item['date']['timezone'];
        $entity->field_event_date[LANGUAGE_NONE][0]['timezone_db'] = 'UTC';
      }

      $entity->field_event_type[LANGUAGE_NONE] = array();
      if (isset($item['type'])) {
        $terms = explode(',', $item['type']);
        foreach ($terms as $term_name) {
          $entity->field_event_type[LANGUAGE_NONE][] = array(
            'tid' => nas_import_term_init($term_name, 'event_type'),
          );
        }
      }
      if (!empty($item['featured_image'])
        && $image = nas_events_add_existing_file($item['featured_image'], 'image', 1, FILE_STATUS_PERMANENT, 0)) {
        $entity->field_image[LANGUAGE_NONE][0]['fid'] = $image->fid;
      }
      else {
        $entity->field_image = array();
      }
      if (!empty($item['sites'])) {
        $entity->field_sites[LANGUAGE_NONE][0]['value'] = drupal_json_encode($item['sites']);
      }

      // Attachments.
      $entity->field_file_attachments[LANGUAGE_NONE] = array();
      foreach ($item['resources'] as $resource) {
        $uri = $resource['uri'];
        $files = file_load_multiple(array(), array('uri' => $uri));
        if (!$file = reset($files)) {
          $file = remote_stream_wrapper_file_create_by_uri($uri);
          $file->filename = urldecode($file->filename);
          file_save($file);
        }
        $entity->field_file_attachments[LANGUAGE_NONE][] = array(
          'fid' => $file->fid,
          'display' => $resource['display'],
          'description' => $resource['description'],
        );
      }
      break;
  }
}

/**
 * Implements hook_feeds_after_save().
 */
function nas_events_feeds_after_save(FeedsSource $source, $entity, $item, $entity_id) {
  switch ($entity->feeds_item->id) {
    case 'events_import':
      $location_array = array(
        'street' => $item['address']['street'],
        'additional' => $item['address']['additional'],
        'province' => $item['address']['province'],
        'city' => $item['address']['city'],
        'postal_code' => $item['address']['postal_code'],
        'country' => strtolower($item['address']['country']),
        'source' => 1,
      );
      if (!empty($item['address']['latitude']) && !empty($item['address']['longitude'])) {
        $location_array['latitude'] = $item['address']['latitude'];
        $location_array['longitude'] = $item['address']['longitude'];
      }
      if ($lid = location_save($location_array)) {
        $entity->field_event_location[LANGUAGE_NONE][0] = array('lid' => $lid);
        field_attach_update('node', $entity);
        if (!empty($item['address']['latitude']) && !empty($item['address']['longitude'])) {
          $query = db_update('location')
            ->condition('lid', $lid)
            ->fields(array(
                'latitude' => $item['address']['latitude'],
                'longitude' => $item['address']['longitude'],
                'source' => 1,
              ))
            ->execute();
        }
      }
      break;
  }
}

/**
 * Implements HOOK_theme().
 */
function nas_events_theme() {
  return array(
    'flyways_events' => array(
      'variables' => array(
        'items' => array(),
      ),
      'template' => 'flyways-events',
      'path' => drupal_get_path('module', 'nas_events') . '/templates',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function nas_events_menu() {
  $items = array();
  $items['admin/content/nas/events/sync'] = array(
    'title' => 'Run events sync from Works',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nas_events_sync_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/events'] = array(
    'title' => 'Events configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nas_events_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['ajax/frontpage-flyways/events/%'] = array(
    'title' => 'Ajax - Frontpage Flyways Events',
    'page callback' => 'nas_events_ajax_flyways_events',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Form builder.
 */
function nas_events_config_form() {
  $form = array();

  $form['events_frontpage_enabled'] = array(
    '#title' => t('Enable events on frontpage flyways block'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('events_frontpage_enabled', 0),
  );

  return system_settings_form($form);
}

/**
 * Callback form for nas/events/sync page.
 */
function nas_events_sync_form($form, &$form_state) {
  $form['nas_events_works_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Works website'),
    '#default_value' => variable_get('nas_events_works_url', NAS_AUDUBON_WORKS_EVENTS_URL),
    '#element_validate' => array('elements_validate_url'),
  );
  $form['nas_events_last_time_processed'] = array(
    '#type' => 'textfield',
    '#title' => t('Start timestamp'),
    '#description' => t('The very initial start timestamp is 1426152117'),
    '#default_value' => variable_get('nas_events_last_time_processed', NAS_AUDUBON_WORKS_START_TIMESTAMP),
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['save'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
    '#submit' => array(
      'nas_events_sync_form_submit_save',
    ),
  );
  $form['actions']['save_sync'] = array(
    '#type' => 'submit',
    '#value' => 'Save & Sync',
    '#submit' => array(
      'nas_events_sync_form_submit_save',
      'nas_events_sync_form_submit_sync',
    ),
  );
  return $form;
}

/**
 * Submit save callback for nas/events/sync page.
 */
function nas_events_sync_form_submit_save($form, &$form_state) {
  $url = $form_state['values']['nas_events_works_url'];
  if (substr($url, -1, 1) !== '/') {
    $url .= '/';
  }
  variable_set('nas_events_works_url', $url);

  variable_set('nas_events_last_time_processed', $form_state['values']['nas_events_last_time_processed']);
}

/**
 * Submit sync callback for nas/events/sync page.
 */
function nas_events_sync_form_submit_sync($form, &$form_state) {
  nas_events_update_nodes();
  drupal_set_message('Synchronization has been completed.');
}

/**
 * Callback for Ajax: Frontpage Flyways - Audubon Near You section.
 */
function nas_events_ajax_flyways_events($state) {
  $items = _nas_events_get_events($state);
  if (!$items) {
    return;
  }
  print theme('flyways_events', array(
    'items' => $items,
  ));
}

/**
 * Helper function to GET Events (3) ready to theme with flyways_events.
 */
function _nas_events_get_events($state = 'all') {
  $items = array();

  $query = db_select('location', 'lc');
  if (!empty($state) and $state != 'all') {
    $query->condition('lc.province', $state, '=');
  }

  $lids = $query->fields('lc', array('lid'))
    ->execute()
    ->fetchCol();

  if (!empty($lids)) {
    $query = new EntityFieldQuery();
    $results = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'event')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_event_location', 'lid', $lids, 'IN')
      ->fieldCondition('field_event_date', 'value', format_date(REQUEST_TIME, 'custom', 'Y-m-d'), '>')
      ->fieldOrderBy('field_event_date', 'value')
      ->range(0, 3)
      ->execute();

    if (!empty($results['node'])) {
      foreach (array_keys($results['node']) as $nid) {
        $node = _i18n_node_load($nid);
        $items[$nid]['nid'] = $node->nid;
        $items[$nid]['title'] = $node->title;
        $items[$nid]['state'] = $state;

        if (!empty($node->field_event_description[LANGUAGE_NONE][0])) {
          $items[$nid]['body'] = check_markup(text_summary($node->field_event_description[LANGUAGE_NONE][0]['value'], $node->field_event_description[LANGUAGE_NONE][0]['format'], 100));
        }
        elseif (!empty($node->body[LANGUAGE_NONE][0])) {
          $items[$nid]['body'] = check_markup(text_summary($node->body[LANGUAGE_NONE][0]['value'], $node->body[LANGUAGE_NONE][0]['format'], 100));
        }
        else {
          $items[$nid]['body'] = '';
        }

        if (isset($node->field_event_date[LANGUAGE_NONE][0]['value'])) {
          $date = strtotime($node->field_event_date[LANGUAGE_NONE][0]['value']);
          $items[$nid]['start_date'] = date('l, F j, Y', $date);
        }
      }
    }
  }

  return $items;
}

/**
 * Implements hook_date_ical_export_post_render_alter() {
 */
function nas_events_date_ical_export_post_render_alter(&$rendered_calendar, $view) {
  $node = _i18n_node_load($view->args[0]);
  if ($node) {
    $filename = drupal_html_class($node->title) . '.ics';
    drupal_add_http_header('Content-Disposition', "attachment; filename=\"$filename\"");
  }
}

/**
 * Implements hook_feeds_after_parse().
 */
function nas_events_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  if ($source->id == 'events_import') {
    foreach ($result->items as &$item) {
      $item['uuid'] = $source->config['FeedsHTTPFetcher']['uuid'];
    }
  }
}

/**
 * Custom function for saving files, modified nas_import_add_existing_file().
 *
 * @see nas_import_add_existing_file()
 */
function nas_events_add_existing_file($url, $type, $uid = 1, $status = FILE_STATUS_PERMANENT, $source_nid = 0) {
  $remote_filepath = parse_url($url, PHP_URL_PATH);
  $cached_filepath = variable_get('nas_cached_files_folder', NAS_FILES_CACHE_DIR) . $remote_filepath;
  if (file_exists($cached_filepath)) {
    $filepath = file_unmanaged_copy($cached_filepath, NULL, FILE_EXISTS_REPLACE);
  }
  else {
    $filepath = _nas_import_system_retrieve_file($url, NULL, FALSE, FILE_EXISTS_REPLACE, $source_nid);
    if (!$filepath) {
      return FALSE;
    }
    $cached_directory = drupal_dirname($cached_filepath);
    file_prepare_directory($cached_directory, FILE_CREATE_DIRECTORY);
    file_unmanaged_copy($filepath, $cached_filepath);
  }

  $files = file_load_multiple(array(), array('uri' => $filepath));
  $file = reset($files);

  if (!$file) {
    $file = (object) array(
      'filename' => basename($filepath),
      'filepath' => $filepath,
      'filemime' => file_get_mimetype($filepath),
      'filesize' => filesize($filepath),
      'uid' => $uid,
      'status' => $status,
      'timestamp' => REQUEST_TIME,
      'uri' => $filepath,
      'type' => $type,
    );
    drupal_write_record('file_managed', $file);
  }
  return $file;
}
