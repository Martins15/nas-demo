<?php

/**
 * @file
 * i18n_pc module routines.
 */

/**
 * Implements hook_ctools_plugin_post_alter().
 *
 * Remove "Edit Panel" contextual link form all panels pages.
 */
function i18n_pc_ctools_plugin_post_alter(&$plugin, &$info) {

  if ($info['type'] == 'task_handlers' && (!isset($plugin['contextual link']) || $plugin['contextual link'] === FALSE)) {
    $plugin['contextual link'] = 'i18n_pc_contextual_link';
  }
}

function i18n_pc_contextual_link(
  $handler = NULL,
  $plugin = NULL,
  $contexts = NULL,
  $args = NULL
) {
  if ($handler == NULL) {
    return ctools_task_handler_default_contextual_link(
      $handler,
      $plugin,
      $contexts,
      $args
    );
  }

  // Links array for contextual links.
  $links = array();

  // Get current system language.
  global $language;
  $lang = $language->language;
  $default_language = variable_get('language_default');
  $languages = language_list('language');

  // Get current page.
  $cur_page = page_manager_get_current_page();
  $cur_page_language = $cur_page['subtask']['subtask']->language;

  // Get tpid for the current page.
  $tpid = $cur_page['subtask']['subtask']->tpid;
  $pid = $cur_page['subtask']['subtask']->pid;

  if ($tpid != 0 && $tpid != $pid) {
    // Current page has source page defined.
    ctools_include('export');
    $task = ctools_export_load_object('page_manager_pages', 'conditions', array('pid' => $tpid));
    $source_page = array_shift($task);
    $source_page_language = $default_language;
    if ($source_page->language != LANGUAGE_NONE) {
      $source_page_language = $languages[$source_page->language];
    }
    $links[] = array(
      // @todo check if Drupal in subfolder.
      'href' => ($default_language->prefix == '') ? $source_page->path : $default_language->prefix . '/' . $source_page->path,
      'title' => t(
        'Source @name page translation',
        array('@name' => $source_page_language->name)
      ),
      'language' => $source_page_language,
    );
  }

  if ($tpid == 0 || $tpid == $pid) {
    // Current page is source or untranslated.
    ctools_include('export');
    $tasks = ctools_export_load_object('page_manager_pages', 'conditions', array('tpid' => $pid));
    if (!empty($tasks)) {
      // Page has translated pages.
      foreach ($tasks as $l_task) {
        $l_task_language = $default_language;
        if ($l_task->language != LANGUAGE_NONE) {
          $l_task_language = $languages[$l_task->language];
        }
        $links[] = array(
          // @todo check if Drupal in subfolder.
          'href' => $l_task->path,
          'title' => t(
            '@name page translation',
            array('@name' => $l_task_language->name)
          ),
          'language' => $l_task_language,
        );
      }
    }
    else {
      // Page has no translations yes.
      $new_languages = $languages;
      unset($new_languages[$default_language->language]);
      // Populate contextual links with links to create translations popups.
      foreach ($new_languages as $language_key => $new_lang_object) {
        $links[] = array(
          'href' => 'admin/structure/pages/i18n_pc/' . $cur_page['subtask']['name'] . '/' . $new_lang_object->language . '/%ctools_js',
          'title' => t(
            'Add @name translation',
            array('@name' => $new_lang_object->name)
          ),
          'attributes' => array(
            'class' => array(
              'ctools-use-modal',
              'ctools-modal-first-popup-style'
            )
          ),
        );
      }
    }

  }

  $all_links = array_merge(
    $links,
    ctools_task_handler_default_contextual_link(
      $handler,
      $plugin,
      $contexts,
      $args
    )
  );

  return $all_links;
}

/**
 * Implements hook_menu().
 */
function i18n_pc_menu() {
  $items['admin/structure/pages/i18n_pc/%ctools_js'] = array(
    'page arguments' => array(1),
    // @todo add access rule.
    'access callback' => TRUE,
    'page callback' => 'i18n_pc_translation_popup_callback',
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/pages/i18n_pc/%/%/%'] = array(
    'page arguments' => array(4, 5, 6),
    // @todo add access rule.
    'access callback' => TRUE,
    'page callback' => 'i18n_pc_translation_popup_callback_new',
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/pages/i18n_pc_redirect/%/%'] = array(
    'page arguments' => array(4, 5),
    // @todo add access rule.
    'access callback' => TRUE,
    'page callback' => 'i18n_pc_translation_redirect',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Popup’s callback function.
 */
function i18n_pc_translation_popup_callback($js = NULL) {

  $popup_content = drupal_render(drupal_get_form('i18n_pc_translation_form'));

  if (!$js) {
    return $popup_content;
  }
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  // Forming a modal window.
  $output = array();
  $output[] = ctools_modal_command_display(
    t('Translate panel page'),
    $popup_content
  );
  print ajax_render($output);
  drupal_exit();
}

/**
 * Popup’s callback function for new translation.
 */
function i18n_pc_translation_popup_callback_new($pname, $lang, $js = NULL) {

  ctools_include('node.pages', 'node', '');
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');


  $form_state = array(
    'ajax' => TRUE,
    'title' => t(
      'Translate panel page to @lang language',
      array('@lang' => $lang)
    ),
  );
  $form_state['build_info']['args'] = array(
    'pname' => $pname,
    'lang' => $lang,
  );
  if (!$js) {
    print drupal_render(
      drupal_build_form('i18n_pc_translation_form', $form_state)
    );
    drupal_exit();
  }
  $form = ctools_modal_form_wrapper('i18n_pc_translation_form', $form_state);

  print ajax_render($form);
  drupal_exit();
}

/**
 * Implement form for panel page translation.
 */
function i18n_pc_translation_form($form, &$form_state) {
  if (isset($form_state['build_info']['args'])) {
    $pname = isset($form_state['build_info']['args']['pname']) ? $form_state['build_info']['args']['pname'] : NULL;
    $lang = isset($form_state['build_info']['args']['lang']) ? $form_state['build_info']['args']['lang'] : NULL;
  }

  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#description' => t('Page administrative title'),
  );

  $form['path'] = array(
    '#title' => t('Redirect to'),
    '#type' => 'textfield',
    '#description' => t('Path URI of the translated page'),
  );
  $form['url'] = array(
    '#type' => 'hidden',
    // The name of the class is the #id of $form['ajax_button'] with "-url"
    // suffix.
    '#attributes' => array('class' => array('i18n-pc-ajax-submit-url')),
    '#value' => url('admin/structure/pages/i18n_pc_redirect/' . $pname . '/' . $lang),
  );

  $form['submit'] = array(
    '#type' => 'button',
    '#value' => t('Save and view clone for translation'),
    '#attributes' => array('class' => array('ctools-use-modal')),
    '#id' => 'i18n-pc-ajax-submit',
  );
  return $form;
}

function i18n_pc_translation_redirect($page, $lang) {

  $languages = language_list('language');
  $redirect_language = $languages[$lang];
  ctools_include('export');

  $page_cache = page_manager_get_page_cache('page-' . $page);
  $l_page = page_manager_page_load($page);
  if (!isset($_POST['title']) || !isset($_POST['path'])) {
    return;
  }
  if ($_POST['title'] != '') {
    $l_page->admin_title = check_plain($_POST['title']);
  }
  if ($_POST['path'] != '') {
    $l_page->path = check_url($_POST['path']);
  }
  $l_page->name = $page_cache->subtask['name'] . '_' . $lang . '_' . drupal_random_key(3);

  $l_page->language = $lang;
  $l_page->tpid = $page_cache->subtask['subtask']->pid;
  // Make redirect handler for cloned page.
  $prepared_language = array();
  foreach ($languages as $h_lang => $h_language) {
    $prepared_language[$h_lang] = ($h_lang == $l_page->language) ? 0 : $h_lang;
  }
  $redirect_handler = i18n_pc_init_redirect_handler(
    $l_page->name,
    $page_cache->subtask['admin path'],
    $l_page->name,
    $prepared_language
  );
  $prepared_handlers = array_merge($page_cache->handlers, $redirect_handler);
  $export = page_manager_page_export($l_page, $prepared_handlers);
  ob_start();
  eval($export);
  ob_end_clean();

  $task_name = page_manager_make_task_name('page', $page->name);
  $cache = new stdClass();

  page_manager_page_new_page_cache($page, $cache);
  page_manager_set_page_cache($cache);

  page_manager_save_page_cache($cache);

  // @todo Clone source panel $page and make it as translation to $lang.
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands = array();
  // $redirect_url = ($redirect_language->prefix == '') ? $l_page->path : $redirect_language->prefix . '/' . $l_page->path;
  $redirect_url = $l_page->path;
  $commands[] = ctools_ajax_command_redirect($redirect_url, 0, array('language' => $redirect_language));
  print ajax_render($commands);
  exit;
}

/**
 * Init new handler.
 *
 * @param $subtask
 *   Subtask name to be attached to.
 * @param $destination
 *   Redirect destination in case of language detected.
 * @param $name
 *   Unique name of the handler.
 * @param array $language
 *   Language array with key = key_name for TRUE.
 *
 * @return \stdClass
 *   Object of the handler to be saved.
 */
function i18n_pc_init_redirect_handler($subtask, $destination, $name = '', $language = array()) {

// For redirecting to destination if language if English or Default.
  // en is default here.
//  $language = array(
//    'default' => 'default',
//    'en' => 'en',
//    'es' => 0,
//  );

  // Obtain new unique name in case of already has one in database.
  if ($name == '') {
    $name = truncate_utf8($subtask, 46);
  }

  // Check if name is already within db, make it unique.
  $random_name = $name;
  if ($name != $subtask) {
    while (db_select('page_manager_handlers', 'p')
      ->fields('p', array('did'))
      ->condition('name', $random_name)
      ->execute()
      ->fetchCol()) {
      $random_name = $name . drupal_random_key();
    }
  }

  $handler = new stdClass();
  $handler->disabled = FALSE; /* Edit this to true to make a default handler disabled initially */
  $handler->api_version = 1;
  $handler->name = $random_name;
  $handler->task = 'page';
  $handler->subtask = $subtask;
  $handler->handler = 'http_response';
  $handler->weight = 1;
  $handler->conf = array(
    'title' => 'HTTP response code',
    'contexts' => array(),
    'relationships' => array(),
    'code' => '301',
    'destination' => $destination,
    'name' => 'http_response_code',
    'access' => array(
      'plugins' => array(
        0 => array(
          'name' => 'site_language',
          'settings' => array(
            'language' => $language,
          ),
          'not' => FALSE,
        ),
      ),
    ),
  );
  $output = array($handler->name => $handler);
  return $output;
}