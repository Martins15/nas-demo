<?php

/**
 * @file
 * Field module functionality for Facebook Instant Articles Display module.
 */

/**
 * Implements hook_field_formatter_view().
 */
function nas_fbia_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Grab the InstantArticle object we're going to be building up. If it's not
  // present, it means that a site admin selected an FB IA field formatter for
  // a non-FB IA content type.
  if (!isset($entity->fb_instant_article)) {
    return FALSE;
  }

  $article = $entity->fb_instant_article;
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $layout_settings = fb_instant_articles_display_get_layout_settings($entity_type, $bundle);
  // @codingStandardsIgnoreStart
  \Drupal\nas_fbia\EntityFieldMapper::create($layout_settings, $article)
    ->map($field, $instance, $langcode, $items, $display);
  // @codingStandardsIgnoreEnd
}

/**
 * Implements hook_field_formatter_info().
 */
function nas_fbia_field_formatter_info() {
  $formats = array();

  $formats['fbia_media_formatter'] = array(
    'label' => t('FBIA Image (NAS)'),
    'field types' => array('media'),
    'settings'  => array(
      'style' => 'medium',
      'caption' => '',
      'credit' => '',
      'author' => '',
      'likes' => '',
      'comments' => '',
      'fullscreen' => '',
    ),
  );

  $formats['fbia_media_slideshow_formatter'] = array(
    'label' => t('FBIA Slideshow (NAS)'),
    'field types' => array('image', 'media'),
    'settings'  => array(
      'style' => 'medium',
      'caption' => '',
      'credit' => '',
      'author' => '',
      'likes' => '',
      'comments' => '',
      'fullscreen' => '',
    ),
  );

  return $formats;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function nas_fbia_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {

    case 'fbia_media_formatter':
    case 'fbia_media_slideshow_formatter':
      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      $element['style'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );
      $element['caption'] = array(
        '#type' => 'checkbox',
        '#description' => t('The caption uses the caption field of the file entity.'),
        '#title' => t('Enable caption.'),
        '#default_value' => $settings['caption'],
      );
      $element['credit'] = array(
        '#type' => 'checkbox',
        '#description' => t('The credit uses the credit field of the file entity.'),
        '#title' => t('Enable credit.'),
        '#default_value' => $settings['credit'],
      );
      $element['likes'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable Facebook Likes. (data-feedback)'),
        '#default_value' => $settings['likes'],
      );
      $element['comments'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable Facebook Comments. (data-feedback)'),
        '#default_value' => $settings['comments'],
      );
      $element['fullscreen'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable Fullscreen.'),
        '#default_value' => $settings['fullscreen'],
      );
      break;

  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function nas_fbia_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  switch ($display['type']) {

    case 'fbia_media_formatter':
    case 'fbia_media_slideshow_formatter':
      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      // Unset possible 'No defined styles' option.
      unset($image_styles['']);
      // Styles could be lost because of enabled/disabled modules that defines
      // their styles in code.
      if (isset($image_styles[$settings['style']])) {
        $summary = t('Image style: @style', array('@style' => $image_styles[$settings['style']]));
      }
      else {
        $summary = t('Original image');
      }
      break;

  }
  return $summary;
}

/**
 * Implements hook_fb_instant_articles_article_alter().
 *
 * @see fb_instant_articles_display_module_implements_alter()
 */
function nas_fbia_fb_instant_articles_article_alter($instantArticle, $context) {
  if (!isset($context['entity_type']) || !isset($context['entity'])) {
    return FALSE;
  }

  $wrapper = entity_metadata_wrapper('node', $context['entity']);

  // @var \Facebook\InstantArticles\Elements\Header $header
  $header = $instantArticle->getHeader();
  // Author.
  $info = $wrapper->getPropertyInfo();
  // @codingStandardsIgnoreStart
  if (isset($info['field_author']) && $contact_node = $wrapper->field_author->value()) {
    $header->withAuthors([\Facebook\InstantArticles\Elements\Author::create()->withName($contact_node->title)]);
  }
  else {
    $header->withAuthors([\Facebook\InstantArticles\Elements\Author::create()->withName('@NationalAudubonSociety')]);
  }
  // @codingStandardsIgnoreEnd

  if ($section = nas_search_get_article_section($context['entity'], array(), '', 'node')) {
    $header->withKicker($section->name);
  }
}

/**
 * Implements hook_fb_instant_articles_transformer_rules_alter().
 */
function nas_fbia_fb_instant_articles_transformer_rules_alter(&$rules) {
  $rules[] = [
    'class' => 'ImageRule',
    'properties' => [
      'image.url' => [
        'attribute' => 'src',
        'selector' => 'img',
        'type' => 'string',
      ],
      'image.like' => [
        'attribute' => 'src',
        'selector' => 'img',
        'type' => 'exists',
      ],
    ],
    'selector' => '.article-image',
  ];
  $rules[] = [
    'class' => '\Drupal\nas_fbia\SlideshowImageLikeRule',
    'properties' => [
      'image.url' => [
        'attribute' => 'src',
        'selector' => 'img',
        'type' => 'string',
      ],
      'caption.title' => [
        'selector' => '.image-caption',
        'type' => 'string',
      ],
      'caption.credit' => [
        'selector' => '.credit-value',
        'type' => 'string',
      ],
    ],
    'selector' => '.slide',
  ];
  $rules[] = [
    'class' => 'VideoRule',
    'properties' => [
      'video.url' => [
        'attribute' => 'src',
        'selector' => 'source',
        'type' => 'string',
      ],
      'video.like' => [
        'selector' => '.article-video-container',
        'attribute' => 'src',
        'type' => 'exists',
      ],
    ],
    'selector' => '.article-video-container',
  ];

  $rules[] = [
    'class' => 'SocialEmbedRule',
    'selector' => '.article-audio-container',
    'properties' => [
      'socialembed.iframe' => [
        'selector' => '.content',
        'type' => 'children',
      ],
    ],
  ];
  $rules[] = [
    'class' => 'SlideshowRule',
    'selector' => '.slideshow',
  ];
  $rules[] = [
    'class' => 'CaptionRule',
    'selector' => 'figcaption',
  ];
  $rules[] = [
    'class' => 'CaptionCreditRule',
    'selector' => '.credit-value',
  ];
  $rules[] = [
    'class' => 'IgnoreRule',
    'selector' => '.credit-intro',
  ];
  $rules[] = [
    'class' => 'PassThroughRule',
    'selector' => '.slideshow-wrapper',
  ];
  $rules[] = [
    'class' => 'PassThroughRule',
    'selector' => '.slideshow-scroller',
  ];
  $rules[] = [
    'class' => 'PassThroughRule',
    'selector' => '.credit-value a',
  ];

}

/**
 * Implements hook_preprocess_THEME().
 */
function nas_fbia_preprocess_views_view_row_fia(&$variables) {
  $item = &$variables['row'];

  $variables['title'] = check_plain($item->title);
  $variables['link'] = check_url($item->link);
  $variables['content'] = $item->content;

  $item = $variables['row'];
  if (!empty($item->elements['author'])) {
    $item->elements['author'] = '@NationalAudubonSociety';
  }
  if (!empty($item->elements['guid'])) {
    $item->elements['guid'] = $item->node->uuid;
  }
  $variables['item_elements'] = empty($item->elements) ? '' : format_xml_elements($item->elements);
}
