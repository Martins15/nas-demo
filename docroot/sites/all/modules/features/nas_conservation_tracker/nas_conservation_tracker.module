<?php
/**
 * @file
 * Code for the NAS Conservation Tracker feature.
 */

include_once 'nas_conservation_tracker.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function nas_conservation_tracker_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_init().
 */
function nas_conservation_tracker_init() {
  drupal_add_css(drupal_get_path('module', 'nas_conservation_tracker'), '/css/nas_conservation_tracker.css');
  _nas_conservation_tracker_get_real_path(TRUE);
}

/**
 * Implements hook_init().
 */
function _nas_conservation_tracker_get_real_path($load = FALSE) {
  $current_sections = $sections = arg();
  $path = array_pop($sections);
  $types = variable_get('nas_conservation_tracker_tabs', array('threats', 'actions', 'responses', 'partners'));
  if (in_array($path, $types)) {
    $alias = implode('/', $sections);
    $source = drupal_get_normal_path($alias);
    if (strpos($source, 'node/') === 0) {
      if ($load) {
        menu_execute_active_handler($source);
        drupal_exit();
      }
      return $source;
    }
  }

  return  implode('/', $current_sections);
}

/**
 * Implements hook_menu().
 */
function nas_conservation_tracker_menu() {
  $items = array();
  $items['conservation-tracker/ajax/scorecard/%/%'] = array (
    'title' => 'Get data for scorecard',
    'page callback' => 'nas_conservation_tracker_get_scorecard_json',
    'page arguments' => array(3,4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function nas_conservation_tracker_libraries_info() {
  $libraries = array();

  $lib_info = array(
    'vendor url' => 'http://audubon.org',
    'path' => 'js',
    'library path' => drupal_get_path('module', 'nas_conservation_tracker'),
    'dependencies' => array('d3'),
    'version' => '1',
  );

  $libs = array(
    'ct_linegraph' => 'CT Line Graph',
    'ct_circular' => 'CT Circular',
    'ct_bar' => 'CT Bar Graph',
    'ct_bar_horizontal' => 'CT Bar Horizontal Graph',
  );

  foreach ($libs as $filename => $name) {
    $key = 'd3.' . $filename;
    $libraries[$key] = $lib_info;
    $libraries[$key]['files']['js'][] = $filename . '.js';
  }

  return $libraries;
}

/**
 * Implements hook_libraries_info_alter().
 */
function nas_conservation_tracker_libraries_info_alter(&$libraries) {
  $libraries['leaflet']['version arguments']['lines'] = 137000;
  $libraries['leaflet']['version arguments']['cols'] = 150000;
}

/**
 * Implements hook_theme().
 */
function nas_conservation_tracker_theme() {
  $theme = array(
    'ct_scorecard_header' => array(
      'variables' => array(
        'name' => NULL,
        'subtitle' => NULL,
        'image' => NULL,
        'description' => NULL,
      ),
      'template' => 'templates/ct-scorecard-header',
    ),
    'ct_scorecard_tabs' => array(
      'variables' => array(
        'menu_tree' => NULL,
        'tabs' => NULL,
      ),
      'template' => 'templates/ct-scorecard-tabs',
    ),
    'ct_scorecard_tabs' => array(
      'variables' => array(
        'menu_tree' => NULL,
        'tabs' => NULL,
      ),
      'template' => 'templates/ct-scorecard-tabs',
    ),
    'ct_scorecard_overview' => array(
      'variables' => array(
        'data' => NULL,
        /*
        'title' => NULL,
        'description' => NULL,
        'application' => NULL,
        'thumbnail' => NULL,
        'youtube' => NULL,
        'tagline' => NULL,
        */
      ),
      'template' => 'templates/ct-scorecard-overview',
    ),
    'ct_scorecard_main' => array(
      'variables' => array(
        'map' => NULL,
        'form' => NULL,
      ),
      'template' => 'templates/ct-scorecard-main',
    ),
    'ct_scorecard_carousel' => array(
      'variables' => array(
        'title' => NULL,
        'items' => NULL,
      ),
      'template' => 'templates/ct-scorecard-carousel',
    ),
  );
  return $theme;
}

/**
 * Get JSON object from hub.
 * @param $path
 */
function nas_conservation_tracker_get_json($path) {
  // @TODO: swap this for real data hub.
  $demo_url = '';
  $json_data = NULL;
  if (variable_get('nas_conservation_tracker_api_cache_enabled', TRUE)) {
    $cid = 'nas_conservation_tracker:' . md5($path);
    $data = cache_get($cid);
    if (!empty($data->data)) {
      $json_data = $data->data;
    }
  }

  if (empty($json_data)) {
    $json_url = rtrim(variable_get('nas_conservation_tracker_endpoint', $demo_url), '\/') . '/' . $path . '.json';
    watchdog('ct debug', 'JSON URL - ' . $json_url);
    $request = drupal_http_request($json_url);
    $json_data = drupal_json_decode($request->data);
    if (variable_get('nas_conservation_tracker_api_cache_enabled', TRUE)) {
      cache_set($cid, $json_data);
    }
  }
  return $json_data;
}

/**
 * Get Score card data.
 * @param $id
 */
function nas_conservation_tracker_get_scorecard_json($id, $type = 'actions') {
  $result = array('data' => array(), 'success' => 0);
  if (!empty($id) && is_numeric($id)) {
    $data = nas_conservation_tracker_get_json('scorecard-' . $id);
    $types = variable_get('nas_conservation_tracker_tabs', array('threats', 'actions', 'responses', 'partners'));
    if (!in_array($type, $types)) {
      $type = 'actions';
    }
    foreach ($types as $item) {
      if ($item != $type) {
        unset($data[$item]);
      }
    }

    $result['data'] = $data;
    if (!empty($result['data'])) {
      $result['success'] = 1;
    }
  }
  drupal_json_output($result);
}

/**
 * Implements hook_node_view().
 * @param $node
 * @param $view_mode
 * @param $langcode
 */
function nas_conservation_tracker_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'ct_scorecard' && $view_mode == 'full') {
    $arg = arg();
    $path = array_pop($arg);
    $tabs = variable_get('nas_conservation_tracker_tabs', array('threats', 'actions', 'responses', 'partners'));
    if (!in_array($path, $tabs)) {
      $json = nas_conservation_tracker_get_json('scorecard-' . $node->field_scorecard_id[LANGUAGE_NONE][0]['value']);
      $tab = (!empty($json['settings']['tabDefault']) && in_array($json['settings']['tabDefault'], $tabs)) ?
        $json['settings']['tabDefault'] : $tabs[0];
      drupal_goto(request_path() . '/' . $tab);
    }
  }
}

/**
 * Implements hook_cron().
 */
function nas_conservation_tracker_cron() {
  nas_conservation_tracker_load_species();
}

/**
 * Load species from datahub and create custom entities.
 */
function nas_conservation_tracker_load_species() {
  $path = 'species';
  $cid = 'nas_conservation_tracker:' . md5($path);
  cache_clear_all($cid, 'cache');
  $data = nas_conservation_tracker_get_json($path);
  // Bundle name same as entity name.
  $entity_type = 'ct_species';
  foreach ($data as $species) {
    $entity = nas_conservation_tracker_get_entity($species['id'], $entity_type);
    if (!$entity) {
      $entity = entity_create($entity_type, array('type' => $entity_type));
    }
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    //echo'<pre>';
    //print_r($wrapper);
    //die;
    if (!empty($species['id'])) {
      $wrapper->field_ct_remote_id->set($species['id']);
    }
    if (!empty($species['commonName'])) {
      $wrapper->title->set($species['commonName']);
      $wrapper->field_ct_common_name->set($species['commonName']);
    }
    if (!empty($species['scientificName'])) {
      $wrapper->field_ct_scientific_name->set($species['scientificName']);
    }
    if (!empty($species['scoreCard'])) {
      $wrapper->field_ct_score_card->set($species['scoreCard']);
      $wrapper->field_ct_score_card_url->set(nas_conservation_tracker_scorecard_url($species['scoreCard']));
    }
    if (!empty($species['image'])) {
      $wrapper->field_ct_image->set($species['image']);
    }
    if (!empty($species['dropped'])) {
      $wrapper->field_ct_dropped->set($species['dropped']);
    }
    if (!empty($species['climateStatus'])) {
      $wrapper->field_ct_climate_status->set($species['climateStatus']);
    }
    if (!empty($species['stateOfBirds'])) {
      $wrapper->field_ct_state_of_birds->set($species['stateOfBirds']);
    }
    if (!empty($species['alphaCode'])) {
      $wrapper->field_ct_alpha_code->set($species['alphaCode']);
    }
    if (!empty($species['parent'])) {
      $wrapper->field_ct_parent->set($species['parent']);
    }
    if (!empty($species['strategyInitiativeId'])) {
      $wrapper->field_ct_strategy_initiative_id->set($species['strategyInitiativeId']);
    }
    if (!empty($species['iucn'])) {
      $wrapper->field_ct_iucn->set($species['iucn']);
    }
    if (!empty($species['guild'])) {
      $wrapper->field_ct_guild->set($species['guild']);
    }
    $wrapper->save();
  }
}

/**
 * Load entity by remote id.
 */
function nas_conservation_tracker_get_entity($remote_id, $entity_type) {
  $entities = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_type)
    ->fieldCondition('field_ct_remote_id', 'value', $remote_id, '=');
  $result = $query->execute();
  if (isset($result[$entity_type])) {
    $entity_ids = array_keys($result[$entity_type]);
    $entity = entity_load($entity_type, $entity_ids);
    return current($entity);
  }
}

/**
 * Implements hook_search_api_index_reindex().
 */
function nas_conservation_tracker_search_api_index_reindex(SearchApiIndex $index, $clear = FALSE) {
  nas_conservation_tracker_load_species();
}

function nas_conservation_tracker_scorecard_url($scorecard) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->entityCondition('bundle', 'ct_scorecard')
    ->fieldCondition('field_scorecard_id', 'value', (int)$scorecard, '=')
    ->execute();
  $nid = current(array_keys($result['node']));
  return drupal_get_path_alias('node/' . $nid);
}

function nas_conservation_tracker_get_image($name) {
  $files = file_load_multiple(array(), array('filename' => $name));
  $file =  reset($files);
  if (empty($file)) {
    $image_url = variable_get('nas_conservation_tracker_endpoint') . '/' . $name;
    if (file_exists($image_url)) {
      $file = file_save_data(file_get_contents($image_url), 'public://' . basename($image_url));
      $file->status = 1;
      return $file->fid;
    }
    return FALSE;
  }
  else {
    return $file->fid;
  }

}

