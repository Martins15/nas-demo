<?php
/**
 * @file
 * Code for the NAS Park feature feature.
 */

include_once 'nas_park_feature.features.inc';

/**
 * Implements hook_init().
 */
function nas_park_feature_init() {
  if ( variable_get('nas_park_climate_auth_protection', TRUE)) {
    $path = current_path();
    $path_alias = drupal_lookup_path('alias', $path);
    $patterns =  variable_get('nas_park_climate_auth_protection_pattern', 'climate/national-parks*');

    if (drupal_match_path($path, $patterns) || drupal_match_path($path_alias, $patterns)) {
      $user = variable_get('nas_park_climate_auth_user', 'audubon');
      if (!$user) {
        return;
      }

      // allow Drush to bypass Shield
      if (drupal_is_cli()) {
        return;
      }

      $pass = variable_get('nas_park_climate_auth_pass', 'F0rth3b1rds!');
      if (!empty($_SERVER['PHP_AUTH_USER']) && isset($_SERVER['PHP_AUTH_PW'])
        && $_SERVER['PHP_AUTH_USER'] == $user
        && $_SERVER['PHP_AUTH_PW']   == $pass) {
        return;
      }

      $print = 'Hello, user: [user], pass: [pass]!';
      header(sprintf('WWW-Authenticate: Basic realm="%s"', strtr($print, array('[user]' => $user, '[pass]' => $pass))));
      header('HTTP/1.0 401 Unauthorized');
      exit;
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function nas_park_feature_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function nas_park_feature_form_park_node_form_alter(&$form, &$form_state, $form_id) {
  $states = $form['field_state'][LANGUAGE_NONE]['#options'];
  unset($states['_none']);
  foreach ($states as $tid => $title) {
    $term = taxonomy_term_load($tid);
    if($term->field_country_us_ca[LANGUAGE_NONE][0]['value'] != 'us') {
      unset($form['field_state'][LANGUAGE_NONE]['#options'][$tid]);
    }
  }

  // Draw relations tables.
  if(!empty($form['#node']->nid)) {
    $nodes = nas_park_feature_get_parks_to_bird_relations($form['#node']->nid);
    $summer = array();
    $winter = array();
    $header = array('Link', 'Trend');
    foreach ($nodes as $node) {
      $title = explode('|', $node->title);
      $row = array(
        l($title[1], 'node/' . $node->field_bird_reference[LANGUAGE_NONE][0]['target_id']),
        $node->field_park_trend[LANGUAGE_NONE][0]['value'],
      );
      if (strtolower($node->field_park_season[LANGUAGE_NONE][0]['value']) == 'summer') {
        $summer[] = $row;
      }
      else {
        $winter[] = $row;
      }
    }
    $seasons = array('s' => 'summer', 'w' => 'winter');
    foreach ($seasons as $key => $season) {
      $table_relation = 'table_relation_' . $key;
      $form[$table_relation] = array(
        '#type' => 'fieldset',
        '#title' => t('Relations'),
        '#weight' => 30,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form[$table_relation]['table'] = array(
        '#type' => 'table',
        '#rows' => $$season,
        '#header' => $header,
      );
      $form['#groups']['group_seasons_' . $season]->childer[] = $table_relation;
      $form['#group_children'][$table_relation] = 'group_seasons_' . $season;
    }
  }
}

/**
 * Helper function to load images.
 */
function nas_park_feature_get_image($name, $return_fid = FALSE) {
  $files = file_load_multiple(array(), array('filename' => $name));
  $file = reset($files);
  $image_url = variable_get('nas_park_feature_assets', 'sites/all/themes/custom/nas/img/climate-landing') . '/' . $name;
  if (empty($file)) {
    if (file_exists($image_url)) {
      $file = file_save_data(file_get_contents($image_url), 'public://' . basename($image_url));
      $file->status = 1;
      return $return_fid ? $file->fid : $file;
    }
    return FALSE;
  }
  else {
    if (!file_exists($file->uri)) {
      if (file_exists($image_url)) {
        file_put_contents('public://' . basename($image_url), file_get_contents($image_url));
        return $file;
      }
    }
    return $return_fid ? $file->fid : $file;
  }
}

/**
 * Helper function to get parks -> birds relations.
 */
function nas_park_feature_get_parks_to_bird_relations($park_node_id) {
  $relations = db_select('field_data_field_park_reference', 'pr')
    ->fields('pr', array('entity_id'))
    ->condition('pr.field_park_reference_target_id', $park_node_id, '=')
    ->execute()
    ->fetchAll();
  $nodes = array();
  if(!empty($relations)){
    foreach ($relations as $relation) {
      $nodes[] = node_load($relation->entity_id);
    }
  }
  return $nodes;
}

/**
 * Implements hook_panelizer_pre_render_alter().
 */
function nas_park_feature_panelizer_pre_render_alter($panelizer, $display, &$entity) {
  if ($entity->type == 'park' && empty($entity->field_park_description_secondary)) {
    $default_value = variable_get('field_park_description_secondary_global', '');
    $entity->field_park_description_secondary[LANGUAGE_NONE][0]['value'] = $default_value['value'];
    $entity->field_park_description_secondary[LANGUAGE_NONE][0]['safe_value'] = $default_value['value'];
    $entity->field_park_description_secondary[LANGUAGE_NONE][0]['format'] = $default_value['format'];
  }
}

/**
 * Implements hook_menu().
 */
function nas_park_feature_menu() {
  $items = [];

  $items['admin/config/content/park-global-settings'] = [
    'title' => 'Park Global Settings',
    'description' => 'A form to set global setting s for park.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['nas_park_feature_form'],
    'access callback' => TRUE,
  ];

  return $items;
}

/**
 * Implements hook_form().
 */
function nas_park_feature_form($form, &$form_state) {
  $default_value = array('value' => '', 'format' => 'full_html');

  $field = variable_get('field_birds_s_species_desc_global', $default_value);
  $form['field_birds_s_species_desc_global'] = [
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#format' => isset($field['format']) ? $field['format'] : NULL,
    '#title' => 'Number of Current Species description (Summer)',
    '#default_value' => $field['value'],
    '#cols' => 60,
    '#rows' => 5,
  ];

  $field = variable_get('field_birds_s_extirpations_desc_global', $default_value);
  $form['field_birds_s_extirpations_desc_global'] = [
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#format' => isset($field['format']) ? $field['format'] : NULL,
    '#title' => 'Potential Extirpations description (Summer)',
    '#default_value' => $field['value'],
    '#cols' => 60,
    '#rows' => 5,
  ];

  $field = variable_get('field_birds_s_colonizations_desc_global', $default_value);
  $form['field_birds_s_colonizations_desc_global'] = [
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#format' => isset($field['format']) ? $field['format'] : NULL,
    '#title' => 'Potential Colonizations description (Summer)',
    '#default_value' => $field['value'],
    '#cols' => 60,
    '#rows' => 5,
  ];

  $field = variable_get('field_birds_w_species_desc_global', $default_value);
  $form['field_birds_w_species_desc_global'] = [
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#format' => isset($field['format']) ? $field['format'] : NULL,
    '#title' => 'Number of Current Species description winter',
    '#default_value' => $field['value'],
    '#cols' => 60,
    '#rows' => 5,
  ];

  $field = variable_get('field_birds_w_extirpations_desc_global', $default_value);
  $form['field_birds_w_extirpations_desc_global'] = [
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#format' => isset($field['format']) ? $field['format'] : NULL,
    '#title' => 'Potential Extirpations description (Winter)',
    '#default_value' => $field['value'],
    '#cols' => 60,
    '#rows' => 5,
  ];

  $field = variable_get('field_birds_w_colonizations_desc_global', $default_value);
  $form['field_birds_w_colonizations_desc_global'] = [
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#format' => isset($field['format']) ? $field['format'] : NULL,
    '#title' => 'Potential Colonizations description (Winter)',
    '#default_value' => $field['value'],
    '#cols' => 60,
    '#rows' => 5,
  ];


  $field = variable_get('field_park_description_secondary_global', $default_value);
  $form['field_park_description_secondary_global'] = [
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#format' => isset($field['format']) ? $field['format'] : NULL,
    '#title' => 'Park description secondary',
    '#default_value' => $field['value'],
    '#cols' => 60,
    '#rows' => 5,
  ];

  $field = variable_get('field_birds_species_tooltip', '');
  $form['field_birds_species_tooltip'] = [
    '#type' => 'textfield',
    '#title' => 'Current Species tooltip',
    '#default_value' => $field,
  ];

  $field = variable_get('field_birds_extirpations_tooltip', '');
  $form['field_birds_extirpations_tooltip'] = [
    '#type' => 'textfield',
    '#title' => 'Potential Extirpations tooltip',
    '#default_value' => $field,
  ];

  $field = variable_get('field_birds_colonizations_tooltip', '');
  $form['field_birds_colonizations_tooltip'] = [
    '#type' => 'textfield',
    '#title' => 'Potential Colonizations  tooltip',
    '#default_value' => $field,
  ];


  $form['submit_button'] = [
    '#type' => 'submit',
    '#value' => t('Save'),
  ];

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function nas_park_feature_form_submit($form, &$form_state) {
  $fields = [
    'field_birds_s_species_desc_global',
    'field_birds_s_extirpations_desc_global',
    'field_birds_s_colonizations_desc_global',
    'field_birds_w_species_desc_global',
    'field_birds_w_extirpations_desc_global',
    'field_birds_w_colonizations_desc_global',
    'field_park_description_secondary_global',
    'field_birds_species_tooltip',
    'field_birds_extirpations_tooltip',
    'field_birds_colonizations_tooltip',
  ];
  foreach ($fields as $field) {
    variable_set($field, $form_state['values'][$field]);
  }
  drupal_set_message("Values successfully saved");
}

function nas_park_feature_add_chart_assets() {
  $module_path = drupal_get_path('module', 'nas_park_feature');
  drupal_add_css($module_path . '/css/stamen-audubon-parks.css');
  drupal_add_js($module_path . '/js/lib/d3.v4.min.js');
  drupal_add_js($module_path . '/js/polyfill_array_prototype_find.js');
  drupal_add_js($module_path . '/js/lib/stamen-audubon-parks.js');
  drupal_add_js($module_path . '/js/nas_park_feature.js');

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'park')
    ->propertyCondition('status', '1')
    ->execute();

  $cid = 'nas_park_feature_park_links';
  $park_links_cache = cache_get($cid);
  if ($park_links_cache) {
    $park_links = $park_links_cache->data;
  }
  else {
    $park_links = array();
    foreach ($result['node'] as $nid => $value) {
      $node = node_load($nid);
      $park_links[$node->title] = drupal_get_path_alias('node/' . $nid);
    }
    cache_set($cid, $park_links);
  }

  drupal_add_js([
    'nasClimateFeature' => [
      'parkLinks' => $park_links,
    ],
  ], 'setting');
}

/**
 * Implements hook_theme().
 */
function nas_park_feature_theme() {
  $theme = array(
    'nas_park_map' => array(
      'variables' => array(
        'container_class' => NULL,
        'trend' => NULL,
      ),
      'template' => 'templates/nas-park-map',
    ),
  );
  return $theme;
}
