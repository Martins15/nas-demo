diff --git a/expire.admin.inc b/expire.admin.inc
index b6f19b6..b9ab8f8 100644
--- a/expire.admin.inc
+++ b/expire.admin.inc
@@ -622,6 +622,81 @@ function expire_admin_settings_form() {
     }
   }
 
+  // Panels settings.
+  if (module_exists('panels')) {
+    $form['tabs']['panels'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('Panels expiration'),
+      '#group' => 'tabs',
+      '#weight' => 7,
+    );
+
+    $form['tabs']['panels']['actions'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('Panels actions'),
+    );
+
+    $form['tabs']['panels']['actions']['expire_panels_actions'] = array(
+      '#type' => 'checkboxes',
+      '#description' => t('Page cache for panels will be flushed after selected actions.'),
+      '#options' => array(
+        EXPIRE_PANELS_DISPLAY_UPDATE => t('Panel display update'),
+        EXPIRE_PANELS_DISPLAY_DELETE => t('Panel display delete'),
+      ),
+      '#default_value' => variable_get('expire_panels_actions', array()),
+    );
+
+    $form['tabs']['panels']['expire'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('What URLs should be expired when panels action is triggered?'),
+    );
+
+    $form['tabs']['panels']['expire']['expire_panels_front_page'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Front page'),
+      '#description' => t('Expire url of the site front page'),
+      '#default_value' => variable_get('expire_panels_front_page', EXPIRE_PANELS_FRONT_PAGE),
+    );
+
+    $form['tabs']['panels']['expire']['expire_panels_panel_page'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Panels page'),
+      '#description' => t('Expire url of the expiring panel page.'),
+      '#default_value' => variable_get('expire_panels_panel_page', EXPIRE_PANELS_PANEL_PAGE),
+    );
+
+    // Panelizer settings.
+    if (module_exists('panelizer')) {
+      $form['tabs']['panels']['expire']['expire_panels_panelizer_page'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('Panelizer page'),
+        '#description' => t('Expire url of the expiring panelizer page.'),
+        '#default_value' => variable_get('expire_panels_panelizer_page', EXPIRE_PANELS_PANELIZER_PAGE),
+      );
+    }
+
+    $form['tabs']['panels']['expire']['expire_panels_custom'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Custom pages'),
+      '#description' => t('Expire user-defined custom urls.'),
+      '#default_value' => variable_get('expire_panels_custom', EXPIRE_PANELS_CUSTOM),
+    );
+
+    $form['tabs']['panels']['expire']['expire_panels_custom_pages'] = array(
+      '#type' => 'textarea',
+      '#title' => t('Enter custom URLs'),
+      '#description' => t('Enter one relative URL per line. It can be the path of a node (e.g. !example1) or of any alias (e.g. !example2). However, it has to be the final URL, not a redirect (use the !link1 and !link2 modules).', array('!example1' => '<strong>user/[user:uid]</strong>', '!example2' => '<strong>my/path</strong>', '!link1' => l('Global Redirect', 'https://drupal.org/project/globalredirect'), '!link2' => l('Redirect', 'https://drupal.org/project/redirect'))) . '<br/>'
+        . t('If you want to match a path with any ending, add "|wildcard" to the end of the line (see !link1 for details). Example: !example1 will match !example1a, but also !example1b, !example1c, etc.', array('!link1' => l('function cache_clear_all', 'https://api.drupal.org/api/drupal/includes%21cache.inc/function/cache_clear_all/7'), '!example1' => '<strong>my/path|wildcard</strong>', '!example1a' => '<strong>my/path</strong>', '!example1b' => '<strong>my/path/one</strong>', '!example1c' => '<strong>my/path/two</strong>')) . '<br/>'
+        . t('You may use tokens here.'),
+      '#states' => array(
+        'visible' => array(
+          ':input[name="expire_panels_custom"]' => array('checked' => TRUE),
+        ),
+      ),
+      '#default_value' => variable_get('expire_panels_custom_pages'),
+    );
+  }
+
   return system_settings_form($form);
 }
 
diff --git a/expire.info b/expire.info
index d57f3c5..1dccfa8 100644
--- a/expire.info
+++ b/expire.info
@@ -14,3 +14,4 @@ files[] = includes/expire.node.inc
 files[] = includes/expire.user.inc
 files[] = includes/expire.votingapi.inc
 files[] = includes/expire.file.inc
+files[] = includes/expire.panels.inc
diff --git a/expire.module b/expire.module
index 82efa3b..dc27b75 100644
--- a/expire.module
+++ b/expire.module
@@ -52,6 +52,10 @@ define('EXPIRE_MENU_LINK_INSERT', 1);
 define('EXPIRE_MENU_LINK_UPDATE', 2);
 define('EXPIRE_MENU_LINK_DELETE', 3);
 
+// Panels actions.
+define('EXPIRE_PANELS_DISPLAY_UPDATE', 1);
+define('EXPIRE_PANELS_DISPLAY_DELETE', 2);
+
 // Debug levels.
 define('EXPIRE_DEBUG_DISABLED', 0);
 define('EXPIRE_DEBUG_WATCHDOG', 1);
@@ -84,6 +88,10 @@ define('EXPIRE_VOTINGAPI_CUSTOM'                , FALSE);
 define('EXPIRE_FILE_FILE'                       , FALSE);
 define('EXPIRE_FILE_FRONT_PAGE'                 , FALSE);
 define('EXPIRE_FILE_CUSTOM'                     , FALSE);
+define('EXPIRE_PANELS_PANEL_PAGE'               , FALSE);
+define('EXPIRE_PANELS_PANELIZER_PAGE'           , FALSE);
+define('EXPIRE_PANELS_FRONT_PAGE'               , FALSE);
+define('EXPIRE_PANELS_CUSTOM'                   , FALSE);
 
 /**
  * Implementation of hook_menu().
@@ -245,6 +253,22 @@ function expire_menu_link_insert($link) {
 }
 
 /**
+ * Implements hook_panels_display_save().
+ */
+function expire_panels_display_save($display) {
+  expire_execute_expiration('panels', $display, EXPIRE_PANELS_DISPLAY_UPDATE);
+}
+
+/**
+ * Implements hook_panels_delete_display().
+ */
+function expire_panels_delete_display($did) {
+  $display = new stdClass();
+  $display->did = $did;
+  expire_execute_expiration('panels', $display, EXPIRE_PANELS_DISPLAY_DELETE);
+}
+
+/**
  * Execute expiration method for object.
  */
 function expire_execute_expiration($type, $object, $action) {
diff --git a/includes/expire.panels.inc b/includes/expire.panels.inc
new file mode 100644
index 0000000..09f973e
--- /dev/null
+++ b/includes/expire.panels.inc
@@ -0,0 +1,138 @@
+<?php
+
+/**
+ * @file
+ * Provides class that expires panels.
+ */
+
+class ExpirePanels implements ExpireInterface {
+
+  /**
+   * Executes expiration actions for panels.
+   *
+   * @param object $display
+   *   Panel display.
+   *
+   * @param int $action
+   *   Action that has been executed.
+   *
+   * @param bool $skip_action_check
+   *   Shows whether should we check executed action or just expire node.
+   */
+  public function expire($display, $action, $skip_action_check = FALSE) {
+    $panel_pane = $this->getPanelPage($display);
+
+    $enabled_actions = variable_get('expire_panels_actions', array());
+    $enabled_actions = array_filter($enabled_actions);
+
+    // Stop further expiration if executed action is not selected by admin.
+    if (!in_array($action, $enabled_actions) && !$skip_action_check) {
+      return;
+    }
+
+    $expire_urls = array();
+
+    // Expire front page.
+    $expire_front_page = variable_get('expire_panels_front_page', EXPIRE_PANELS_FRONT_PAGE);
+    if ($expire_front_page) {
+      $expire_urls = ExpireAPI::getFrontPageUrls();
+    }
+
+    // Expire panel page.
+    $expire_panel_page = variable_get('expire_panels_panel_page', EXPIRE_PANELS_PANEL_PAGE);
+    if (!empty($panel_pane->path) && $expire_panel_page) {
+      $expire_urls['panel-' . $panel_pane->path] = $this->placeholdersToWildcard($panel_pane->path);
+    }
+
+    // Expire panelizer page.
+    // @todo currently supports only update.
+    $expire_panelizer = variable_get('expire_panels_panelizer_page', EXPIRE_PANELS_PANELIZER_PAGE);
+    if (module_exists('panelizer') && $expire_panelizer && !empty($display->context['panelizer'])) {
+      $panelizer = $display->context['panelizer'];
+      if (!empty($panelizer->type[2])) {
+        $function = 'expire_' . $panelizer->type[2] . '_update';
+        if (function_exists($function)) {
+          $function($panelizer->data);
+        }
+      }
+    }
+
+    // Expire custom pages.
+    $expire_custom = variable_get('expire_panels_custom', EXPIRE_USER_CUSTOM);
+    if ($expire_custom) {
+      $pages = variable_get('expire_panels_custom_pages');
+      $urls = ExpireAPI::expireCustomPages($pages, array('panel' => $display));
+      $expire_urls = array_merge($expire_urls, $urls);
+    }
+
+    // Flush page cache for expired urls.
+    ExpireAPI::executeExpiration($expire_urls, 'panels', $display);
+  }
+
+  /**
+   * Returns panel page for display.
+   *
+   * @param object $display
+   *   Panel display.
+   *
+   * @return object|null
+   *   Panel page.
+   */
+  public function getPanelPage($display) {
+    ctools_include('export');
+    $panel_handler = $this->getPanelHandler($display);
+    if (empty($panel_handler)) {
+      return NULL;
+    }
+
+    $pages = ctools_export_load_object('page_manager_pages', 'conditions', array('task' => $panel_handler->task, 'name' => $panel_handler->subtask));
+    if (empty($pages)) {
+      return NULL;
+    }
+
+    return reset($pages);
+  }
+
+  /**
+   * Returns panel handler for display.
+   *
+   * @param object $display
+   *   Panel display.
+   *
+   * @return object|null
+   *   Panel handler.
+   */
+  public function getPanelHandler($display) {
+    ctools_include('export');
+    $handlers = ctools_export_load_object('page_manager_handlers');
+    $panel_handler = NULL;
+
+    // Find panel handler by did property.
+    foreach ($handlers as $handler) {
+      if (empty($panel_handler) && !empty($handler->conf['did']) && $handler->conf['did'] == $display->did) {
+        $panel_handler = $handler;
+      }
+    }
+
+    return $panel_handler;
+  }
+
+  /**
+   * Replace placeholders with wildcard.
+   */
+  public function placeholdersToWildcard($url) {
+    $processed_url = array();
+    $parts = explode('/', $url);
+
+    // @todo need to handle wildcards within URL.
+    foreach ($parts as $part) {
+      // Look for placeholder that starts with "%" or "!".
+      if (preg_match('/^%|^!(|' . DRUPAL_PHP_FUNCTION_PATTERN . ')$/', $part)) {
+        return implode('/', $processed_url) . '|wildcard';
+      }
+      $processed_url[] = $part;
+    }
+
+    return $url;
+  }
+}
