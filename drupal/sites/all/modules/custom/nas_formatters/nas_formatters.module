<?php

/**
 * @file
 * NAS Formatters module.
 * Defines site-specific field formatters.
 */

/**
 * Implements hook_field_formatter_info().
 */
function nas_formatters_field_formatter_info() {
  return array(
    'twitter_small_link' => array(
      'label' => t('Twitter icon link'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'gray_block_with_title' => array(
      'label' => t('Gray block with title'),
      'field types' => array('text_long'),
      'settings' => array('title' => 'Bottom line'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function nas_formatters_theme() {
  return array(
    'twitter_icon_link' => array(
      'variables' => array('element' => NULL, 'field' => NULL),
    ),
    'gray_block_with_title' => array(
      'variables' => array(
        'element' => NULL,
       ),
      'template' => 'gray-block-with-title',
      'path' => drupal_get_path('module', 'nas_formatters') . '/templates',
    ),
  );
}

/**
 * Formats a link with twitter icon.
 */
function theme_twitter_icon_link($variables) {
  return l('<i class="icon-twitter"></i>', $variables['element']['url'], array('html' => TRUE));
}

/**
 * Implements hook_field_formatter_view().
 */
function nas_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  switch ($display['type']) {
    case 'twitter_small_link':
      $theme = 'twitter_icon_link';
      foreach ($items as $delta => $item) {
        $elements[$delta] = array(
          '#theme' => $theme,
          '#element' => $item,
          '#field' => $instance,
          '#display' => $display,
        );
      }
      break;
    case 'gray_block_with_title':
      foreach ($items as $delta => $item) {
        $variables['block_text'] = check_plain($item['value']);
        $variables['title'] = $display['settings']['title'];
        $output = theme('gray_block_with_title', $variables);
        $elements[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $elements;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function nas_formatters_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $formatter = $display['type'];
  $settings = $display['settings'];
  $form = array();
  switch ($formatter) {
    case 'gray_block_with_title':
      $form['title'] = array(
        '#title' => t('Block title'),
        '#type' => 'textfield',
        '#default_value' => $settings['title'],
        '#weight' => 0,
      );
      break;
  }
  return $form;
}

